---
title: "In-class Exercise 5.0"
author: "Sheryl Ann Tan Yi-Shi"
date: "2025-02-15"
date-modified: "last-modified"
execute: 
  echo: true
  eval: true
  warning: false
  freeze: true
---

# 1.0 Getting Started

## 1.1 Installing and Launching the R Packages

```{r}
pacman::p_load(tidyverse, readxl, SmartEDA, easystats, gtsummary, ggstatsplot)
```

## 1.2 Importing Data

```{r}
car_resale <-
  read_xls("data/ToyotaCorolla - Copy.xls", "data")
```

# 2.0 Data Overview

The code chunk below uses `glimpse` to understand the data structure of the dataset.

```{r}
glimpse(car_resale)
```

In order to see the records, you can use the `list()` function as shown in the code chunk below:

```{r}
list(car_resale)
```

```{r}
summary(car_resale)
```

The code chunk uses the `ExpData()` function, `type = 1` indicates the overall data summary, while `type = 2` generates the summary at variable-level.

```{r}
summary1 <- car_resale %>%
  ExpData(type = 1)
```

**Notes:**

-   `% of variables having complete cases` provides an indicator on missing values. Since it's 100% here, there are no missing values. In the event that the % is less than 100%, the function would further provide a breakdown on the missing values.

```{r}
car_resale %>%
  ExpData(type = 2)
```

```{r}
cols <- c("Mfg_Month", "HP_Bin", "CC_bin", "Doors", "Gears", "Cylinders", "Fuel_Type", "Color",
          "Met_Color","Automatic", "Mfr_Guarantee","BOVAG_Guarantee", "ABS", "Airbag_1","Airbag_2","Airco",
          "Automatic_airco", "Boardcomputer", "CD_Player", "Central_Lock", "Powered_Windows", "Power_Steering", "Radio", "Mistlamps", "Sport_Model", "Backseat_Divider", "Metallic_Rim", "Radio_cassette", "Tow_Bar")

car_resale <- read_xls("data/ToyotaCorolla - Copy.xls", sheet = "data") %>%
  mutate(Id = as.character(Id)) %>%
  mutate_each_(funs(factor(.)),cols)
```

```{r}
car_resale %>%
  ExpNumViz(target=NULL,
            nlim=10,
            Page=c(2,2))
```

```{r}

car_resale %>%
  ExpNumViz(target="Price",
            nlim=10,
            Page=c(2,2))
```

**Notes**

-   `target = NULL` is the default.

-   `nlim`: Numerical variables unique limit. Will exclude numerical variables that have less than nlim. This will help us identify the variables with very few unique values.

**For Categorical Variables**

```{r}
#| fig-width: 12
#| fig-height: 10

car_resale %>%
  ExpCatViz(target=NULL,
            col = "sky blue",
            clim = 10,
            margin =2,
            Page = c(4,4),
            sample = 16)
```

When building explanatory models, we need to avoid multicollinearity. Hence, we will construct a correlation matrix to analyse correlation.

```{r}
model <- lm(Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, data = car_resale)
model

# lm is a multiple linear regression model (least-square method)
```

The performance package is a collection of tools used to check model performance (e.g. linear regression, logistic regression, etc.).

```{r}
check_collinearity(model)

# This wrapper will perform an analysis and produce the VIF.
# This output is organised in a tibular data frame format.
```

```{r}
# This code chunk is identical to the previous code.
# Except that it is saved to an object class called check_c.

check_c <- check_collinearity(model)
plot(check_c)
```

**Notes**: Usually when the VIF is between 1 to 3, multicollinearity is lower.

If VIF \> 10, then we have to be careful.

In this case, `Age_08_04` and `Mfg_Year` show signs of multicollinearity since they are above 10.

```{r}
# This new model excludes the Mfg_Year.
model1 <- lm (Price ~ Age_08_04 + KM + Weight + Guarantee_Period, data = car_resale)
model1

# We would need to perform several diagnostic check. 
# We will perform the normality assumption test:
check_normality(model1)
```

```{r}
check_h <- check_heteroscedasticity(model1)
plot(check_h)
```

**Notes**: The plot above show that the data does not meet the heteroscedasticity test. There are two clear "groups". Hence, we can consider creating two separate models for each group.

`gtsummary`

Instead of producing the output as a graph, the output would be formatted into a table.

```{r}
tbl_regression(model1, intercept = TRUE)
```

```{r}
tbl_regression(model1,
               intercept = TRUE) %>%
  add_glance_source_note(
    label=list(sigma ~ "\U03C3"),
    include = c(r.squared, adj.r.squared,
                AIC, statistic,
                p.value, sigma) # These values will be added in the footnote.
  )
```

```{r}
p_model1 <- parameters(model1) # The parameters function will extract out the parameters of the table above.

p_model1 # The parameters are saved in a data table form.

# These parameters are from the model1 results. 
```

```{r}

plot(parameters(model1))

```

```{r}
ggcoefstats(model1, output = "plot" )
```

**Notes**: This plot is more statistical as the necessary information are plotted on the graph.

**Notes on Treemaps**:

-   Categorical data needs to be organised hierarchical.

-   The continuous data is mapped to two visual variables: colour and size of the tree. The colour should represent one continuous variable while the size represents the other continuous variable.

-   If you are using size to represent the continuous variable, you must ensure that the continuous variable does not have negative values. If the continuous variable has negative values, use colour (as it has diverging colours).
