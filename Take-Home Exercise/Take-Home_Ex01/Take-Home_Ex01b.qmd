---
title: "Take-Home Exercise 1.0: Creating Data Visualisation Beyond Default"
author: "Sheryl Ann Tan Yi-Shi"
date: "2025-02-15"
date-modified: "last-modified"
execute: 
  echo: true
  eval: true
  warning: false
  freeze: true
---

# 1.0 Introduction

## 1.1 Background

The maritime sector is one of the most critical components of global trade, contributing significantly to economic growth and sustainability. Understanding ship performance, fuel efficiency, and operational cost factors are essential for improving decision-making and minimizing environmental impact.

## 1.2 The Task

This exercise involves assuming the role of a graphical editor at an international media company that regularly publishes content on digital platforms. The company plans to release articles focused on one of the following themes:

-   Heart Attack in Japan

-   Ship Performance in the Gulf of Guinea

The selected theme for this task is ***Ship Performance in the Gulf of Guinea*** and the objective is to prepare data visualisation for the article.

## 1.3 About the Dataset

The dataset used in this exercise is sourced from Kaggle. It can be accessed via this [link](https://www.kaggle.com/datasets/jeleeladekunlefijabi/ship-performance-clustering-dataset/data).

This dataset contains information on key operational metrics and attributes of various ship types in the Gulf of Guinea. The dataset includes numerical (e.g. `speed_over_ground_knots`, `revenue_per_voyage_usd`) and categorical variables (e.g. `ship_type`, `maintenance_status`) relevant to ship performance evaluation.

# 2.0 Data Preparation

## 2.1 Loading R Packages

The following R packages were used:

| R Package   | Description |
|-------------|-------------|
| `dplyr`     |             |
| `tidyverse` |             |
| `lubridate` |             |
|             |             |
|             |             |
|             |             |
|             |             |

```{r}
pacman::p_load(ggiraph, plotly, gifski, gganimate, ggthemes, ggridges,
               patchwork, DT, tidyverse, dplyr, lubridate, ggdist) 
```

## 2.2 Importing the Data

The dataset was imported into R using the `read_csv` function from the `readr` package, which is part of the `tidyverse` suite.

```{r}
ship_data <- read_csv("data/ship_performance_dataset.csv")
```

## 2.3 Understanding the Data and Data Wrangling

To gain an initial understanding of the dataset, the following code chunk utilises the `glimpse` function from the `dplyr` package. This function provides a quick overview of the dataset's structure by displaying the first few entries of each column along with their data types.

::: panel-tabset
#### Code

```{r, results='hide'}
glimpse(ship_data)
```

#### Results

```{r, echo=FALSE}
glimpse(ship_data)
```
:::

Based on the output generated, the dataset consists of 2,736 rows and 18 columns.

### 2.3.1 Duplicate and Missing Value Checks

**Duplicate Data Check**

As duplicates can skew analysis results, identifying and removing them is crucial for subsequent analysis. Thus, a check for duplicate records was done using the `dplyr` package as shown in the code chunk below:

::: panel-tabset
#### Code

```{r, results='hide'}
duplicate_count <- sum(duplicated(ship_data))
cat("Number of duplicate rows:", duplicate_count, "\n")

if (duplicate_count > 0) {
  duplicate_rows <- ship_data[duplicated(ship_data), ]
  print(duplicate_rows)
} else {
  cat("No duplicate rows found.\n")
}
```

#### Results

```{r, echo=FALSE}
duplicate_count <- sum(duplicated(ship_data))
cat("Number of duplicate rows:", duplicate_count, "\n")

if (duplicate_count > 0) {
  duplicate_rows <- ship_data[duplicated(ship_data), ]
  print(duplicate_rows)
} else {
  cat("No duplicate rows found.\n")
}
```
:::

Based on the output, there are no duplicate records in the dataset.

**Missing Value Check**

Missing values in a dataset can introduce bias and affect the accuracy of subsequent analysis, potentially leading to misleading results. The following code chunk counts the number of missing values (`NA)` in the dataset:

```{r}
missing_value_count <- sum(rowSums(is.na(ship_data)) > 0)
cat("Number of rows with missing values:", missing_value_count, "\n")
```

Although the output indicates that there are no missing values (`NA`) in the dataset, a further assessment of categorical columns is required to check for unrecorded data. The following code chunk generates the unique values for each categorical column in the dataset:

::: panel-tabset
#### Code

```{r, results="hide"}
categorical_columns <- names(ship_data)[sapply(ship_data, is.character)]

for (col in categorical_columns) {
  cat("\nUnique values in", col, ":\n")
  print(unique(ship_data[[col]]))
}
```

#### Results

```{r, echo=FALSE}
categorical_columns <- names(ship_data)[sapply(ship_data, is.character)]

for (col in categorical_columns) {
  cat("\nUnique values in", col, ":\n")
  print(unique(ship_data[[col]]))
}
```
:::

From the results, it was observed that some of the columns containing categorical data contained the value ***None***, which may indicate missing or unrecorded data rather than an actual category. To quantify this, the following code counts the occurrences of ***None*** values in the affected categorical columns:

::: panel-tabset
#### Code

```{r, results="hide"}
categorical_columns <- names(ship_data)[sapply(ship_data, is.character)]

missing_categorical_counts <- data.frame(Column = categorical_columns, 
                                         Missing_Count = sapply(ship_data[categorical_columns], function(x) sum(is.na(x) | x == "None")))
```

#### Results

```{r, echo=FALSE}
print(missing_categorical_counts)
```
:::

Based on the results obtained above, each affected column contains 136 ***None*** values, representing approximately 5% of the total observations in the dataset. Since the percentage of missing values is relatively low, records containing ***None*** will be excluded from subsequent analysis.

### 2.3.2 Creating New Variables

The dataset covers the following time period: 4 June 2023 to 30 June 2024. To facilitate time-based analysis, the dates have been grouped into a new variable called ***Month***, which will represent the month of each record in a `"MM-YYYY"` format.

The following code was used to generate these variables:

```{r}

ship_data$Month <- format(ship_data$Date, "%Y-%m")  

head(ship_data$Month)
```

**Profit (USD)**

Profit is a key financial metric that reflects the overall economic performance of a ship's operation. To incorporate profit into the dataset, a new variable was created based on the difference between `Revenue_per_Voyage_USD` and `Operational_Cost_USD`.

```{r}
ship_data$Profit_USD <- ship_data$Revenue_per_Voyage_USD - ship_data$Operational_Cost_USD

summary(ship_data$Profit_USD)
```

Based on the summary statistics of the newly created `Profit_USD`, we can observe that some of the ships are loss-making, as shown by the **minimum** value.

### 2.3.3 Data Type Conversion

The data table below shows the current data type of each of the 19 columns, along with the proposed data type for conversion. To improve data handling and ensure accurate analysis, the proposed data type for each column should align with the nature of the data.

| Variable                | Current Data Type | Proposed Data Type |
|-------------------------|-------------------|--------------------|
| Date                    | Date              | Date               |
| Ship_Type               | Character         | Factor             |
| Route_Type              | Character         | Factor             |
| Engine_Type             | Character         | Factor             |
| Maintenance_Status      | Character         | Ordered Factor     |
| Speed_Over_Ground_knots | Double            | Double             |
| Engine_Power_kW         | Double            | Double             |
| Distance_Traveled_nm    | Double            | Double             |
| Draft_meters            | Double            | Double             |
| Weather_Condition       | Character         | Ordered Factor     |
| Cargo_Weight_tons       | Double            | Double             |
| Operational_Cost_USD    | Double            | Double             |
| Revenue_per_Voyage_USD  | Double            | Double             |
| Turnaround_Time_hours   | Double            | Double             |
| Efficiency_nm_per_kWh   | Double            | Double             |
| Seasonal_Impact_Score   | Double            | Double             |
| Weekly_Voyage_Count     | Double            | Integer            |
| Average_Load_Percentage | Double            | Double             |
| Month                   | Character         | Date               |
| Profit_USD              | Double            | Double             |

The following code chunk is used to implement the proposed data type conversions:

::: panel-tabset
#### Code

```{r, results='hide'}
ship_data$Ship_Type <- as.factor(ship_data$Ship_Type)
ship_data$Route_Type <- as.factor(ship_data$Route_Type)
ship_data$Engine_Type <- as.factor(ship_data$Engine_Type)

ship_data$Maintenance_Status <- factor(ship_data$Maintenance_Status, 
                                       levels = c("Critical", "Fair", "Good","None"), 
                                       ordered = TRUE)

ship_data$Weather_Condition <- factor(ship_data$Weather_Condition, 
                                      levels = c("Calm", "Moderate", "Rough", "Severe","None"), 
                                      ordered = TRUE)

ship_data$Month <- as.Date(paste0(ship_data$Month, "-01"), format="%Y-%m-%d")

ship_data$Weekly_Voyage_Count <- as.integer(ship_data$Weekly_Voyage_Count)
```

#### Results

```{r, echo=FALSE}
glimpse(ship_data)
```
:::

# 3.0 Data Visualisation

## 3.1 Overall Revenue, Cost and Cargo Weight Trend by Month

::: panel-tabset
#### Plot

```{r, echo=FALSE}
monthly_summary <- ship_data %>%
  group_by(Month) %>%
  summarise(
    Total_Revenue = sum(Revenue_per_Voyage_USD, na.rm = TRUE),
    Total_Cost = sum(Operational_Cost_USD, na.rm = TRUE),
    Total_Cargo_Weight = sum(Cargo_Weight_tons, na.rm = TRUE)
  )

monthly_summary$Month <- as.Date(paste0(monthly_summary$Month, "-01"), format="%Y-%m-%d")

max_revenue <- max(monthly_summary$Total_Revenue/1e6, na.rm = TRUE)
max_cargo <- max(monthly_summary$Total_Cargo_Weight/1e6, na.rm = TRUE)
scaling_factor <- max_revenue / max_cargo  


ggplot(monthly_summary, aes(x = Month)) +
  geom_col(aes(y = Total_Cargo_Weight/1e6*scaling_factor, fill = "Cargo Weight (Million Tons)"), alpha = 0.6) + 
  geom_line(aes(y = Total_Revenue/1e6, color = "Revenue (in USD Million)"), size = 1.2) + 
  geom_line(aes(y = Total_Cost/1e6, color = "Operational Cost (in USD Million)"), size = 1.2, linetype = "dashed") +
  scale_y_continuous(
    name = "Revenue & Cost (Million USD)", 
    labels = scales::dollar_format(suffix = "M", prefix = ""),
    sec.axis = sec_axis(~ ./scaling_factor, name = "Cargo Weight (Million Tons)")  
  ) +
  scale_x_date(
    date_labels = "%b %Y",
    breaks = seq(min(monthly_summary$Month), max(monthly_summary$Month), by = "1 month")
  ) +
  labs(
    title = "Revenue, Cost, and Cargo Weight by Month",
    x = "Month",
    fill = "Metric",
    color = "Metric"
  ) +
  scale_fill_manual(values = c("Cargo Weight (Million Tons)" = "lightblue")) +  
  scale_color_manual(values = c(
    "Revenue (in USD Million)" = "black",
    "Operational Cost (in USD Million)" = "darkred"
  )) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
    axis.text.x = element_text(angle = 45, hjust = 1),
    legend.position = "top"
  )
```

#### Code

```{r, eval=FALSE, results="hide"}
monthly_summary <- ship_data %>%
  group_by(Month) %>%
  summarise(
    Total_Revenue = sum(Revenue_per_Voyage_USD, na.rm = TRUE),
    Total_Cost = sum(Operational_Cost_USD, na.rm = TRUE),
    Total_Cargo_Weight = sum(Cargo_Weight_tons, na.rm = TRUE)
  )

monthly_summary$Month <- as.Date(paste0(monthly_summary$Month, "-01"), format="%Y-%m-%d")

max_revenue <- max(monthly_summary$Total_Revenue/1e6, na.rm = TRUE)
max_cargo <- max(monthly_summary$Total_Cargo_Weight/1e6, na.rm = TRUE)
scaling_factor <- max_revenue / max_cargo  


ggplot(monthly_summary, aes(x = Month)) +
  geom_col(aes(y = Total_Cargo_Weight/1e6*scaling_factor, fill = "Cargo Weight (Million Tons)"), alpha = 0.6) + 
  geom_line(aes(y = Total_Revenue/1e6, color = "Revenue (in USD Million)"), size = 1.2) + 
  geom_line(aes(y = Total_Cost/1e6, color = "Operational Cost (in USD Million)"), size = 1.2, linetype = "dashed") +
  scale_y_continuous(
    name = "Revenue & Cost (Million USD)", 
    labels = scales::dollar_format(suffix = "M", prefix = ""),
    sec.axis = sec_axis(~ ./scaling_factor, name = "Cargo Weight (Million Tons)")  
  ) +
  scale_x_date(
    date_labels = "%b %Y",
    breaks = seq(min(monthly_summary$Month), max(monthly_summary$Month), by = "1 month")
  ) +
  labs(
    title = "Revenue, Cost, and Cargo Weight by Month",
    x = "Month",
    fill = "Metric",
    color = "Metric"
  ) +
  scale_fill_manual(values = c("Cargo Weight (Million Tons)" = "lightblue")) +  
  scale_color_manual(values = c(
    "Revenue (in USD Million)" = "black",
    "Operational Cost (in USD Million)" = "darkred"
  )) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
    axis.text.x = element_text(angle = 45, hjust = 1),
    legend.position = "top"
  )
```
:::

::: {.callout-note icon="false"}
#### Insights

1.  Revenue consistently exceeds operational costs, indicating profitability across all months.
2.  Revenue, operational cost and cargo weight exhibit the same trend. As cargo weight increases, revenue and costs increase accordingly. This potentially suggests that higher cargo volumes drive revenue and cost.
:::

## 3.2 Profitability by Ship Types

In this section, we will analyze the profit distribution across different ship types to gain insights into their profitability trends and variability.

The code chunk below utilizes the patchwork package to combine both boxplots and ridgeline plots, allowing for a comprehensive visualization of profit distributions across ship types.

::: panel-tabset
#### Plot

```{r, echo=FALSE}

# Filtering out "None" values from the Ship_Type Column:
filtered_ship_data <- ship_data %>%   filter(Ship_Type != "None")

medians <- filtered_ship_data %>%
  group_by(Ship_Type) %>%
  summarize(Median_Profit = median(Profit_USD/1e6))

filtered_ship_data <- filtered_ship_data %>%
  left_join(medians, by = "Ship_Type")


p1 <- ggplot(data=filtered_ship_data,
       aes(y=Profit_USD/1e6, x=Ship_Type, fill = Ship_Type)) +
  geom_boxplot(notch=TRUE, show.legend = FALSE) +
  
   geom_text(
    data = medians,
    aes(label = sprintf("%.2fM", Median_Profit), y = Median_Profit),
    nudge_y = 0.1,
    size = 2.5
  ) +
  
  scale_y_continuous(labels = scales::dollar_format(suffix = "M", prefix = ""), limits = c(-1.0,1.5)) + 
  labs(
    x = "Ship Type", 
    y = "Profit (in USD Million)"  
  ) +
  coord_flip() +
  theme_classic()


p2 <- ggplot(data = filtered_ship_data, aes(x = Profit_USD / 1e6, y = Ship_Type)) +
  geom_density_ridges(aes(group = Ship_Type, fill = Ship_Type), alpha = 0.8, show.legend = FALSE) +
  scale_x_continuous(labels = scales::dollar_format(suffix = "M", prefix = ""), limits = c(-1.0,1.5)) +
  labs(
    x = "Profit (in USD Million)",  # Custom x-axis title
    y = "Ship Type"
  ) +
  theme_classic() +
  theme(axis.text.y = element_text(angle = 0))


combined_plot <- (p1 / p2) +
  plot_layout(guides = "collect") + 
  plot_annotation(
    title = "Profitability by Ship Types",
    theme = theme(
      plot.title = element_text(hjust = 0.5, size = 16, face = "bold")
    )
  )


combined_plot

```

#### Code

```{r, eval=FALSE, results="hide"}

# Filtering out "None" values from the Ship_Type Column:
filtered_ship_data <- ship_data %>%   filter(Ship_Type != "None")

medians <- filtered_ship_data %>%
  group_by(Ship_Type) %>%
  summarize(Median_Profit = median(Profit_USD/1e6))

filtered_ship_data <- filtered_ship_data %>%
  left_join(medians, by = "Ship_Type")


p1 <- ggplot(data=filtered_ship_data,
       aes(y=Profit_USD/1e6, x=Ship_Type, fill = Ship_Type)) +
  geom_boxplot(notch=TRUE, show.legend = FALSE) +
  
   geom_text(
    data = medians,
    aes(label = sprintf("%.2fM", Median_Profit), y = Median_Profit),
    nudge_y = 0.1,
    size = 2.5
  ) +
  
  scale_y_continuous(labels = scales::dollar_format(suffix = "M", prefix = ""), limits = c(-1.0,1.5)) + 
  labs(
    x = "Ship Type", 
    y = "Profit (in USD Million)"  
  ) +
  coord_flip() +
  theme_classic()


p2 <- ggplot(data = filtered_ship_data, aes(x = Profit_USD / 1e6, y = Ship_Type)) +
  geom_density_ridges(aes(group = Ship_Type, fill = Ship_Type), alpha = 0.8, show.legend = FALSE) +
  scale_x_continuous(labels = scales::dollar_format(suffix = "M", prefix = ""), limits = c(-1.0,1.5)) +
  labs(
    x = "Profit (in USD Million)",  # Custom x-axis title
    y = "Ship Type"
  ) +
  theme_classic() +
  theme(axis.text.y = element_text(angle = 0))


combined_plot <- (p1 / p2) +
  plot_layout(guides = "collect") + 
  plot_annotation(
    title = "Profitability by Ship Types",
    theme = theme(
      plot.title = element_text(hjust = 0.5, size = 16, face = "bold")
    )
  )

```
:::

::: {.callout-note icon="false"}
#### Insights

1.  **Tankers** have the lowest median profit at US\$0.23M amongst all ship types, as indicated by the boxplot and further supported by the peak of the ridgeline plot being closer to zero.

2.  Although the median profits for **Fish Carriers, Container Ships** and **Bulk Carriers** appear relatively similar (as indicated by the boxplot), the distribution of profits differ across all ship types.

    \(a\) **Bulk Carriers** display a bimodal profit distribution, strongly suggesting two distinct groups within this category. It implies that some Bulk Carriers are highly profitable while others struggle.

    \(b\) Both **Fish Carriers** and **Container Ships** exhibit unimodal distributions. However, **Container Ships** appear to have a higher profit variability as indicated by the greater range and IQR in the boxplot.
:::

## 3.3 Sales and Profit by Route Types

In this section, we will analyse the sales and profitability by route types based on quarterly trends. However, as June 2023 represents an incomplete quarter, we will exclude it from our analysis to ensure consistency in our quarterly comparisons.

The analysis assumes that the fiscal year starts in July. Hence, we will define the quarters as follows:

-   **Q1** = July 2023 - September 2023

-   **Q2** = October 2023 - December 2023

-   **Q3 =** January 2024 - March 2024

-   **Q4** = April 2024 - June 2024.

Each chart is divided into four quadrants:

-   **High Sales, High Profit** (Top Right)

-   **High Sales, Low Profit** (Top Left): This could indicate potential issues with cost management or pricing.

-   **Low Sales, High Profit** (Bottom Right)

-   **Low Sales, Low Profit** (Bottom Left): Potentially requires attention.

The code chunk below generates a facet gird consisting of bubble charts, with each panel representing a quarterly breakdown of sales and profitability by route type. The bubble size reflects total weekly voyages to further aid in understanding how different route types perform over time.

::: panel-tabset
#### Plot

```{r, echo=FALSE}

route_summary <- ship_data %>%
  filter(Route_Type != "None") %>%  # Exclude Route_Type = "None"
  filter(!(year(Month) == 2023 & month(Month) == 6)) %>%  # Exclude June 2023
  mutate(Quarter = case_when(
    month(Month) %in% 7:9  ~ "Q1",  # July - September
    month(Month) %in% 10:12 ~ "Q2", # October - December
    month(Month) %in% 1:3  ~ "Q3",  # January - March
    month(Month) %in% 4:6  ~ "Q4"   # April - June
  )) %>%
  filter(!is.na(Quarter)) %>% 
  group_by(Quarter, Route_Type) %>%
  summarise(
    Total_Sales = sum(Revenue_per_Voyage_USD, na.rm = TRUE),
    Total_Profit = sum(Profit_USD, na.rm = TRUE),
    Total_Weekly_Voyages = sum(Weekly_Voyage_Count, na.rm = TRUE) 
  ) %>%
  mutate(
    Sales_Percentile = percent_rank(Total_Sales), 
    Profit_Percentile = percent_rank(Total_Profit)
  )


p3 <- ggplot(route_summary, aes(x = Sales_Percentile, y = Profit_Percentile, 
                          size = Total_Weekly_Voyages, color = Route_Type)) +
  geom_point(alpha = 0.7) + 
  geom_hline(yintercept = 0.5, linetype = "dashed", color = "black") +
  geom_vline(xintercept = 0.5, linetype = "dashed", color = "black") +  
  scale_size(range = c(3, 15), name = "Total Weekly Voyages") + 
  scale_x_continuous(labels = scales::percent_format()) +
  scale_y_continuous(labels = scales::percent_format()) +
  labs(
    title = "Sales and Profit by Route Types",
    x = "Sales Percentile",
    y = "Profit Percentile",
    color = "Route Type",
    size = "Total Weekly Voyages"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
    legend.position = "right"
  ) +
  facet_wrap(~ Quarter, ncol = 2)

p3

```

#### Code

```{r, eval=FALSE, results="hide"}

route_summary <- ship_data %>%
  filter(Route_Type != "None") %>%  # Exclude Route_Type = "None"
  filter(!(year(Month) == 2023 & month(Month) == 6)) %>%  # Exclude June 2023
  mutate(Quarter = case_when(
    month(Month) %in% 7:9  ~ "Q1",  # July - September
    month(Month) %in% 10:12 ~ "Q2", # October - December
    month(Month) %in% 1:3  ~ "Q3",  # January - March
    month(Month) %in% 4:6  ~ "Q4"   # April - June
  )) %>%
  filter(!is.na(Quarter)) %>% 
  group_by(Quarter, Route_Type) %>%
  summarise(
    Total_Sales = sum(Revenue_per_Voyage_USD, na.rm = TRUE),
    Total_Profit = sum(Profit_USD, na.rm = TRUE),
    Total_Weekly_Voyages = sum(Weekly_Voyage_Count, na.rm = TRUE) 
  ) %>%
  mutate(
    Sales_Percentile = percent_rank(Total_Sales), 
    Profit_Percentile = percent_rank(Total_Profit)
  )


p3 <- ggplot(route_summary, aes(x = Sales_Percentile, y = Profit_Percentile, 
                          size = Total_Weekly_Voyages, color = Route_Type)) +
  geom_point(alpha = 0.7) + 
  geom_hline(yintercept = 0.5, linetype = "dashed", color = "black") +
  geom_vline(xintercept = 0.5, linetype = "dashed", color = "black") +  
  scale_size(range = c(3, 15), name = "Total Weekly Voyages") + 
  scale_x_continuous(labels = scales::percent_format()) +
  scale_y_continuous(labels = scales::percent_format()) +
  labs(
    title = "Sales and Profit by Route Types",
    x = "Sales Percentile",
    y = "Profit Percentile",
    color = "Route Type",
    size = "Total Weekly Voyages"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(hjust = 0.5, size = 14, face = "bold"),
    legend.position = "right"
  ) +
  facet_wrap(~ Quarter, ncol = 2)

```
:::

::: {.callout-note icon="false"}
#### Insights

1.  With the exception of Q2, **Long-Haul Routes** predominantly occupy the top-right quadrant, indicating strong performance in both sales and profit across most quarters.

2.  **Coastal Routes** consistently rank above 50th percentile in profitability across all quarters, suggesting their high-margin nature. However, their sales performance fluctuates.

3.  **Transoceanic Routes** consistently rank below the 50th percentile in profitability across all quarters. In terms of sales, they exhibit the lowest sales in Q1 and Q2 but show improvements in Q3 and Q4.

4.  With the exception of Q2, **Short-Haul** **Routes** exhibit both low profitability and sales in Q3 and Q4, thus positioning them as an under-performing route. In addition, they record the lowest number of voyages in Q3.
:::

## 3.4 Maintenance Status by Ship Types

::: panel-tabset
#### Plot

```{r, echo=FALSE}

# Filter out Ship_Type = "None" and Maintenance_Status = "None"
filtered_ship_data2 <- ship_data %>%
  filter(Ship_Type != "None", Maintenance_Status != "None")

# Create stacked bar chart with Brewer Palette
ggplot(filtered_ship_data2, aes(x = Ship_Type, fill = Maintenance_Status)) +
  geom_bar(position = "fill", color="black") +  # Stacked proportionally
  scale_y_continuous(labels = scales::percent_format()) +  # Convert to percentage
  scale_fill_brewer(palette = "Pastel1") +  # Change color palette
  labs(
    title = "Maintenance Status by Ship Type",
    x = "Ship Type",
    y = "Percentage",
    fill = "Maintenance Status"
  ) +
  theme_minimal() + 
  theme(
    plot.title = element_text(hjust = 0.5, size = 16, face = "bold"))


```

#### Code

```{r, results='hide'}

# Filter out Ship_Type = "None" and Maintenance_Status = "None"
filtered_ship_data2 <- ship_data %>%
  filter(Ship_Type != "None", Maintenance_Status != "None")

# Create stacked bar chart with Brewer Palette
ggplot(filtered_ship_data2, aes(x = Ship_Type, fill = Maintenance_Status)) +
  geom_bar(position = "fill", color="black") +  # Stacked proportionally
  scale_y_continuous(labels = scales::percent_format()) +  # Convert to percentage
  scale_fill_brewer(palette = "Pastel1") +  # Change color palette
  labs(
    title = "Maintenance Status by Ship Type",
    x = "Ship Type",
    y = "Percentage",
    fill = "Maintenance Status"
  ) +
  theme_minimal() + 
  theme(
    plot.title = element_text(hjust = 0.5, size = 16, face = "bold"))


```
:::

::: {.callout-note icon="false"}
#### Insights

\[WRITE INSIGHTS HEREEEE\]
:::
