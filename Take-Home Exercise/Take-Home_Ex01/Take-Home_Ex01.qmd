---
title: "Take-Home Exercise 1.0: Creating Data Visualisation Beyond Default"
author: "Sheryl Ann Tan Yi-Shi"
date: "2025-02-15"
date-modified: "last-modified"
execute: 
  echo: true
  eval: true
  warning: false
  freeze: true
---

# 1.0 Introduction

## 1.1 Background

Cardiovascular diseases, including heart attacks, are a leading cause of mortality worldwide. In recent years, Japan has experienced a steady increase in heart disease-related mortality, largely driven by its aging population, thus making it a growing public health concern (Ohira et al., 2023).

## 1.2 The Task

This exercise involves assuming the role of a graphical editor at an international media company that regularly publishes content on digital platforms. The company plans to release articles focused on one of the following themes:

-   Heart Attack in Japan

-   Ship Performance in the Gulf of Guinea

For the purposes of this take-home exercise, the theme, ***Heart Attack in Japan***, was selected for the preparation of data visualizations for the article.

## 1.3 About the Dataset

The dataset used in this exercise is sourced from Kaggle and can be accessed via this [link](https://www.kaggle.com/datasets/ashaychoudhary/heart-attack-in-japan-youth-vs-adult).

This dataset provides the opportunity to perform a comprehensive analysis of heart attack incidents in Japan as it includes a range of features such as:

-   **Age and Demographics** including gender and region.

-   **Medical Indicators** including cholesterol level, heart rate, systolic blood pressure, and diastolic blood pressure.

-   **Physical Metrics** including Body Mass Index (BMI) measurements.

-   **Behavioural Factors** including physical activity levels and levels of alcohol consumption.

# 2.0 Data Preparation

## 2.1 Loading R Packages

The following R packages were used:

| R Package   | Description |
|-------------|-------------|
| `dplyr`     |             |
| `tidyverse` |             |
|             |             |
|             |             |
|             |             |
|             |             |
|             |             |

```{r}
pacman::p_load(ggiraph, plotly, 
               patchwork, DT, tidyverse, dplyr) 
```

## 2.2 Importing the Data

The dataset was imported into R using the `read_csv` function from the `readr` package, which is part of the `tidyverse` suite.

```{r}
heartattack_data <- read_csv("data/japan_heart_attack_dataset.csv")
```

## 2.3 Understanding the Data and Data Wrangling

To gain an initial understanding of the dataset, the following code chunk utilises the `glimpse` function from the `dplyr` package. This function provides a quick overview of the dataset's structure by displaying the first few entries of each column along with their data types.

::: panel-tabset
#### Code

```{r, results='hide'}
glimpse(heartattack_data)
```

#### Results

```{r, echo=FALSE}
# Display the structure of the dataset
glimpse(heartattack_data)
```
:::

Based on the output generated, the dataset consists of 30,000 rows and 32 columns.

### 2.3.1 Filtering of Columns

From the output generated in Section 2.3, the dataset includes 15 columns labelled from `Extra_Column_1` to `Extra_Column_15` . These columns do not have clear descriptions nor apparent relevance to the study. Hence, in order to streamline the dataset, these columns were removed. This would allow us to focus on variables that would be more relevant to the analysis.

After filtering out the irrelevant columns, the dataset now comprises of 17 columns as shown in the *Results* tab below:

::: panel-tabset
#### Code

```{r, results='hide'}
heartattack_data_filtered <- select(heartattack_data, -matches("Extra_Column_"))

```

#### Results

```{r, echo=FALSE}
glimpse(heartattack_data_filtered)

```
:::

### 2.3.2 Duplicate and Missing Value Checks

**Duplicate Data Check**

We performed a check for duplicate records using the `dplyr` package. Duplicates can skew analysis results. Hence, identifying and removing them is crucial.

::: panel-tabset
#### Code

```{r, results='hide'}
heartattack_data_v3 <- heartattack_data_filtered %>%
  mutate(is_duplicate = duplicated(.) | duplicated(., fromLast = TRUE))

# Filtering to obtain only the rows that are duplicates
duplicates_only <- filter(heartattack_data_v3, is_duplicate == TRUE)

# Displaying the first few rows of the duplicates
head(duplicates_only)
```

#### Results

```{r, echo=FALSE}
heartattack_data_v3 <- heartattack_data_filtered %>%
  mutate(is_duplicate = duplicated(.) | duplicated(., fromLast = TRUE))

# Filtering to obtain only the rows that are duplicates
duplicates_only <- filter(heartattack_data_v3, is_duplicate == TRUE)

# Displaying the first few rows of the duplicates
head(duplicates_only)
```
:::

After applying the duplicate check, the output indicated a tibble data frame of 0 Ã— 18, which implies that there are no duplicate records in our dataset.

**Missing Value Check**

Missing values in a dataset can introduce bias and affect the accuracy of statistical analysis, leading to misleading results. Hence, the `dplyr` package was utilised to identify and summarise the missing values across each variable in the dataset.

::: panel-tabset
#### Code

```{r, results='hide'}
missing_values_summary <- heartattack_data_filtered %>%
  summarise_all(~ sum(is.na(.)))

missing_values_summary
```

#### Results

```{r, echo=FALSE}
missing_values_summary <- heartattack_data_filtered %>%
  summarise_all(~ sum(is.na(.)))

missing_values_summary
```
:::

The output indicates the count of missing values for each variable in the dataset. In this case, all columns have a count of 0, indicating that this dataset has no missing values.

### 2.3.3 Recoding Variables

**Recoding BMI**

Raw BMI values alone do not provide an intuitive interpretation of body weight, making interpretation difficult for both technical and non-technical audiences. As such, there is a need to recode the BMI values into meaningful groups.

In this exercise, the BMI values were categorised into four distinct groups in accordance to the World Health Organisation's International BMI Classification. Applying this classification would simplify the interpretation of BMI values, allowing readers of the article to easily determine whether an individual falls within a healthy range or an at-risk category, and the potential relationship with heart attack incidence.

The categories used are as follows:

| Classification | BMI         |
|----------------|-------------|
| Underweight    | \<18.5      |
| Normal Weight  | 18.5 - 24.9 |
| Pre-Obese      | 25.0 - 29.9 |
| Obese          | \>=30       |

The `cut` function in R was employed to implement this classification. This function assigns each BMI value to one of the specified categories, creating a new column, `BMI_Category`, in the dataset.

::: panel-tabset
#### Code

```{r, results='hide'}
# Categorizing BMI according to WHO standards
heartattack_data_filtered$BMI_Category <- cut(
  heartattack_data_filtered$BMI,
  breaks = c(-Inf, 18.5, 24.9, 29.9, Inf),
  labels = c("Underweight", "Normal Weight", "Pre-Obese", "Obese"),
  right = TRUE
)

```

#### Results

```{r, echo=FALSE}
# Categorizing BMI according to WHO standards
table(heartattack_data_filtered$BMI_Category)
```
:::

**Recoding Age**

In epidemiological studies, age is often grouped into categories rather than analysed as a continuous variable. While age is a key determinant of health risks, raw age variables do not immediately provide clear insights. Binning age into meaningful categories simplifies interpretation, making it easier to identify trends across different life stages.

The `age` variable was binned into the following categories:

| Classification     | Age Range |
|--------------------|-----------|
| Youth              | 0 - 17    |
| Young Adult        | 18 - 35   |
| Middle-Aged Adults | 36 - 64   |
| Elderly            | \>= 65    |

The code chunk below uses the `cut()` function in R to categorise the `age` variable into the aforementioned groupings. A new variable called `age_group` would be created:

::: panel-tabset
#### Code

```{r, results='hide'}

heartattack_data_filtered$Age_Group <- cut(
  heartattack_data_filtered$Age,
  breaks = c(-Inf, 17, 35, 64, Inf), 
  labels = c("Youth", "Young Adult", "Middle-Aged Adult", "Elderly"),
  right = TRUE
)

# Verify the new categories
table(heartattack_data_filtered$Age_Group)


```

#### Results

```{r, echo=FALSE}
# Categorizing BMI according to WHO standards
table(heartattack_data_filtered$Age_Group)
```
:::

### 2.3.4 Data Type Conversion

The data table below shows the current data type of each of the 17 columns, along with the proposed data type for conversion. To improve data handling and ensure accurate analysis, the proposed data type for each column should align with the nature of the data.

| Variable                | Current Data Type | Proposed Data Type |
|-------------------------|-------------------|--------------------|
| Age_Group               | Character         | Ordered Factor     |
| Cholesterol_Level       | Double            | Double             |
| Stress_Levels           | Double            | Double             |
| Heart_Rate              | Double            | Double             |
| Systolic_BP             | Double            | Double             |
| Diastolic_BP            | Double            | Double             |
| Gender                  | Character         | Factor             |
| Region                  | Character         | Factor             |
| Smoking_History         | Character         | Factor             |
| Diabetes_History        | Character         | Factor             |
| Hypertension_History    | Character         | Factor             |
| Physical_Activity       | Character         | Ordered Factor     |
| Diet_Quality            | Character         | Ordered Factor     |
| Alcohol_Consumption     | Character         | Ordered Factor     |
| Family_History          | Character         | Factor             |
| Heart_Attack_Occurrence | Character         | Factor             |
| BMI_Category            | Character         | Ordered Factor     |

The following code chunk is used to implement the proposed data type conversions:

::: panel-tabset
#### Code

```{r, results='hide'}
# Convert numeric variables
heartattack_data_filtered <- heartattack_data_filtered %>%
  mutate(
    Age = as.integer(Age)
  )

# Convert categorical variables to factors
heartattack_data_filtered <- heartattack_data_filtered %>%
  mutate(
    Gender = as.factor(Gender),
    Region = as.factor(Region),
    Smoking_History = as.factor(Smoking_History),
    Diabetes_History = as.factor(Diabetes_History),
    Hypertension_History = as.factor(Hypertension_History),
    Family_History = as.factor(Family_History),
    Heart_Attack_Occurrence = as.factor(Heart_Attack_Occurrence)
  )

# Convert ordered categorical variables
heartattack_data_filtered <- heartattack_data_filtered %>%
  mutate(
    Physical_Activity = factor(Physical_Activity, 
                               levels = c("Low", "Moderate", "High"), 
                               ordered = TRUE),
    Diet_Quality = factor(Diet_Quality, 
                          levels = c("Poor", "Average", "Good"), 
                          ordered = TRUE),
    Alcohol_Consumption = factor(Alcohol_Consumption, 
                                 levels = c("None", "Low", "Moderate", "High"), 
                                 ordered = TRUE),
    BMI_Category = factor(BMI_Category, 
                          levels = c("Underweight", "Normal Weight", "Pre-Obese", "Obese"), 
                          ordered = TRUE),
    Age_Group = factor(Age_Group, 
                       levels = c("Youth", "Young Adult", "Middle-Aged Adult", "Elderly"), 
                       ordered = TRUE)
  )
```

#### Results

```{r, echo=FALSE}
glimpse(heartattack_data_filtered)
```
:::

# 3.0 Data Visualisation

```{r}
library(ggplot2)
library(scales)  # For percentage formatting

# Create a stacked bar chart with percentages
ggplot(heartattack_data_filtered, aes(x = Age_Group, fill = Heart_Attack_Occurrence)) +
  geom_bar(position = "fill") +  # "fill" makes it a proportional stacked chart
  scale_y_continuous(labels = percent_format()) +  # Convert y-axis to percentages
  labs(title = "Proportion of Heart Attack Occurrences by Age Group",
       x = "Age Group",
       y = "Percentage",
       fill = "Heart Attack Occurrence") +
  theme_minimal()

```

```{r}
library(ggplot2)
library(ggridges)  # For ridgeline plots

# Create ridgeline plot for Systolic BP by Heart Attack Occurrence
ggplot(heartattack_data_filtered, aes(x = Systolic_BP, y = Heart_Attack_Occurrence, fill = Heart_Attack_Occurrence)) +
  geom_density_ridges(alpha = 0.7, scale = 1.2) +
  labs(title = "Ridgeline Plot: Systolic Blood Pressure by Heart Attack Occurrence",
       x = "Systolic Blood Pressure",
       y = "Heart Attack Occurrence") +
  theme_minimal() +
  theme(legend.position = "none")

```

```{r}
library(ggplot2)
library(ggridges)  # For ridgeline plots

# Create ridgeline plot for Diastolic BP by Heart Attack Occurrence
ggplot(heartattack_data_filtered, aes(x = Diastolic_BP, y = Heart_Attack_Occurrence, fill = Heart_Attack_Occurrence)) +
  geom_density_ridges(alpha = 0.7, scale = 1.2) +
  labs(title = "Ridgeline Plot: Diastolic Blood Pressure by Heart Attack Occurrence",
       x = "Diastolic Blood Pressure",
       y = "Heart Attack Occurrence") +
  theme_minimal() +
  theme(legend.position = "none")

```

```{r}
library(ggplot2)
library(ggridges)  # For ridgeline plots

# Create ridgeline plot for Stress Levels by Heart Attack Occurrence
ggplot(heartattack_data_filtered, aes(x = Stress_Levels, y = Heart_Attack_Occurrence, fill = Heart_Attack_Occurrence)) +
  geom_density_ridges(alpha = 0.7, scale = 1.2) +
  labs(title = "Ridgeline Plot: Stress Levels by Heart Attack Occurrence",
       x = "Stress Levels",
       y = "Heart Attack Occurrence") +
  theme_minimal() +
  theme(legend.position = "none")

```

```{r}
library(ggplot2)
library(scales)  # For percentage formatting

# Create a stacked bar chart with percentages
ggplot(heartattack_data_filtered, aes(x = BMI_Category, fill = Heart_Attack_Occurrence)) +
  geom_bar(position = "fill") +  # "fill" makes it a proportional stacked chart
  scale_y_continuous(labels = percent_format()) +  # Convert y-axis to percentages
  labs(title = "Proportion of Heart Attack Occurrences by BMI Category",
       x = "BMI Category",
       y = "Percentage",
       fill = "Heart Attack Occurrence") +
  theme_minimal()

```

```{r}
library(ggplot2)

# Create a grouped bar chart for Heart Attack Occurrence by BMI Category
ggplot(heartattack_data_filtered, aes(x = BMI_Category, fill = Heart_Attack_Occurrence)) +
  geom_bar(position = "dodge") +  # "dodge" separates the bars instead of stacking them
  labs(title = "Heart Attack Occurrences by BMI Category",
       x = "BMI Category",
       y = "Count",
       fill = "Heart Attack Occurrence") +
  theme_minimal()

```

```{r}
ggplot(heartattack_data_filtered, aes(x = Age_Group, fill = Heart_Attack_Occurrence)) +
  geom_bar(position = "stack") +  # Stacked to show total cases per group
  labs(title = "Total Heart Attack Cases by Age Group",
       x = "Age Group",
       y = "Count",
       fill = "Heart Attack Occurrence") +
  theme_minimal()

```

```{r}
library(ggplot2)

# Create a grouped bar chart for Heart Attack Occurrence by Gender
ggplot(heartattack_data_filtered, aes(x = Gender, fill = Heart_Attack_Occurrence)) +
  geom_bar(position = "dodge") +  # "dodge" separates the bars for easy comparison
  labs(title = "Heart Attack Occurrences by Gender",
       x = "Gender",
       y = "Count",
       fill = "Heart Attack Occurrence") +
  theme_minimal()

```

```{r}
library(ggplot2)
library(ggridges)  # For ridgeline plots

# Create ridgeline plot for Heart Rate by Heart Attack Occurrence
ggplot(heartattack_data_filtered, aes(x = Heart_Rate, y = Heart_Attack_Occurrence, fill = Heart_Attack_Occurrence)) +
  geom_density_ridges(alpha = 0.7, scale = 1.2) +
  labs(title = "Ridgeline Plot: Heart Rate by Heart Attack Occurrence",
       x = "Heart Rate",
       y = "Heart Attack Occurrence") +
  theme_minimal() +
  theme(legend.position = "none")


```

```{r}
ggplot(heartattack_data_filtered, aes(x = Physical_Activity, fill = Heart_Attack_Occurrence)) +
  geom_bar(position = "fill") +  # "fill" makes it a proportional stacked chart
  scale_y_continuous(labels = scales::percent_format()) +
  labs(title = "Proportion of Heart Attack Occurrences by Physical Activity Level",
       x = "Physical Activity Level",
       y = "Percentage",
       fill = "Heart Attack Occurrence") +
  theme_minimal()


```

```{r}
ggplot(heartattack_data_filtered, aes(x = Smoking_History, y = Systolic_BP, 
                                      fill = Heart_Attack_Occurrence)) +
  geom_violin(alpha = 0.7) +
  labs(title = "Violin Plot: Systolic BP by Smoking History & Heart Attack Occurrence",
       x = "Smoking History",
       y = "Systolic BP") +
  theme_minimal()


```

# 7.0 References

Ohira, T., Eguchi, E., Hayashi, F., Kinuta, M., & Imano, H. (2023). Epidemiology of cardiovascular disease in Japan: An overview study. *Journal of Cardiology, 81*(5), 379-387. https://doi.org/10.1016/j.jjcc.2023.07.007
