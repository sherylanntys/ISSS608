---
title: "Take-Home Exercise 2.0: Be Tradewise or Otherwise"
author: "Sheryl Ann Tan Yi-Shi"
date: "2025-03-01"
date-modified: "last-modified"
execute: 
  echo: true
  eval: true
  warning: false
  freeze: true
---

# 1.0 Introduction

## 1.1 The Task

# 2.0 Data Preparation

## 2.1 Loading the Required Libraries

```{r}
pacman::p_load(plotly, ggthemes, ggridges,
               patchwork, ggplot2, tidyverse, dplyr, lubridate, ggdist) 
```

## 2.2 Overall Exports and Imports of Services, 2020 - 2024

### 2.2.1 Data Import

The data for **Overall Exports and Imports of Services, 2020 - 2024** can be found [here](https://tablebuilder.singstat.gov.sg/table/TS/M060251). The following code chunk uses the `read_csv()` function to import the *servicestrade.csv*

```{r}
servicetrade <- read_csv("data/servicestrade.csv")
```

### 2.2.2 Understanding the Data

After loading the data was loaded, the `glimpse()` function was then used to understand its structure and the type of data it contains.

```{r, eval=FALSE, results="hide"}
glimpse(servicetrade)
```

::: {.callout-note collapse="true"}
#### Expand to See the Code Output

```{r, echo=FALSE}
glimpse(servicetrade)
```
:::

The output of the `glimpse()` function indicates that there are 84 rows and 26 columns. The first few rows appear to serve as a document header, with entries such as "Theme: Trade & Investment" and "Subject: Trade in Services (TIS)", followed by several `NA` cells. The actual data beings in subsequent rows with each column representing a specific year and each row representing various trade-related variables.

### 2.2.3 Data Wrangling

**Removing Non-Relevant Rows**

Given the structure of our dataset, particularly the presence of non-data rows at the beginning with a large number of `NA` values, we will use `na.omit()` to remove rows containing `NA` values.

```{r}
cleaned_servicetrade <- na.omit(servicetrade)
```

After removing the rows containing the `NA` entries, we used the `glimpse()` function once again to review the structure of the cleaned dataset.

```{r, eval=FALSE, results="hide"}
glimpse(cleaned_servicetrade)
```

::: {.callout-note collapse="true"}
#### Expand to See the Code Output

```{r, echo=FALSE}
glimpse(cleaned_servicetrade)
```
:::

The output shows that we have successfully excluded non-relevant rows and retained only the actual trade-related data.

**Transposing the Data**

Next, since our columns year data, we need to transpose the dataset to improve its usability for subsequent data visualisation or time-series analysis. The years will be consolidated into a single column, transforming them into row identifiers, while trade-related variables will now be represented as columns.

The code chunk uses the `t()` function for transposing and the `as.data.frame()` function to ensure that the transposed data remains in a dataframe format:

```{r}
transposed_servicetrade <- as.data.frame(t(cleaned_servicetrade))

# Set the first row as column names
colnames(transposed_servicetrade) <- as.character(transposed_servicetrade[1, ])

# Remove the first row from the data frame
transposed_servicetrade <- transposed_servicetrade[-1, ]
```

After transposing, we examined the structure of the resulting data frame using the `glimpse()` function.

```{r, eval=FALSE, results="hide"}
glimpse(transposed_servicetrade)
```

::: {.callout-note collapse="true"}
#### Expand to See the Code Output

```{r, echo=FALSE}
glimpse(transposed_servicetrade)
```
:::

From the output of `glimpse()`, the following issues were identified:

-   The column that has the dates is now labelled as "Data Series". We will rename this to "Date".

-   All data types are character strings (CHR). We will convert the "Date" column to date format and the remaining columns to numeric types for appropriate data handling.

The following code chunk renames the "Data Series" column to "Date":

```{r}
colnames(transposed_servicetrade)[1] <- "Date"
```

The following code chunk converts the data types into date and numeric formats accordingly. It also filter out entries from Jan 2015 onwards.

```{r}
# Set the locale to English for consistent date parsing
Sys.setlocale("LC_TIME", "C")

transposed_servicetrade$Date <- as.Date(paste0(as.integer(transposed_servicetrade$Date), "-01-01"), format = "%Y-%m-%d")

# Filter for dates from 2015 onwards
filtered_servicetrade <- transposed_servicetrade[transposed_servicetrade$Date >= as.Date("2015-01-01"), ]

```

Further data preparation and wrangling will be performed in the respective sections to prepare the data for the specific visualisation / analysis.

## 2.3 Total Merchandise Trade At Current Prices, 2020 - 2024

### 2.3.1 Data Import

The data for **Total Merchandise Trade At Current Prices, 2020 - 2024** can be found [here](https://tablebuilder.singstat.gov.sg/table/TS/M451001). The follow code chunk uses the `read_csv()` function to import the *merchandisetrade.csv* file into R.

```{r}
merchandisetrade <- read_csv("data/merchandisetrade.csv")
```

### 2.3.2 Understanding the Data

After loading the data was loaded, the `glimpse()` function was then used to understand its structure and the type of data it contains.

```{r, eval=FALSE, results="hide"}
glimpse(merchandisetrade)
```

::: {.callout-note collapse="true"}
#### Expand to See the Code Output

```{r, echo=FALSE}
glimpse(merchandisetrade)
```
:::

The output of the `glimpse()` function indicates that there are 105 rows and 734 columns. The first few rows appear to serve as a document header, with entries such as "Theme: Trade & Investment" and "Subject: Merchandise Trade", followed by numerous `NA` cells. The actual trade data likely begins in subsequent rows, with each column representing a specific month and year, and each row representing various trade-related variables.

### 2.3.3 Data Wrangling

**Removing Non-Relevant Rows**

Given the structure of our dataset, particularly the presence of non-data rows at the beginning with a large number of `NA` values, we will use `na.omit()` to remove rows containing `NA` values.

```{r}
cleaned_merchandisetrade <- na.omit(merchandisetrade)
```

After removing the rows containing the `NA` entries, we used the `glimpse()` function once again to review the structure of the cleaned dataset.

```{r, eval=FALSE, results="hide"}
glimpse(cleaned_merchandisetrade)
```

::: {.callout-note collapse="true"}
#### Expand to See the Code Output

```{r, echo=FALSE}
glimpse(cleaned_merchandisetrade)
```
:::

The output shows that we have successfully excluded non-relevant rows and retained only the actual trade-related data.

**Transposing the Data**

Next, since our columns represent month-year data, we need to transpose the dataset to improve its usability for subsequent data visualisation or time-series analysis. The month-year columns will be consolidated into a single column, transforming them into row identifiers, while trade-related variables will now be represented as columns.

The code chunk uses the `t()` function for transposing and the `as.data.frame()` function to ensure that the transposed data remains in a dataframe format:

```{r}
transposed_merchandisetrade <- as.data.frame(t(cleaned_merchandisetrade))

# Set the first row as column names
colnames(transposed_merchandisetrade) <- as.character(transposed_merchandisetrade[1, ])

# Remove the first row from the data frame
transposed_merchandisetrade <- transposed_merchandisetrade[-1, ]
```

After transposing, we examined the structure of the resulting data frame using the `glimpse()` function.

```{r, eval=FALSE, results="hide"}
glimpse(transposed_merchandisetrade)
```

::: {.callout-note collapse="true"}
#### Expand to See the Code Output

```{r, echo=FALSE}
glimpse(transposed_merchandisetrade)
```
:::

From the output of `glimpse()`, the following issues were identified:

-   The column that has the dates is now labelled as "Data Series". We will rename this to "Date".

-   All data types are character strings (CHR). We will convert the "Date" column to date format and the remaining columns to numeric types for appropriate data handling.

The following code chunk renames the "Data Series" column to "Date":

```{r}
colnames(transposed_merchandisetrade)[1] <- "Date"
```

The following code chunk converts the data types into date and numeric formats accordingly. It also filter out entries from Jan 2015 onwards.

```{r}
# Set the locale to English for consistent date parsing
Sys.setlocale("LC_TIME", "C")

transposed_merchandisetrade$Date <- as.Date(paste0(transposed_merchandisetrade$Date, "-01"), format="%Y %b-%d")

# Filter out entries from January 2015 onwards
filtered_merchandisetrade <- transposed_merchandisetrade[transposed_merchandisetrade$Date >= as.Date("2015-01-01"), ]
```

Further data preparation and wrangling will be performed in the respective sections to prepare the data for the specific visualisation / analysis.

# 3.0 Data Visualisation Make-over

This assignment involves selecting three data visualisations from [this page](https://www.singstat.gov.sg/modules/infographics/singapore-international-trade). Each visualisation will be critique and redesigned. The assessment will be based on the framework from [DataRemixed.com](https://dataremixed.com/2012/05/data-visualization-clarity-or-aesthetics/), which evaluates visualisations along two primary dimensions: clarity and aesthetics.

![](images/clipboard-891094182.png){fig-align="center" width="550"}

## 3.1 Overall Exports and Imports of Services, 2020 - 2024

![](images/clipboard-4104274913.png){fig-align="center" width="550"}

### 3.1.1 Critique - Quadrant IV: Confusing yet Beautiful

✅ The y-axis starts at 0, which makes it easier to gauge and assess the data's scale.

✅ Subtle gridlines were used, which is less distracting for the viewer.

❌ Using dollar bill icons to represent data in the bar chart adds visual confusion as we may interpret each icon representing a specific value.

❌ Alternating exports and imports makes it difficult to visually track the growth trends of each category independently, thus disrupting the understanding of CAGR for exports and imports as there is no continuous visual path that readers can follow easily.

❌ The CAGR figures are positioned away from the main chart and are represented in a separate element at the bottom, which may cause viewers to overlook these figures or fail to connect them with the corresponding data in the chart.

❌ The visualisation contains too much information such as yearly totals, individual exports and imports and trade balance. This might overwhelm the viewer, especially when trying to extract specific insights quickly.

❌ The visualisation lacks a lead-in paragraph that could set the context, making it difficult to immediately understand the message the visualisation.

### 3.1.2 Proposed Data Visualisation Makeover

The image below presents a general mock-up of the proposed data visualization makeover, accompanied by an explanation of the thought process behind the suggested changes.

![](images/clipboard-4108250707.png)

### 3.1.3 Revised Data Visualisation

#### **Additional Data Preparation for the Visualisation**

Since we are only looking at the overall export and import of services from 2020 to 2024, we will filter the *filtered_servicetrade* from Section 2.2.3 to only contain these information: *Date,* *Exports of Services* and *Imports Of Services*.

There is achieved via using the `select` function as shown in the code chunk below:

```{r}
filtered_servicetrade1 <- filtered_servicetrade %>%
  select(Date, `Exports Of Services`, `Imports Of Services`)
```

Since we are looking at the total merchandise trade by year, we will extract the year from the following code chunk, and filter for the period 2020 - 2024:

```{r}
filtered_servicetrade1$Year <- format(filtered_servicetrade1$Date, "%Y")

filtered_servicetrade1 <- filtered_servicetrade1[filtered_servicetrade1$Year %in% c("2020", "2021", "2022", "2023", "2024"), ]
```

We will also convert *Exports of Services* and *Imports Of Services*. into numeric format via the following code chunk:

```{r}
filtered_servicetrade1$`Exports Of Services` <- as.numeric(gsub(",", "", filtered_servicetrade1$`Exports Of Services`))
filtered_servicetrade1$`Imports Of Services` <- as.numeric(gsub(",", "", filtered_servicetrade1$`Imports Of Services`))
```

We will also create two new variables that measures the growth in service exports and imports year-on-year. This is done by summing up the exports and imports by year, and computing the % difference.

```{r}

annual_servicetrade <- filtered_servicetrade1 %>%
  group_by(Date) %>%
  summarise(
    `Total Exports of Services` = sum(`Exports Of Services`, na.rm = TRUE),
    `Total Imports of Services` = sum(`Imports Of Services`, na.rm = TRUE)
  ) %>%
  arrange(Date) %>% 
  mutate(
    `Exports Growth Rate` = ((`Total Exports of Services` / lag(`Total Exports of Services`)) - 1) * 100,
    `Imports Growth Rate` = ((`Total Imports of Services` / lag(`Total Imports of Services`)) - 1) * 100
  )

# Replace NA growth rates (first year) with 0
annual_servicetrade$`Exports Growth Rate`[is.na(annual_servicetrade$`Exports Growth Rate`)] <- 0
annual_servicetrade$`Imports Growth Rate`[is.na(annual_servicetrade$`Imports Growth Rate`)] <- 0

```

We will also convert all numeric values into billions so that it's easier for readers to interpret numeric values.

```{r}
annual_servicetrade <- annual_servicetrade %>%   mutate(
  `Total Exports of Services` = `Total Exports of Services` / 1e3,
  `Total Imports of Services` = `Total Imports of Services` / 1e3
)

annual_servicetrade <- annual_servicetrade %>%
  mutate(Year = as.integer(format(Date, "%Y")))
```

We would also need to compute the CAGR for exports and imports of services from 2020 to 2024:

```{r}
# Compute CAGR for Exports and Imports
start_year <- min(annual_servicetrade$Year, na.rm = TRUE)
end_year <- max(annual_servicetrade$Year, na.rm = TRUE)

start_exports <- annual_servicetrade$`Total Exports of Services`[annual_servicetrade$Year == start_year]
end_exports <- annual_servicetrade$`Total Exports of Services`[annual_servicetrade$Year == end_year]
CAGR_exports <- ((end_exports / start_exports)^(1 / (end_year - start_year)) - 1) * 100

start_imports <- annual_servicetrade$`Total Imports of Services`[annual_servicetrade$Year == start_year]
end_imports <- annual_servicetrade$`Total Imports of Services`[annual_servicetrade$Year == end_year]
CAGR_imports <- ((end_imports / start_imports)^(1 / (end_year - start_year)) - 1) * 100

CAGR_text <- paste0(
  "Exports CAGR (", start_year, "-", end_year, "): ", sprintf("%.1f", CAGR_exports), "%\n",
  "Imports CAGR (", start_year, "-", end_year, "): ", sprintf("%.1f", CAGR_imports), "%"
)
```

#### **Data Visualisation**

After all the data preparation has been completed, the following code chunk plots the revised data visualisation.

::: panel-tabset
#### Plot

```{r, echo=FALSE}
#| fig-width: 12
#| fig-height: 8

y_max <- max(annual_servicetrade$`Total Exports of Services`, 
             annual_servicetrade$`Total Imports of Services`, na.rm = TRUE)

plot1 <- ggplot(annual_servicetrade, aes(x = Year, y = `Total Exports of Services`)) +
  geom_bar(stat = "identity", fill = "mediumseagreen") +
  geom_text(aes(label = paste0("S$", formatC(`Total Exports of Services`, format = "f", big.mark = ",", digits = 1), "B")), 
            vjust = -0.5, color = "black", size = 4) +
  labs(title = "Overall Exports of Services, 2020-2024", x = "Year", y = "S$ Billion") +
  ylim(0, y_max * 1.1) +  
  theme_minimal()


plot2 <- ggplot(annual_servicetrade, aes(x = Year, y = `Total Imports of Services`)) +
  geom_bar(stat = "identity", fill = "steelblue") +
  geom_text(aes(label = paste0("S$", formatC(`Total Imports of Services`, format = "f", big.mark = ",", digits = 1), "B")), 
            vjust = -0.5, color = "black", size = 4) +
  labs(title = "Overall Imports of Services, 2020-2024", x = "Year", y = "S$ Billion") +
  ylim(0, y_max * 1.1) +  
  theme_minimal()


plot3 <- ggplot(annual_servicetrade, aes(x = Year)) +
  geom_line(aes(y = `Exports Growth Rate`, color = "Exports Growth Rate"), size = 1) +
  geom_point(aes(y = `Exports Growth Rate`, color = "Exports Growth Rate"), size = 2) +
  geom_line(aes(y = `Imports Growth Rate`, color = "Imports Growth Rate"), size = 1) +
  geom_point(aes(y = `Imports Growth Rate`, color = "Imports Growth Rate"), size = 2) +
  
  scale_x_continuous(breaks = seq(2020, 2025, 1), limits = c(2020, 2025)) +
  scale_color_manual(values = c("Exports Growth Rate" = "mediumseagreen", "Imports Growth Rate" = "steelblue")) +

  
  annotate("text", x = 2022.5, y = min(annual_servicetrade$`Exports Growth Rate`, na.rm = TRUE), 
           label = CAGR_text, size = 4, hjust = -1.2, fontface = "bold", 
           color = "black", vjust = -1.6, bg = "white", alpha = 0.8) +

  labs(title = "Overall Growth Rate in Exports and Imports of Services", x = "Year", y = "Growth Rate (%)", color = "Legend") +
  theme_minimal() +
  theme(legend.position = "top")


final_plot <- ((plot1 | plot2) / plot3) + 
  plot_layout(widths = c(1, 1, 0.8)) +
  plot_annotation(
    title = "Growth in exports of services surpassed imports in 2024, \nwith a Compound Annual Growth Rate (CAGR) of 15.2% vs. 12.8% for imports.",
    theme = theme(plot.title = element_text(size = 16, face = "bold", hjust = 0.5))
  )

final_plot
```

#### Code

```{r, eval=FALSE, results="hide"}
#| fig-width: 12
#| fig-height: 8

y_max <- max(annual_servicetrade$`Total Exports of Services`, 
             annual_servicetrade$`Total Imports of Services`, na.rm = TRUE)

plot1 <- ggplot(annual_servicetrade, aes(x = Year, y = `Total Exports of Services`)) +
  geom_bar(stat = "identity", fill = "mediumseagreen") +
  geom_text(aes(label = paste0("S$", formatC(`Total Exports of Services`, format = "f", big.mark = ",", digits = 1), "B")), 
            vjust = -0.5, color = "black", size = 4) +
  labs(title = "Overall Exports of Services, 2020-2024", x = "Year", y = "S$ Billion") +
  ylim(0, y_max * 1.1) +  
  theme_minimal()


plot2 <- ggplot(annual_servicetrade, aes(x = Year, y = `Total Imports of Services`)) +
  geom_bar(stat = "identity", fill = "steelblue") +
  geom_text(aes(label = paste0("S$", formatC(`Total Imports of Services`, format = "f", big.mark = ",", digits = 1), "B")), 
            vjust = -0.5, color = "black", size = 4) +
  labs(title = "Overall Imports of Services, 2020-2024", x = "Year", y = "S$ Billion") +
  ylim(0, y_max * 1.1) +  
  theme_minimal()


plot3 <- ggplot(annual_servicetrade, aes(x = Year)) +
  geom_line(aes(y = `Exports Growth Rate`, color = "Exports Growth Rate"), size = 1) +
  geom_point(aes(y = `Exports Growth Rate`, color = "Exports Growth Rate"), size = 2) +
  geom_line(aes(y = `Imports Growth Rate`, color = "Imports Growth Rate"), size = 1) +
  geom_point(aes(y = `Imports Growth Rate`, color = "Imports Growth Rate"), size = 2) +
  
  scale_x_continuous(breaks = seq(2020, 2025, 1), limits = c(2020, 2025)) +
  scale_color_manual(values = c("Exports Growth Rate" = "mediumseagreen", "Imports Growth Rate" = "steelblue")) +

  
  annotate("text", x = 2022.5, y = min(annual_servicetrade$`Exports Growth Rate`, na.rm = TRUE), 
           label = CAGR_text, size = 4, hjust = -1.2, fontface = "bold", 
           color = "black", vjust = -1.6, bg = "white", alpha = 0.8) +

  labs(title = "Overall Growth Rate in Exports and Imports of Services", x = "Year", y = "Growth Rate (%)", color = "Legend") +
  theme_minimal() +
  theme(legend.position = "top")


final_plot <- ((plot1 | plot2) / plot3) + 
  plot_layout(widths = c(1, 1, 0.8)) +
  plot_annotation(
    title = "Growth in exports of services surpassed imports in 2024, \nwith a Compound Annual Growth Rate (CAGR) of 15.2% vs. 12.8% for imports.",
    theme = theme(plot.title = element_text(size = 16, face = "bold", hjust = 0.5))
  )

final_plot
```
:::

## 3.2 Total Merchandise Trade At Current Prices, 2020 - 2024

![](images/clipboard-1781260504.png){fig-align="center" width="550"}

### 3.2.1 Critique - Quadrant IV: Confusing yet Beautiful

✅ Elements are well-aligned and spaced effectively.

✅ Bars are represented as a single shipping container instead of disjointed units like the dollar bills in Section 3.1, making it easier to interpret values.

❌ The visualisation aims to present the total merchandise trade, yet it splits the data into separate bars for exports and imports. This division makes it misleading as readers may focus on the differences between exports and imports rather than on the aggregate trade figures. It also makes it harder to quickly assess the overall trade performance year-on-year.

❌ Tick marks were omitted from the x-axis despite the value of merchandise trade being a continuous variable. This makes it difficult to interpret the scale of the data and estimate values.

❌ The years are not labeled directly on the y-axis or associated clearly with the corresponding data bars (which are in various hues of colour, adding more visual confusion). Instead, they are indicated in separate text boxes that state the total merchandise trade for each year. The disjointed presentation can confuse readers as it requires them to match the data visually across different parts of the chart.

❌ The % increase in merchandise trade in 2024 is placed separately at the bottom of the chart, detached from the visual data representation. Furthermore, the total trade values for each year are in separate text boxes and does not visually represent the percentage growth. Readers would not be able to intuitively interpret the growth rate without doing mental calculations.

### 3.2.2 Proposed Data Visualisation Makeover

The image below presents a general mock-up of the proposed data visualization makeover, accompanied by an explanation of the thought process behind the suggested changes.

![](images/clipboard-329651265.png)

### 3.2.3 Revised Data Visualisation

#### **Additional Data Preparation for the Visualisation**

Since we are only looking at ***Total Merchandise Trade, (At Current Prices)***, we will filter out the *Date* and *Total Merchandise Trade, (At Current Prices)* from *filtered_merchandise trade*. This is achieved via the following code chunk:

```{r}
filtered_totalmerchandisetrade <- filtered_merchandisetrade %>%
  select(Date, `Total Merchandise Trade, (At Current Prices)`, `Total Merchandise Exports, (At Current Prices)`, `Total Merchandise Imports, (At Current Prices)`)
```

We will also convert *Total Merchandise Trade, (At Current Prices)* into numeric format and ensure that the *Date* column is in date format via the following code chunk:

```{r}
filtered_totalmerchandisetrade$`Total Merchandise Trade, (At Current Prices)` <- as.numeric(gsub(",", "", filtered_totalmerchandisetrade$`Total Merchandise Trade, (At Current Prices)`))
filtered_totalmerchandisetrade$`Total Merchandise Exports, (At Current Prices)` <- as.numeric(gsub(",", "", filtered_totalmerchandisetrade$`Total Merchandise Exports, (At Current Prices)`))
filtered_totalmerchandisetrade$`Total Merchandise Imports, (At Current Prices)` <- as.numeric(gsub(",", "", filtered_totalmerchandisetrade$`Total Merchandise Imports, (At Current Prices)`))

filtered_totalmerchandisetrade$Date <- as.Date(filtered_totalmerchandisetrade$Date)
```

Since we are looking at the total merchandise trade by year, we will extract the year from the following code chunk, and filter for the period 2020 - 2024:

```{r}
filtered_totalmerchandisetrade$Year <- format(filtered_totalmerchandisetrade$Date, "%Y")

filtered_totalmerchandisetrade <- filtered_totalmerchandisetrade[filtered_totalmerchandisetrade$Year %in% c("2020", "2021", "2022", "2023", "2024"), ]
```

We will also create a new variable called "Growth Rate" that measures the growth in total merchandise trade year-on-year. This is done by summing up the total merchandise trade by year, and computing the % difference.

```{r}

annual_merchandisetrade <- filtered_totalmerchandisetrade %>%
  mutate(Year = format(Date, "%Y")) %>%
  group_by(Year) %>%
  summarise(
    `Total Merchandise Trade` = sum(`Total Merchandise Trade, (At Current Prices)`, na.rm = TRUE),
    `Total Merchandise Imports` = sum(`Total Merchandise Imports, (At Current Prices)`, na.rm = TRUE),
    `Total Merchandise Exports` = sum(`Total Merchandise Exports, (At Current Prices)`, na.rm = TRUE)
  )

annual_merchandisetrade <- annual_merchandisetrade %>%
  mutate(
    `Trade Growth Rate` = ( (`Total Merchandise Trade` / lag(`Total Merchandise Trade`) - 1) * 100 ),
    `Imports Growth Rate` = ( (`Total Merchandise Imports` / lag(`Total Merchandise Imports`) - 1) * 100 ),
    `Exports Growth Rate` = ( (`Total Merchandise Exports` / lag(`Total Merchandise Exports`) - 1) * 100 )
  )

annual_merchandisetrade[is.na(annual_merchandisetrade)] <- 0
```

We will also convert all the values into billions so that it's easier for readers to interpret numeric values.

```{r}

annual_merchandisetrade <- annual_merchandisetrade %>%
  mutate(
    `Total Merchandise Trade` = `Total Merchandise Trade` / 1e6,
    `Total Merchandise Imports` = `Total Merchandise Imports` / 1e6,
    `Total Merchandise Exports` = `Total Merchandise Exports` / 1e6
  )
```

#### **Data Visualisation**

After all the data preparation has been completed, the following code chunk plots the revised data visualisation.

::: panel-tabset
#### Plot

```{r, echo=FALSE}
#| fig-width: 12
#| fig-height: 8

max_trade <- max(annual_merchandisetrade$`Total Merchandise Trade`, na.rm = TRUE)
max_growth <- max(abs(annual_merchandisetrade$`Trade Growth Rate`), na.rm = TRUE) #

ggplot(annual_merchandisetrade, aes(x = Year)) +
  
  geom_bar(aes(y = `Total Merchandise Trade`, fill = "Total Merchandise Trade"), 
           stat = "identity") +
  
  geom_text(aes(y = `Total Merchandise Trade`, 
                label = paste0("S$", formatC(`Total Merchandise Trade`, format = "f", big.mark = ",", digits = 1), "B")), 
            vjust = -0.5, color = "black", size = 4.5) +
  
  geom_line(aes(y = `Trade Growth Rate` * max_trade / 40, color = "Trade Growth Rate"), 
            size = 1, group = 1) +
  geom_point(aes(y = `Trade Growth Rate` * max_trade / 40, color = "Trade Growth Rate"), 
             size = 2) +
  
  geom_text(aes(y = `Trade Growth Rate` * max_trade / 40, 
                label = sprintf("%.1f%%", `Trade Growth Rate`)), 
            vjust = -2, color = "black", size = 4.5) +

  scale_y_continuous(
    name = "Total Merchandise Trade (S$ Billion)",
    labels = function(x) paste0("S$", formatC(x, format = "f", big.mark = ",", digits = 0), "B"),
    sec.axis = sec_axis(~ . * 40 / max_trade,
                        name = "Merchandise Trade Annual Growth Rate (%)", 
                        breaks = seq(-40, 40, 10),  
                        labels = function(x) paste0(x, "%")) 
  ) +

  labs(title = "Total merchandise trade rebounded and grew by 6.6% in 2024, \n reversing the contraction in 2023.", 
       x = "Year",
       fill = "Legend", 
       color = "Legend") + 
       
  scale_fill_manual(values = c("Total Merchandise Trade" = "gold")) +
  scale_color_manual(values = c("Trade Growth Rate" = "black")) +

  theme_minimal() +
  
theme(
  plot.title = element_text(hjust = 0.5, size=20), 
  axis.title.y.left = element_text(margin = margin(r = 10)),  
  axis.title.y.right = element_text(margin = margin(l = 10)),
  legend.position = "top",
  legend.title = element_blank()
)


```

#### Code

```{r, eval=FALSE, results="hide"}
#| fig-width: 12
#| fig-height: 8


max_trade <- max(annual_merchandisetrade$`Total Merchandise Trade`, na.rm = TRUE)
max_growth <- max(abs(annual_merchandisetrade$`Trade Growth Rate`), na.rm = TRUE) #

ggplot(annual_merchandisetrade, aes(x = Year)) +
  
  geom_bar(aes(y = `Total Merchandise Trade`, fill = "Total Merchandise Trade"), 
           stat = "identity") +
  
  geom_text(aes(y = `Total Merchandise Trade`, 
                label = paste0("S$", formatC(`Total Merchandise Trade`, format = "f", big.mark = ",", digits = 1), "B")), 
            vjust = -0.5, color = "black", size = 4.5) +
  
  geom_line(aes(y = `Trade Growth Rate` * max_trade / 40, color = "Trade Growth Rate"), 
            size = 1, group = 1) +
  geom_point(aes(y = `Trade Growth Rate` * max_trade / 40, color = "Trade Growth Rate"), 
             size = 2) +
  
  geom_text(aes(y = `Trade Growth Rate` * max_trade / 40, 
                label = sprintf("%.1f%%", `Trade Growth Rate`)), 
            vjust = -2, color = "black", size = 4.5) +

  scale_y_continuous(
    name = "Total Merchandise Trade (S$ Billion)",
    labels = function(x) paste0("S$", formatC(x, format = "f", big.mark = ",", digits = 0), "B"),
    sec.axis = sec_axis(~ . * 40 / max_trade,
                        name = "Merchandise Trade Annual Growth Rate (%)", 
                        breaks = seq(-40, 40, 10),  
                        labels = function(x) paste0(x, "%")) 
  ) +

  labs(title = "Total merchandise trade rebounded and grew by 6.6% in 2024, \n reversing the contraction in 2023.", 
       x = "Year",
       fill = "Legend", 
       color = "Legend") + 
       
  scale_fill_manual(values = c("Total Merchandise Trade" = "gold")) +
  scale_color_manual(values = c("Trade Growth Rate" = "black")) +

  theme_minimal() +
  
theme(
  plot.title = element_text(hjust = 0.5, size=20), 
  axis.title.y.left = element_text(margin = margin(r = 10)),  
  axis.title.y.right = element_text(margin = margin(l = 10)),
  legend.position = "top",
  legend.title = element_blank()
)
```
:::

## 3.3 Non-Oil Domestic Exports By Major Commodity Sections, 2024

![](images/clipboard-75365197.png){fig-align="center" width="550"}

### 3.3.1 Critique - Quadrant III: Ugly and Confusing

✅ Elements are well-aligned and spaced effectively.

❌ The visualisation uses a stacked bar chart, which is typically meant for displaying proportional contributions. However, the data seems to focus on absolute values as they are displayed in a larger font size as compared to the percentages. This suggests a greater importance on actual values over relative proportions.

❌ The segments within the stacked bar chart are not arranged in descending order of value, making it challenging to quickly assess which sectors are more significant based on size.

❌ The visualisation highlights the top three commodities based on the text box at the bottom. However, presenting the data via a stacked bar chart makes it difficult for viewers to quickly identify the top 3 commodities.

❌ The labels for the respective commodities do not follow the visual order of the segments in the stacked bar chart (e.g. ***Beverages*** suddenly presented after ***Miscellaneous Manufactured Articles***), increasing cognitive load required to interpret the chart as viewers naturally expect the top-most label to correspond to the top-most segment in the chart, and so forth down the line.

### 3.3.2 Proposed Data Visualisation Makeover

The image below presents a general mock-up of the proposed data visualization makeover, accompanied by an explanation of the thought process behind the suggested changes.

![](images/clipboard-2865888173.png)

### 3.3.3 Revised Data Visualisation

#### **Additional Data Preparation**

Since we are only looking at ***Non-Oil Domestic Exports by Major Commodity Sections***, we will filter out the following columns 48 to 56 from *filtered_merchadisetrade* obtained from Section 2.3. For reference, the column numbers and their respective names are shown in the code chunk below.

::: {.callout-note collapse="true"}
#### Expand to See Column Names

```{r}
colnames(filtered_merchandisetrade)
```
:::

The following code chunk stores these filtered out columns into a new dataframe called *filtered_merchandisetrade2*:

```{r}
filtered_merchandisetrade2 <- filtered_merchandisetrade[, c(1, 48:56)]
```

Since we are only focusing on non-oil domestic exports in 2024, we will only retain 2024 records via the following code chunk:

```{r}
filtered_merchandisetrade2$Date <- as.Date(filtered_merchandisetrade2$Date)
filtered_merchandisetrade2$Year <- format(filtered_merchandisetrade2$Date, "%Y")
filtered_merchandisetrade2$Year <- as.numeric(filtered_merchandisetrade2$Year)
filtered_merchandisetrade2 <- filtered_merchandisetrade2 %>%
  filter(Year == 2024)
```

We will also aggregate the non-domestic exports for each commodity section for 2024 and convert them to billions for better readability via the following code chunk:

```{r}
filtered_merchandisetrade2[, 2:10] <- lapply(filtered_merchandisetrade2[, 2:10], function(x) as.numeric(gsub(",", "", x)))

domesticexport_2024 <- data.frame(t(colSums(filtered_merchandisetrade2[, 2:10], na.rm = TRUE)/1e6))

# Add Year column to indicate that these totals belong to 2024
domesticexport_2024$Year <- 2024
```

We will tranpose *domesticexport_2024* for easier processing:

```{r}
domesticexport_2024_long <- domesticexport_2024 %>%
  pivot_longer(cols = -Year, names_to = "Category", values_to = "Value") %>%
  mutate(Category = str_replace_all(Category, "\\.", " ")) %>%  # Replace dots with spaces
  arrange(desc(Value))

domesticexport_2024_long$Category <- str_squish(domesticexport_2024_long$Category)

replacement_names <- c(
  "Machinery Transport Equipment" = "Machinery & Transport Equipment",
  "Chemicals Chemical Products" = "Chemicals & Chemical Products",
  "Miscellaneous Manufactured Articles" = "Miscellaneous Manufactured Articles",
  "Food Live Animals" = "Food & Live Animals",
  "Miscellaneous Excluding Oil Bunkers" = "Miscellaneous (Excluding Oil Bunkers)",
  "Manufactured Goods" = "Manufactured Goods",
  "Crude Materials Excl Fuels" = "Crude Materials (Excl Fuels)",
  "Beverages Tobacco" = "Beverages & Tobacco",
  "Animal Vegetable Oils Fats Waxes" = "Animal & Vegetable Oils Fats & Waxes"
)

domesticexport_2024_long <- domesticexport_2024_long %>%
  mutate(Category = recode(Category, !!!replacement_names))

```

#### Data Visualisation

After all the data preparation has been completed, the following code chunk plots the revised data visualisation.

::: panel-tabset
#### Plot

```{r, echo=FALSE}
#| fig-width: 12
#| fig-height: 8

top_3_categories <- domesticexport_2024_long$Category[1:3]

domesticexport_2024_long <- domesticexport_2024_long %>%
  mutate(Color = ifelse(Category %in% top_3_categories, Category, "Others"))

color_palette <- c("#FFC000", "#70AD47", "#ED7D31", "#D9D9D9")


domesticexport_2024_long <- domesticexport_2024_long %>%
  mutate(Percentage = Value / sum(Value))


plot1 <- ggplot(domesticexport_2024_long, aes(x = reorder(Category, Value), y = Value, fill = Color)) +
  geom_bar(stat = "identity") +
  geom_text(aes(label = paste0("S$", formatC(Value, format = "f", big.mark = ",", digits = 1), "B")),
            hjust = -0.1, size = 4, color = "black") +  # Data Labels
  scale_fill_manual(values = setNames(color_palette, c(top_3_categories, "Others"))) +
  labs(title = "Non-Oil Domestic Exports \n by Commodity Sections (2024)", x = NULL, y = "S$ Billion") +
  coord_flip() +  
  scale_y_continuous(limits = c(0, 100)) +  
  theme_minimal() +
  theme(
    legend.position = "none",  
    plot.title = element_text(size = 12, hjust = 0.5, face = "bold")
  )

plot2 <- ggplot(domesticexport_2024_long, aes(x = "", y = Value, fill = Color)) +
  geom_bar(stat = "identity", width = 1) +
  scale_fill_manual(values = setNames(color_palette, c(top_3_categories, "Others"))) +
  coord_polar("y", start = 0) +
  labs(title = "Proportion of Non-Oil Domestic Exports\nby Commodity Sections (2024)") +
  theme_void() +
  theme(
    legend.position = "none",
    plot.title = element_text(size = 12, hjust = 0.5, face = "bold")
  ) +

  
  annotate("text", x = 1.3, y = sum(domesticexport_2024_long$Value) * 0.8, 
           label = "Machinery & Transport Equipment: \n                    40.5%", 
           size = 4, fontface = "bold", color = "black", vjust=4.5, hjust=0.1) +

  annotate("text", x = 1.3, y = sum(domesticexport_2024_long$Value) * 0.5, 
           label = "Chemicals & \n         Chemical Products:\n   25.6%", 
           size = 4, fontface = "bold", color = "black", vjust=-3, hjust=1.3) +

  annotate("text", x = 1.3, y = sum(domesticexport_2024_long$Value) * 0.2, 
           label = "Miscellaneous \nManufactured Articles:\n16.5%", 
           size = 4, fontface = "bold", color = "black", vjust=1.5, hjust=0.5)


final_plot <- (plot1 | plot2) + 
  plot_annotation(
    title = "Machinery & Transport Equipment contributed the most \n to non-oil domestic exports in 2024.",
    theme = theme(plot.title = element_text(size = 20, hjust = 0.5, face = "bold")) 
  )


print(final_plot)

```

#### Code
```{r, eval=FALSE, results="hide"}
#| fig-width: 12
#| fig-height: 8

top_3_categories <- domesticexport_2024_long$Category[1:3]

domesticexport_2024_long <- domesticexport_2024_long %>%
  mutate(Color = ifelse(Category %in% top_3_categories, Category, "Others"))

color_palette <- c("#FFC000", "#70AD47", "#ED7D31", "#D9D9D9")


domesticexport_2024_long <- domesticexport_2024_long %>%
  mutate(Percentage = Value / sum(Value))


plot1 <- ggplot(domesticexport_2024_long, aes(x = reorder(Category, Value), y = Value, fill = Color)) +
  geom_bar(stat = "identity") +
  geom_text(aes(label = paste0("S$", formatC(Value, format = "f", big.mark = ",", digits = 1), "B")),
            hjust = -0.1, size = 4, color = "black") +  # Data Labels
  scale_fill_manual(values = setNames(color_palette, c(top_3_categories, "Others"))) +
  labs(title = "Non-Oil Domestic Exports \n by Commodity Sections (2024)", x = NULL, y = "S$ Billion") +
  coord_flip() +  
  scale_y_continuous(limits = c(0, 100)) +  
  theme_minimal() +
  theme(
    legend.position = "none",  
    plot.title = element_text(size = 12, hjust = 0.5, face = "bold")
  )

plot2 <- ggplot(domesticexport_2024_long, aes(x = "", y = Value, fill = Color)) +
  geom_bar(stat = "identity", width = 1) +
  scale_fill_manual(values = setNames(color_palette, c(top_3_categories, "Others"))) +
  coord_polar("y", start = 0) +
  labs(title = "Proportion of Non-Oil Domestic Exports\nby Commodity Sections (2024)") +
  theme_void() +
  theme(
    legend.position = "none",
    plot.title = element_text(size = 12, hjust = 0.5, face = "bold")
  ) +

  
  annotate("text", x = 1.3, y = sum(domesticexport_2024_long$Value) * 0.8, 
           label = "Machinery & Transport Equipment: \n                    40.5%", 
           size = 4, fontface = "bold", color = "black", vjust=4.5, hjust=0.1) +

  annotate("text", x = 1.3, y = sum(domesticexport_2024_long$Value) * 0.5, 
           label = "Chemicals & \n         Chemical Products:\n   25.6%", 
           size = 4, fontface = "bold", color = "black", vjust=-3, hjust=1.3) +

  annotate("text", x = 1.3, y = sum(domesticexport_2024_long$Value) * 0.2, 
           label = "Miscellaneous \nManufactured Articles:\n16.5%", 
           size = 4, fontface = "bold", color = "black", vjust=1.5, hjust=0.5)


final_plot <- (plot1 | plot2) + 
  plot_annotation(
    title = "Machinery & Transport Equipment contributed the most \n to non-oil domestic exports in 2024.",
    theme = theme(plot.title = element_text(size = 20, hjust = 0.5, face = "bold")) 
  )


print(final_plot)
```
:::


# 6.0 References

Kam, T. S. (2023). *R for Visual Analytics*. Retrieved from <https://r4va.netlify.app>

<https://dataremixed.com/2012/05/clarity-or-aesthetics-part-2-a-tale-of-four-quadrants/>
