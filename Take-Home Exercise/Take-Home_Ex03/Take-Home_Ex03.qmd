---
title: "Take-Home Exercise 3.0: Prototyping Modules for Visual Analytics Shiny Application"
author: "Sheryl Ann Tan Yi-Shi"
date: "2025-03-28"
date-modified: "last-modified"
execute: 
  echo: true
  eval: true
  warning: false
  freeze: true
---

# 1.0 Introduction

# 2.0 Data Preparation

## 2.1 Loading Packages

```{r}
pacman::p_load(readxl, dplyr, readr, lubridate, sf, 
               tmap, tidyverse, DT, zoo, plotly, sunburstR, magrittr)
```

## 2.2 Data Scraping

The dataset was sourced from the Meteorological Service Singaproe (MSS) website[^1], which provides extensive historical daily records of rainfall, temperature and wind speed. Covering a period from 1980 to 2025, the data is segmented by month, and by each of the 64 weather stations across Singapore. For this project, we focused on the period from 2020 to 2024. We also noted that only 44 out of the 64 stations had downloadable records.

[^1]: **Meteorological Service Singapore.** (n.d.). *Historical daily records*. Meteorological Service Singapore. <https://www.weather.gov.sg/climate-historical-daily/>[↩︎](https://isss608-weatherpulse.netlify.app/project%20proposal/project_proposal#fnref8)

The code block below initializes the data scraping process by reading a list of station codes from a CSV file and setting up a loop to download data for the specified years and months.

```{r}
stations_df <- read_csv("data/StationList.csv")  
station_codes <- stations_df$StationID  
```

The main scraping loop, designed to fetch and preprocess the data, is detailed in the code block below:

::: callout-important
The data from January 2020 to March 2020 are encoded in `latin1`, while the data starting from April 2020 are encoded in `UTF-8`. Therefore, it is essential for the main scraping loop to be robust enough to accommodate both encodings effectively.
:::

::: {.callout-note collapse="true"}
#### Expand to See the Code Block

```{r, eval=FALSE, results='hide'}
years <- 2020:2024
months <- sprintf("%02d", 1:12)

base_url <- "https://www.weather.gov.sg/files/dailydata/DAILYDATA_%s_%d%s.csv"

all_data <- list()
i <- 1

for (station in station_codes) {
  for (year in years) {
    for (month in months) {
      url <- sprintf(base_url, station, year, month)
      cat("Downloading:", url, "\n")
      
      # Attempt to read with latin1, if it fails, try UTF-8
      res <- try({
        read_csv(url, locale = locale(encoding = "latin1"), show_col_types = FALSE)
      }, silent = TRUE)
      
      if (inherits(res, "try-error")) {
        res <- try({
          read_csv(url, locale = locale(encoding = "UTF-8"), show_col_types = FALSE)
        }, silent = TRUE)
      }

      # If both fail, continue to the next file
      if (inherits(res, "try-error")) {
        cat("Failed to read:", url, "\n")
        next
      }

      res <- res %>%
        mutate(across(
          contains(c("Temperature", "Rainfall", "Wind")),
          ~ suppressWarnings(as.numeric(.))
        )) %>%
        mutate(
          station = as.character(station),
          year = as.integer(year),
          month = as.integer(month),
          Day = as.integer(Day)
        )
      
      all_data[[i]] <- res
      i <- i + 1
    }
  }
}
```
:::

Once the monthly data for each station had been downloaded, the data was subsequently consolidated into a single DataFrame:

::: {.callout-note collapse="true"}
#### Expand to See the Code Block

```{r, eval=FALSE, results="hide"}
climate_data <- bind_rows(all_data)

climate_data <- climate_data %>%
  mutate(
    date = make_date(year, month, Day)
  )
```
:::

```{r, echo=FALSE}
climate_data1 <- read_csv("data/climate_data1.csv")
```

After the data has been consolidated, the glimpse() function was used to gain a quick understanding of the data structure.

```{r}
glimpse(climate_data1)
```

To facilitate the development of the R Shiny application, the weather data was split into three separate datasets — rainfall, temperature, and wind speed. Each dataset contains only the relevant variables for the respective weather parameter, alongside essential metadata such as station name, date, and time components.

By isolating each weather component, users can independently explore trends, seasonality, and anomalies for rainfall, temperature, and wind speed. Additionally, this approach simplifies backend logic, improves processing efficiency, and avoids unnecessary overhead from unrelated columns during visualisation and analysis.

::: {.callout-note collapse="true"}
#### Expand to See Code Block

```{r}
climate_rainfall <- climate_data1 %>%
  select(Station, Year, Month, Day, date, station, year, month,
         contains("Rainfall"))

climate_temperature <- climate_data1 %>%
  select(Station, Year, Month, Day, date, station, year, month,
         contains("Temperature"))

climate_windspeed <- climate_data1 %>%
  select(Station, Year, Month, Day, date, station, year, month,
         contains("Wind"))
```
:::

## 2.3 Understanding the Data

### 2.3.1 Checking for Missing Values

It is crucial to identify the extent of missing data, which significantly impacts the subsequent analysis phases. The following code calculates the percentage of missing values for each of the weather variable dataset.

#### 2.3.1.1 Missing Values for the Rainfall Dataset

::: {.callout-note collapse="true"}
#### Expand to See the Code Block

```{r, result="hide"}

rainfall_missing_by_station <- climate_rainfall %>%
  group_by(station) %>%
  summarise(across(
    contains("Rainfall"),
    ~mean(is.na(.)) * 100,
    .names = "missing_{.col}"
  )) %>%
  arrange(across(starts_with("missing"), desc))
```
:::

```{r, echo=FALSE}
datatable(rainfall_missing_by_station, options = list(pageLength = 10))
```

Based on the results of the missing values analysis for the rainfall dataset, all stations contain some degree of missing data. However, a few stations exhibit a significantly higher proportion of missing data, such as Station S29 - Pasir Ris (West), which has more than 10% missing rainfall data primarily concentrated in the year 2021.

To resolve this issue, stations with more than 5% missing data will be excluded from the analysis as a high proportion of missing values may lead to biased trends or seasonality patterns, skewed aggregate statistics or unreliable forecasts. In this case, we will exclude S29, S92, S64, S06 from the rainfall dataset as shown in the code below:

```{r}
climate_rainfall_filtered <- climate_rainfall %>%
  filter(!station %in% c("S29", "S92", "S64", "S06"))
```

For stations with \<5% missing data, we employ **linear interpolation** to estimate the missing values. This method assumes a linear relationship (straight line) between two known data points and calculates the missing values accordingly[^2]. This method is effective for datasets where changes between consecutive data points are expected to be gradual / linear (i.e. weather parameters).

[^2]: **Gore, R. (2023, January).** Weather parameter analysis using interpolation methods. *Artificial Intelligence and Applications, 1*(4). https://doi.org/10.47852/bonviewAIA3202443

The following code chunk implements linear interpolation in R using the `na.approx()` function from the zoo\` package:

```{r}
climate_rainfall_interpolated <- climate_rainfall_filtered %>%
  arrange(station, date) %>%
  group_by(station) %>%
  mutate(
    `Daily Rainfall Total (mm)`     = na.approx(`Daily Rainfall Total (mm)`, x = date, na.rm = FALSE),
    `Highest 30 Min Rainfall (mm)`  = na.approx(`Highest 30 Min Rainfall (mm)`, x = date, na.rm = FALSE),
    `Highest 60 Min Rainfall (mm)`  = na.approx(`Highest 60 Min Rainfall (mm)`, x = date, na.rm = FALSE),
    `Highest 120 Min Rainfall (mm)` = na.approx(`Highest 120 Min Rainfall (mm)`, x = date, na.rm = FALSE)
  ) %>%
  ungroup()
```

#### 2.3.1.2 Missing Values for the Temperature Dataset

::: {.callout-note collapse="true"}
#### Expand to See the Code Block

```{r, result="hide"}
temperature_missing_by_station <- climate_temperature %>%
  group_by(station) %>%
  summarise(across(
    contains("Temperature"),
    ~mean(is.na(.)) * 100,
    .names = "missing_{.col}"
  )) %>%
  arrange(across(starts_with("missing"), desc))
```
:::

```{r, echo=FALSE}
datatable(temperature_missing_by_station, options = list(pageLength = 10))
```

Based on the results of the missing values analysis for the temperature dataset, several stations exhibited 100% missing data for temperature measurements, suggesting that these stations may lack the necessary equipment to record temperature.

In line with the approach taken for the rainfall dataset, stations with more than 5% missing data will be excluded from the analysis. The following stations will be removed from the temperature dataset: S07, S08, S112, S113, S114, S119, S123, S29, S33, S35, S40, S64, S66, S69, S71, S77, S78, S79, S81, S84, S88, S89, S90, S92, S94, S108, S23, S80, S25 and S06.

```{r}
climate_temperature_filtered <- climate_temperature %>%
  filter(!station %in% c("S07", "S08", "S112", "S113", "S114", "S119", "S123", 
                         "S29", "S33", "S35", "S40", "S64", "S66", "S69", "S71", 
                         "S77", "S78", "S79", "S81", "S84", "S88", "S89", "S90", 
                         "S92", "S94", "S108", "S23", "S80", "S25", "S06"))
```

Similar to the rainfall dataset, for stations with \<5% missing data, we employ **linear interpolation** to estimate the missing values.

```{r}
climate_temperature_interpolated <- climate_temperature_filtered %>%
  arrange(station, date) %>%
  group_by(station) %>%
  mutate(
    `Mean Temperature (°C)`     = na.approx(`Mean Temperature (°C)`, x = date, na.rm = FALSE),
    `Maximum Temperature (°C)`  = na.approx(`Maximum Temperature (°C)`, x = date, na.rm = FALSE),
    `Minimum Temperature (°C)`  = na.approx(`Minimum Temperature (°C)`, x = date, na.rm = FALSE)
  ) %>%
  ungroup()
```

#### 2.3.1.3 Missing Values for the Wind Speed Dataset

::: {.callout-note collapse="true"}
#### Expand to See the Code Block

```{r, result="hide"}
windspeed_missing_by_station <- climate_windspeed %>%
  group_by(station) %>%
  summarise(across(
    contains("Wind"),
    ~mean(is.na(.)) * 100,
    .names = "missing_{.col}"
  )) %>%
  arrange(across(starts_with("missing"), desc))
```
:::

```{r, echo=FALSE}
datatable(windspeed_missing_by_station, options = list(pageLength = 10))
```

Like the temperature dataset, several stations exhibited 100% missing data for wind speed measurements. In line with the approach taken for the rainfall and temperature datasets, stations with more than 5% missing data will be excluded from the analysis. The following stations will be removed from the temperature dataset: S07, S08, S112, S113, S114, S119, S123, S29, S33, S35, S40, S64, S66, S69, S71, S77, S78, S79, S81, S84, S88, S89, S90, S92, S94, S80, S23, S60, S44, S50, S43 and S117.

```{r}
climate_windspeed_filtered <- climate_windspeed %>%
  filter(!station %in% c("S07", "S08", "S112", "S113", "S114", "S119", "S123", 
                         "S29", "S33", "S35", "S40", "S64", "S66", "S69", "S71", 
                         "S77", "S78", "S79", "S81", "S84", "S88", "S89", "S90", 
                         "S92", "S94", "S80", "S23", "S60", "S44", "S50", "S43", 
                         "S117"))
```

Similar to the rainfall dataset, for stations with \<5% missing data, we employ **linear interpolation** to estimate the missing values.

```{r}
climate_windspeed_interpolated <- climate_windspeed_filtered %>%
  arrange(station, date) %>%
  group_by(station) %>%
  mutate(
    `Mean Wind Speed (km/h)`     = na.approx(`Mean Wind Speed (km/h)`, x = date, na.rm = FALSE),
    `Max Wind Speed (km/h)`  = na.approx(`Max Wind Speed (km/h)`, x = date, na.rm = FALSE)
  ) %>%
  ungroup()
```

### 2.3.2 Ensuring Date Completeness

To verify date completeness, we checked that each weather station contains records spanning across 1 January 2020 to 31 December 2024. This step ensures that there are no structural gaps in the time data for any station. The following were computed for each station in the respective data sets:

-   `min_date`: The earliest date available in the dataset

-   `max_date`: The latest date available.

-   `total_days`: The number of daily records

**Key Findings**:

-   All stations have consistent start and end dates, with `min_date = 2020-01-01` and `max_date = 2024-12-31`.

<!-- -->

-   The `total_days` column confirms that **each station has a complete set of daily records (1,827 days)**, corresponding to 5 full years (including 2020 as a leap year).

<!-- -->

-   This indicates a **uniform and complete time series** across all stations and parameters.

The follow sub-sections show the code chunks and corresponding results of the date completeness check for each dataset.

#### 2.3.2.1 Rainfall Dataset

```{r, eval=FALSE}
climate_rainfall_interpolated %>%
  group_by(station) %>%
  summarise(min_date = min(date), max_date = max(date), total_days = n())
```

```{r, echo=FALSE}
datatable(climate_rainfall_interpolated %>%
  group_by(station) %>%
  summarise(min_date = min(date), max_date = max(date), total_days = n()), options = list(pageLength = 10))
```

#### 2.3.2.2 Temperature Dataset

```{r, eval=FALSE}
climate_temperature_interpolated %>%
  group_by(station) %>%
  summarise(min_date = min(date), max_date = max(date), total_days = n())
```

```{r, echo=FALSE}
datatable(climate_temperature_interpolated %>%
  group_by(station) %>%
  summarise(min_date = min(date), max_date = max(date), total_days = n()), options = list(pageLength = 10))
```

#### 2.3.2.3 Wind Speed Dataset

```{r, eval=FALSE}
climate_windspeed_interpolated %>%
  group_by(station) %>%
  summarise(min_date = min(date), max_date = max(date), total_days = n())
```

```{r, echo=FALSE}
datatable(climate_windspeed_interpolated %>%
  group_by(station) %>%
  summarise(min_date = min(date), max_date = max(date), total_days = n()), options = list(pageLength = 10))
```

# 3.0 Exploratory Data Analysis

## 3.1 Calendar Heatmap

A calendar heatmap would be used to **visualise daily weather records** across different stations and years. Each day is represented as a cell in the heatmap, with colour intensity varying according to value of weather data (such as temperature or rainfall) for that day. The calendar heatmap enables quick identification of trends and / or anomalies over the course of the year.

**Key Considerations for Implementation**

-   **Parameter Selection**: Users should be able to select the following parameters: type of weather data (rainfall, temperature, wind speed), metrics (e.g. mean temperature, max temperature), station, year.

-   **Tooltips**: A tooltip that display detailed data values when a user hovers a over specific day's cell would be implmented. This provide instant access to precise data values, eliminating the ambiguity that may arise from solely interpreting color intensities.

**General Implementation Method**

We created a function called `create_calendar_heatmap`, that takes in four parameters: the dataset, the selected weather station, the year of interest and the variable of interest (e.g. mean temperature, max wind speed, etc.). The heatmap colour would update depending on the dataset used.

**Parameters**

| **Parameter**      | UI For Parameter Selection |
|--------------------|----------------------------|
| `data`             | Dropdown List              |
| `var_type`         | Dropdown List              |
| `selected_station` | Dropdown List              |
| `selected_year`    | Dropdown List              |

::: {.callout-note collapse="true"}
#### Expand to See the Code Block on Function Implementation

```{r}

create_calendar_heatmap <- function(data, selected_station, selected_year, dataset_type, var_type) {
  
  var_mapping <- list(
    "rainfall" = list(
      "Daily Rainfall Total" = "Daily Rainfall Total (mm)",
      "Highest 30 Min Rainfall" = "Highest 30 Min Rainfall (mm)",
      "Highest 60 Min Rainfall" = "Highest 60 Min Rainfall (mm)",
      "Highest 120 Min Rainfall" = "Highest 120 Min Rainfall (mm)"
    ),
    "temperature" = list(
      "Mean Temperature" = "Mean Temperature (°C)",
      "Maximum Temperature" = "Maximum Temperature (°C)",
      "Minimum Temperature" = "Minimum Temperature (°C)"
    ),
    "windspeed" = list(
      "Mean Wind Speed" = "Mean Wind Speed (km/h)",
      "Max Wind Speed" = "Max Wind Speed (km/h)"
    )
  )
  
  units <- list(
    "rainfall" = "mm",
    "temperature" = "°C",
    "windspeed" = "km/h"
  )

  color_schemes <- list(
    "rainfall" = "Blues",
    "temperature" = "Reds",
    "windspeed" = "Greens"
  )
  
  selected_var <- var_mapping[[dataset_type]][[var_type]]
  selected_unit <- units[[dataset_type]]
  selected_colorscale <- color_schemes[[dataset_type]]
  
  reverse_scale <- ifelse(dataset_type == "temperature", FALSE, TRUE)
  
  first_day <- as.Date(sprintf("%d-01-01", selected_year))
  last_date <- as.Date(sprintf("%d-12-31", selected_year))
  
  plot_data <- data %>%
    filter(Station == selected_station,
           date >= first_day,
           date <= last_date) %>%
    mutate(
      weekday = wday(date, label = TRUE, abbr = TRUE, week_start = 1),
      week_num = floor((yday(date) + wday(first_day, week_start = 1) - 1) / 7),
      month_label = factor(month(date, label = TRUE, abbr = TRUE))
    ) %>%
    mutate(
      weekday = factor(weekday, 
                      levels = c("Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"))
    )
  
  week_to_month <- plot_data %>%
    group_by(week_num) %>%
    summarise(month_label = first(month_label))
  
  p <- plot_ly(
    data = plot_data,
    x = ~week_num,
    y = ~weekday,
    z = as.formula(paste0("~`", selected_var, "`")),
    type = "heatmap",
    colorscale = selected_colorscale,
    reversescale = reverse_scale,
    text = ~paste(
      "Date:", date,
      "<br>Day:", weekday,
      "<br>Month:", month_label,
      "<br>", var_type, ":", round(get(selected_var), 1), selected_unit
    ),
    hoverinfo = "text",
    hoverongaps = FALSE
  ) %>%
    layout(
      title = paste(var_type, "Calendar Heatmap -", selected_station, "(",selected_year,")"),
      xaxis = list(
        title = "Month",
        ticktext = as.character(unique(plot_data$month_label)),
        tickvals = sapply(unique(plot_data$month_label), 
                         function(m) median(plot_data$week_num[plot_data$month_label == m]))  
      ),
      yaxis = list(
        title = "Day of Week",
        categoryarray = c("Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"),
        categoryorder = "array",
        autorange = "reversed"
      ),
      margin = list(
        l = 50,
        r = 50,
        b = 50,
        t = 50
      )
    ) %>%
    colorbar(
      title = paste(var_type, "(",selected_unit,")"),
      orientation = "h",
      len = 0.8,
      y = -0.4,
      thickness = 15
    )
  
  return(p)
}
```
:::

**Example Usage**

::: panel-tabset
#### Max Wind Speed \@ Changi (2020)

```{r, echo=FALSE}
wind_max <- create_calendar_heatmap(
  data = climate_windspeed_interpolated,
  selected_station = "Changi", 
  selected_year = 2020,
  dataset_type = "windspeed",
  var_type = "Max Wind Speed"
)

wind_max
```

#### Daily Rainfall \@ Admiralty (2022)

```{r, echo=FALSE}
rain_plot <- create_calendar_heatmap(
  data = climate_rainfall_interpolated,
  selected_station = "Admiralty", 
  selected_year = 2022,
  dataset_type = "rainfall",
  var_type = "Daily Rainfall Total")

rain_plot
```

#### Mean Temperature \@ Clementi (2024)

```{r, echo=FALSE}
temp_plot <- create_calendar_heatmap(
  data = climate_temperature_interpolated,
  selected_station = "Clementi", 
  selected_year = 2024,
  dataset_type = "temperature",
  var_type = "Mean Temperature"
)

temp_plot
```
:::

## 3.2 Sunburst Diagram

While the calendar heatmap helps to display daily weather records within the context of a single year, we would also need to **visualise weather patterns over multiple years** in order to capture longer-term cyclical trends. To achieve this, we intend to employ **sunburst diagrams**. The sunburst diagram would be structured as follows:

-   **Yearly Segmentation**: Each concentric ring in the diagram represents a single calendar year. For instance, the innermost ring might represent the year 2020, with subsequent outer rings representing 2021, 2022, 2023, and up to 2024.

-   **Monthly Segmentation**: Within each annual ring, the circle is further divided into 12 equal segments, each representing a month from January to December.

-   **Colour Intensity**: The color intensity of each monthly segment varies according to specific weather data values, such as average temperature, total rainfall, or other relevant metrics.

-   **Tooltips**: A tooltip that display detailed data values when a user hovers a over specific day's cell would be implemented. This provide instant access to precise data values, eliminating the ambiguity that may arise from solely interpreting color intensities.

**Key Considerations for Implementation**

-   **Data Aggregation**: Given the daily granularity of our data sets, we would need to aggregate these information into monthly metrics to align with our visualisation structure. However, the aggregation must be tailored to the nature of each metric. For example, for Maximum Temperature, we should find the highest temperature recorded in the month, whereas for Mean Temperature, we should find the average temperature for the month.

**General Implementation Method**

We created a `create_sunburst` function that generates a sunburst diagram visualisation using `plotly`. Users can select the following parameters, and the sunburst diagram would update accordingly:

-   `data`: The dataset containing the weather records

-   `selected_station`: The weather station from which the data is drawn.

-   `var_type`: The weather metric within the chosen dataset category

-   `year_range`: Defines the range of years over which the data should be visualised.

| **Parameter**      | UI For Parameter Selection |
|--------------------|----------------------------|
| `data`             | Dropdown List              |
| `var_type`         | Dropdown List              |
| `selected_station` | Dropdown List              |
| `year_range`       | Checkbox                   |

::: {.callout-note collapse="true"}
#### Expand to See the Code Block on Function Implementation

```{r}
create_sunburst <- function(data, selected_station, dataset_type, var_type, year_range) {
  # Define variable mapping for each dataset
  var_mapping <- list(
    "rainfall" = list(
      "Total Rainfall" = "Daily Rainfall Total (mm)",
      "Highest 30 Min Rainfall" = "Highest 30 Min Rainfall (mm)",
      "Highest 60 Min Rainfall" = "Highest 60 Min Rainfall (mm)",
      "Highest 120 Min Rainfall" = "Highest 120 Min Rainfall (mm)"
    ),
    "temperature" = list(
      "Mean Temperature" = "Mean Temperature (°C)",
      "Maximum Temperature" = "Maximum Temperature (°C)",
      "Minimum Temperature" = "Minimum Temperature (°C)"
    ),
    "windspeed" = list(
      "Mean Wind Speed" = "Mean Wind Speed (km/h)",
      "Max Wind Speed" = "Max Wind Speed (km/h)"
    )
  )
  
  # Define aggregation functions for each variable
  agg_functions <- list(
    "rainfall" = list(
      "Total Rainfall" = "sum",
      "Highest 30 Min Rainfall" = "max",
      "Highest 60 Min Rainfall" = "min",
      "Highest 120 Min Rainfall" = "min"
    ),
    "temperature" = list(
      "Mean Temperature" = "mean",
      "Maximum Temperature" = "max",
      "Minimum Temperature" = "min"
    ),
    "windspeed" = list(
      "Mean Wind Speed" = "mean",
      "Max Wind Speed" = "max"
    )
  )
  
  # Get the unit based on dataset type
  units <- list(
    "rainfall" = "mm",
    "temperature" = "°C",
    "windspeed" = "km/h"
  )
  
  # Define color schemes for each dataset type
  color_schemes <- list(
    "rainfall" = "Blues",
    "temperature" = "OrRd",
    "windspeed" = "Greens"
  )
  
  selected_var <- var_mapping[[dataset_type]][[var_type]]
  selected_unit <- units[[dataset_type]]
  selected_colorscale <- color_schemes[[dataset_type]]
  selected_agg <- agg_functions[[dataset_type]][[var_type]]
  
  # Set reverse_scale based on dataset type
  reverse_scale <- ifelse(dataset_type == "temperature", FALSE, TRUE)
  
  # Prepare monthly averages with appropriate aggregation function
  plot_data <- data %>%
    filter(Station == selected_station,
           Year >= year_range[1],
           Year <= year_range[2]) %>%
    group_by(Year, Month) %>%
    summarise(
      Value = case_when(
        selected_agg == "mean" ~ mean(get(selected_var), na.rm = TRUE),
        selected_agg == "max" ~ max(get(selected_var), na.rm = TRUE),
        selected_agg == "min" ~ min(get(selected_var), na.rm = TRUE),
        selected_agg == "sum" ~ sum(get(selected_var), na.rm = TRUE)
      ),
      .groups = 'drop'
    )
  
  # Create the plot
  p <- plot_ly()
  
  # Create segments for each year
  years <- year_range[1]:year_range[2]
  months <- 1:12
  angles <- seq(0, 330, by = 30)  # 12 angles for months
  
  for(i in seq_along(years)) {
    year <- years[i]
    radius <- i
    
    year_data <- plot_data %>% filter(Year == year)
    
    # Get values for this year
    vals <- sapply(months, function(m) {
      val <- year_data$Value[year_data$Month == m]
      if(length(val) == 0) return(0)
      return(val)
    })
    
    p <- p %>% add_trace(
      type = "barpolar",
      r = rep(1, 12),
      theta = angles,
      base = radius - 0.45,
      width = 29,
      marker = list(
        color = vals,
        colorscale = selected_colorscale,
        reversescale = reverse_scale,
        showscale = (i == 1),
        colorbar = list(
          title = paste(var_type, "(", selected_unit, ")"),
          len = 0.5,         # Make colorbar shorter
          thickness = 10,    # Make colorbar thinner
          x = 0.95,         # Position to the right
          y = 0.5,          # Center vertically
          tickfont = list(size = 10),  # Smaller tick labels
          titlefont = list(size = 10)  # Smaller title
        ),
        line = list(
          color = 'white',
          width = 2
        )
      ),
      name = as.character(year),
      text = paste0(
        "Year: ", year, "<br>",
        "Month: ", month.abb, "<br>",
        var_type, ": ", round(vals, 1), " ", selected_unit
      ),
      hoverinfo = "text"
    )
  }
  
  # Update layout
  p <- p %>% layout(
    polar = list(
      radialaxis = list(
        visible = FALSE,
        range = c(0, length(years) + 1),
        showline = FALSE,
        showgrid = FALSE
      ),
      angularaxis = list(
        ticktext = month.abb,
        tickvals = angles,
        direction = "clockwise",
        showline = FALSE,
        showgrid = FALSE
      ),
      bgcolor = "white"
    ),
    title = list(
      text = paste(var_type, "Patterns -", selected_station, 
                  "(", year_range[1], "-", year_range[2], ")"),
      y = 0.95,
      pad = list(b = 20)
    ),
    margin = list(
      t = 100
    ),
    showlegend = FALSE,
    paper_bgcolor = "white",
    plot_bgcolor = "white"
  )
  
  return(p)
}

```
:::

**Example Usage**

::: panel-tabset
#### Mean Temperature \@ Pasir Panjang (2020-2023)

```{r, echo=FALSE}
#| fig-width: 12
#| fig-height: 8

temp_cplot <- create_sunburst(
  data = climate_temperature_interpolated,
  selected_station = "Pasir Panjang",
  dataset_type = "temperature",
  var_type = "Mean Temperature",
  year_range = c(2020, 2023)
)

temp_cplot
```

#### Total Rainfall \@ Tai Seng (2021-2022)

```{r, echo=FALSE}
#| fig-width: 12
#| fig-height: 8

rain_cplot <- create_sunburst(
  data = climate_rainfall_interpolated,
  selected_station = "Tai Seng",
  dataset_type = "rainfall",
  var_type = "Total Rainfall",
  year_range = c(2021, 2022)
)

rain_cplot

```

#### Max Wind Speed \@ Seletar (2021-2024)

```{r, echo=FALSE}
#| fig-width: 12
#| fig-height: 8

wind_cplot <- create_sunburst(
  data = climate_windspeed_interpolated,
  selected_station = "Seletar",
  dataset_type = "windspeed",
  var_type = "Max Wind Speed",
  year_range = c(2021, 2024)
)

wind_cplot
```
:::

## 3.3 Line Chart

Line charts may be used to visualise time-series data across multiple weather stations. This visualisation facilitates the comparison of weather trends / patterns over a continuous period.

**General Implementation method**

We developed a function named `create_line_chart`, using `plotly`. The function accepts several parameters such as:

-   `data`: The dataset containing the weather records

-   `selected_station`: The weather station from which the data is drawn.

-   `var_type`: The metric within the chosen dataset category

-   `date_range`: Defines the range of dateover which the data should be visualised.

| **Parameter**      | UI For Parameter Selection              |
|--------------------|-----------------------------------------|
| `data`             | Dropdown List                           |
| `selected_station` | Checkbox                                |
| `var_type`         | Dropdown List                           |
| `date_range`       | Input boxes for start date and end date |

::: {.callout-note collapse="true"}
#### Expand to See the Code Block on Function Implementation

```{r}
create_line_chart <- function(data, selected_stations, dataset_type, var_type, date_range) {

  var_mapping <- list(
    "rainfall" = list(
      "Total Rainfall" = "Daily Rainfall Total (mm)",
      "Highest 30 Min Rainfall" = "Highest 30 Min Rainfall (mm)",
      "Highest 60 Min Rainfall" = "Highest 60 Min Rainfall (mm)",
      "Highest 120 Min Rainfall" = "Highest 120 Min Rainfall (mm)"
    ),
    "temperature" = list(
      "Mean Temperature" = "Mean Temperature (°C)",
      "Maximum Temperature" = "Maximum Temperature (°C)",
      "Minimum Temperature" = "Minimum Temperature (°C)"
    ),
    "windspeed" = list(
      "Mean Wind Speed" = "Mean Wind Speed (km/h)",
      "Max Wind Speed" = "Max Wind Speed (km/h)"
    )
  )
  
  agg_functions <- list(
    "rainfall" = list(
      "Total Rainfall" = "sum",
      "Highest 30 Min Rainfall" = "max",
      "Highest 60 Min Rainfall" = "min",
      "Highest 120 Min Rainfall" = "min"
    ),
    "temperature" = list(
      "Mean Temperature" = "mean",
      "Maximum Temperature" = "max",
      "Minimum Temperature" = "min"
    ),
    "windspeed" = list(
      "Mean Wind Speed" = "mean",
      "Max Wind Speed" = "max"
    )
  )
  
  units <- list(
    "rainfall" = "mm",
    "temperature" = "°C",
    "windspeed" = "km/h"
  )
  
  selected_var <- var_mapping[[dataset_type]][[var_type]]
  selected_unit <- units[[dataset_type]]
  selected_agg <- agg_functions[[dataset_type]][[var_type]]
  
  plot_data <- data %>%
    filter(Station %in% selected_stations,
           date >= as.Date(date_range[1]),
           date <= as.Date(date_range[2])) %>%
    group_by(Station, Year = year(date), Month = month(date)) %>%
    summarise(
      Value = case_when(
        selected_agg == "mean" ~ mean(get(selected_var), na.rm = TRUE),
        selected_agg == "max" ~ max(get(selected_var), na.rm = TRUE),
        selected_agg == "min" ~ min(get(selected_var), na.rm = TRUE),
        selected_agg == "sum" ~ sum(get(selected_var), na.rm = TRUE)
      ),
      .groups = 'drop'
    ) %>%
    mutate(Date = as.Date(paste(Year, Month, "01", sep = "-"))) %>%
    arrange(Station, Date)
  
  colors <- RColorBrewer::brewer.pal(12, "Dark2")[1:length(selected_stations)]
  
  if(length(selected_stations) > 12) {
    colors <- rep(colors, ceiling(length(selected_stations)/12))[1:length(selected_stations)]
  }
  
  p <- plot_ly() %>%
    layout(
      xaxis = list(
        title = "",
        tickformat = "%b %Y",
        tickangle = 45,
        range = c(as.Date(date_range[1]), as.Date(date_range[2]))
      ),
      yaxis = list(
        title = paste(var_type, "(", selected_unit, ")")
      ),
      title = list(
        text = paste(var_type, "Trends by Station"),
        y = 0.95
      ),
      hovermode = "x unified",
      showlegend = TRUE,
      legend = list(
        title = list(
          text = "Stations"
        ),
        x = 1.02,
        y = 1,
        xanchor = "left",
        font = list(
          size = 10
        ),
        itemsizing = "constant"
      ),
      margin = list(
        l = 50,
        r = 150,
        t = 50,
        b = 100
      )
    )
  
  for(i in seq_along(selected_stations)) {
    station_data <- plot_data %>% filter(Station == selected_stations[i])
    
    p <- p %>% add_trace(
      data = station_data,
      x = ~Date,
      y = ~Value,
      type = 'scatter',
      mode = 'lines',
      line = list(
        color = colors[i],
        width = 2
      ),
      hovertemplate = paste(
        "Station: %{fullData.name}<br>",
        "Month: %{x|%b %Y}<br>",
        paste(var_type, ": %{y:.1f}", selected_unit),
        "<extra></extra>"
      ),
      name = selected_stations[i]
    )
  }
  
  return(p)
}
```
:::

**Example Usage**

#### Mean Temperature \@ Admiralty, Changi, Ang Mo Kio (2020 - 2024)

```{r,echo}
temp_lplot <- create_line_chart(
  data = climate_temperature_interpolated,
  selected_stations = c("Admiralty", "Changi", "Ang Mo Kio"),
  dataset_type = "temperature",
  var_type = "Mean Temperature",
  date_range = c("2020-01-01", "2024-12-31")
)

temp_lplot
```

# 4.0 Confirmatory Data Analysis

# 5.0 Time-Series Analysis: Visualising Time-Series Forecasting of Weather Parameters
