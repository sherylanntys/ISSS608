{
  "hash": "6b94eb5765d87f8af5abc2a28ff85077",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In-class Exercise 5.0\"\nauthor: \"Sheryl Ann Tan Yi-Shi\"\ndate: \"2025-02-15\"\ndate-modified: \"last-modified\"\nexecute: \n  echo: true\n  eval: true\n  warning: false\n  freeze: true\n---\n\n\n\n# 1.0 Getting Started\n\nThe code chunk below installs the required R Packages for this exercise:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, tsibble, feasts, fable, seasonal)\n```\n:::\n\n\n\n## 1.1 Importing the Dataset\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nts_data <- read_csv(\n  \"data/visitor_arrivals_by_air.csv\")\n```\n:::\n\n\n\nIn the code chunk below, dmy() of lubridate package is used to convert data type of Month-Year field from Character to Date.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nts_data$`Month-Year` <- dmy(\n  ts_data$`Month-Year`)\n```\n:::\n\n\n\nThe original data file uses '/' in the dates. However, upon seeing '/', R will automatically convert it to a chr field.\n\nWe now want to convert a typical dataframe into a time-series tsibble function:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nts_data_ts <- ts(ts_data)       \nhead(ts_data_ts)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Month-Year Republic of South Africa Canada   USA Bangladesh Brunei China\n[1,]      13879                     3680   6972 31155       6786   3729 79599\n[2,]      13910                     1662   6056 27738       6314   3070 82074\n[3,]      13939                     3394   6220 31349       7502   4805 72546\n[4,]      13970                     3337   4764 26376       7333   3096 76112\n[5,]      14000                     2089   4460 26788       7988   3586 64808\n[6,]      14031                     2515   3888 29725       8301   5284 55238\n     Hong Kong SAR (China) India Indonesia Japan South Korea Kuwait Malaysia\n[1,]                 17103 41639     62683 37673       27937    284    31352\n[2,]                 21089 37170     47834 35297       22633    241    35030\n[3,]                 23230 44815     64688 42575       22876    206    37629\n[4,]                 17688 49527     58074 26839       20634    193    37521\n[5,]                 19340 67754     57089 30814       22785    140    38044\n[6,]                 19152 57380     70118 31001       22575    354    40419\n     Myanmar Pakistan Philippines Saudi Arabia Sri Lanka Taiwan Thailand\n[1,]    5269     1395       18622          406      5289  13757    18370\n[2,]    4643     1027       21609          591      4767  13921    16400\n[3,]    6218     1635       28464          626      4988  11181    23387\n[4,]    7324     1232       30131          644      7639  11665    24469\n[5,]    5395     1306       30193          470      5125  11436    21935\n[6,]    5542     1996       25800          772      4791  10689    19900\n     United Arab Emirates Vietnam Belgium & Luxembourg Finland France Germany\n[1,]                 2652   10315                 1341    1179   6918   11982\n[2,]                 2230   13415                 1449    1207   7876   13256\n[3,]                 3353   14320                 1674    1071   8066   15185\n[4,]                 3245   15413                 1426     768   8312   11604\n[5,]                 2856   14424                 1243     690   7066    9853\n[6,]                 4292   21368                 1255     624   5926    9347\n     Italy Netherlands Spain Switzerland United Kingdom Australia New Zealand\n[1,]  2953        4938  1668        4450          41934     71260        7806\n[2,]  2704        4885  1568        4381          44029     45595        4729\n[3,]  2822        5015  2254        5015          49489     53191        6106\n[4,]  3018        4902  1503        5434          35771     56514        7560\n[5,]  2165        4397  1365        4427          24464     57808        9090\n[6,]  2022        4166  1446        3359          22473     63350        9681\n```\n\n\n:::\n:::\n\n\n\nIn R, it would be indicated as a \"Time-Series\" data frame:\n\n![](images/clipboard-452806436.png)\n\nThe code chunk below converting ts_data from tibble object into tsibble object by using [`as_tsibble()`](https://tsibble.tidyverts.org/reference/as-tsibble.html) of **tsibble** R package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nts_tsibble <- ts_data %>%\n  mutate(Month = yearmonth(`Month-Year`)) %>%\n  as_tsibble(index = `Month`)\n```\n:::\n\n\n\n# 2.0 Visualising Time-Series Data\n\nIn order to visualise the time-series data effectively, we need to organise the data frame from wide to long format by using [`pivot_longer()`](https://tidyr.tidyverse.org/reference/pivot_longer.html) of **tidyr** package as shown below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nts_longer <- ts_data %>%\n  pivot_longer(cols = c(2:34), # Define the columns that you want to pivot.\n               names_to = \"Country\", # Categorical variable that you want to convert.\n               values_to = \"Arrivals\") # Cells that you want to convert to.\n```\n:::\n\n\n\n## 2.1 Visualising Single Time-Series\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nts_longer %>%\n  filter(Country == \"Vietnam\") %>%\n  ggplot(aes(x = `Month-Year`, \n             y = Arrivals))+\n  geom_line(size = 0.5)\n```\n\n::: {.cell-output-display}\n![](In-Class_Ex07_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\nCreating a trellis plot to plot the time-series for the respective countries:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = ts_longer, \n       aes(x = `Month-Year`, \n           y = Arrivals))+\n  geom_line(size = 0.5) +\n  facet_wrap(~ Country, # Facet_wrap allows me to wrap for each line so I don't need to define the number of rows.\n             ncol = 3, # You can define the ncols and nrows.\n             scales = \"free_y\") +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](In-Class_Ex07_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n## 2.2 Visualising Seasonality with Cycle Plot\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntsibble_longer <- ts_tsibble %>%\n  pivot_longer(cols = c(2:34),\n               names_to = \"Country\",\n               values_to = \"Arrivals\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntsibble_longer %>%\n  filter(Country == \"Vietnam\" |\n         Country == \"Italy\") %>% \n  autoplot(Arrivals) + \n  facet_grid(Country ~ ., scales = \"free_y\")\n```\n\n::: {.cell-output-display}\n![](In-Class_Ex07_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntsibble_longer %>%\n  filter(Country == \"Vietnam\" |\n         Country == \"Italy\") %>% \n  gg_subseries(Arrivals) # Built-in function gg_subseries that allows you to create a cycle plot.\n```\n\n::: {.cell-output-display}\n![](In-Class_Ex07_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "In-Class_Ex07_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}