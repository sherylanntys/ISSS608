---
title: "Hands-on Exercise 02: Beyond ggplot2 Fundamentals"
author: "Sheryl Ann Tan Yi-Shi"
date: "2025-01-19"
date-modified: "last-modified"
execute: 
  echo: true
  eval: true
  warning: false
  freeze: true
---

# 1.0 Getting Started

## 1.1 Installing and Loading the Required Libraries

The following R packages will be used:

-   *ggrepel*: Provides geoms for ggplot2 to repel overlapping text labels.

-   *ggthemes*: Provides extra themes, geoms and scales for ggplot2.

-   *hrbrthemes*: Provides typography-centric themes and theme components for ggplot2.

-   *patchwork*: Prepares composite figure created using ggplot2.

```{r}
pacman::p_load(ggrepel, patchwork, 
               ggthemes, hrbrthemes,
               tidyverse) 
```

## 1.2 Importing Data

```{r}
exam_data <- read_csv("data/Exam_data.csv")
```

# 2.0 Beyond ggplot2 Annotation: `ggrepel`

One of the challenge in plotting statistical graph is annotation, especially with large number of data points.

`geom_label()` helps to identify individual data points. However, this may result in overlapping text in large data sets.

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS, 
           y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              size=0.5) +  
  geom_label(aes(label = ID), 
             hjust = .5, 
             vjust = -.5) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  ggtitle("English scores versus Maths scores for Primary 3")
```

::: callout-note
`geom_label(aes(label = ID), hjust = .5, vjust = -.5)`: Adds labels using the ID column, slightly offset vertically and horizontally.
:::

## 2.1 Working with ***`ggrepel`***

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS, 
           y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              size=0.5) +  
  geom_label_repel(aes(label = ID), 
                   fontface = "bold") +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  ggtitle("English scores versus Maths scores for Primary 3")
```

::: callout-note
`geom_label_repel(aes(label = ID), fontface = "bold")`: Replaces `geom_label()` to dynamically adjust label positions and prevent overlapping.

The density of points in certain regions of the graph may lead to labels being omitted.
:::

### 2.1.1 Exploring Other Arguments in *`geom_label_repel`*

A list of arguments that can be used with `geom_label_repel()` can be found [here](https://www.rdocumentation.org/packages/ggrepel/versions/0.9.6/topics/geom_label_repel).

**`max.overlaps`**

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS, 
           y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              size=0.5) +  
  geom_label_repel(aes(label = ID), 
                   fontface = "bold",
                   max.overlaps=20) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  ggtitle("English scores versus Maths scores for Primary 3")
```

::: callout-note
-   `max.overlaps`\
    By default, `geom_label_repel` exclude text labels when they overlap too many other labels. The default is 10. Increasing the `max.overlaps` argument would increase the number of labels displayed in the graph.
:::

# 3.0 Beyond *ggplot2* Themes

ggplot2 comes with eight built-in themes: `theme_gray()`, `theme_bw()`, `theme_classic()`, `theme_dark()`, `theme_light()`, `theme_linedraw()`, `theme_minimal()`, and `theme_void().`

```{r}
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  theme_gray() +
  ggtitle("Distribution of Maths scores")
```

## 3.1 Working with *`ggtheme`* Package

In the example below, *The Economist* theme is used.

```{r}
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  ggtitle("Distribution of Maths scores") +
  theme_economist()
```

## 3.2 Working with *`hrbthems`* Package

The `hrbrthemes` package provides a base theme that focuses on typographic elements, including where various labels are placed, and fonts that are used.

```{r}
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  ggtitle("Distribution of Maths scores") +
  theme_ipsum()
```

```{r}
ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  ggtitle("Distribution of Maths scores") +
  theme_ipsum(axis_title_size = 18,
              base_size = 15,
              grid = "Y")
```

::: callout-note
-   `axis_title_size`: Adjust the font size of the axis title.

-   `base_size`: Adjust the font size of the axis labels.

-   `grid`: Remove the x-axis grid lines.
:::

# 4.0 Beyond a Single Graph

Multiple graphs may be required for visual storytelling. We can create composite plots using `ggplot2` extensions.

The three statistical graphs are created separately using the respective code chunks below.

```{r}
p1 <- ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") + 
  coord_cartesian(xlim=c(0,100)) +
  ggtitle("Distribution of Maths scores")

p1
```

```{r}
p2 <- ggplot(data=exam_data, 
             aes(x = ENGLISH)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  coord_cartesian(xlim=c(0,100)) +
  ggtitle("Distribution of English scores")

p2
```

```{r}
p3 <- ggplot(data=exam_data, 
             aes(x= MATHS, 
                 y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              size=0.5) +  
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  ggtitle("English scores versus Maths scores for Primary 3")

p3
```

## 4.1 Creating Composite Graphics: *`patchwork`* Methods

Generally syntax that can be used:

-   `+`: Used to create a two-column layout

-   `( )`: Used to create a subplot group.

-   `/`: Used to create a two-row layout.

### 4.1.1 Combining Two *`ggplot2`* Graphs

::: panel-tabset
#### Using +

```{r}
p1 + p2

```

#### Using ()

```{r}
(p1 + p2)/p1
```

#### Using /

```{r}
p1 / p3
```
:::

### 4.1.2 Combining Three *`ggplot2`* Graphs

The following syntax can be used:

-   `/`: Used to stack two graphs.

-   `|`: Used to place the plots beside each other.

-   `( )`: Used to define the sequence of the plotting.

```{r}
(p1 / p2) | p3
```

### 4.1.3 Creating a Composite Figure with Tag

```{r}
((p1 / p2) | p3) + 
  plot_annotation(tag_levels = 'I')
```

::: callout-note
-   `plot_annotation()`: Adds annotations to the composite plot.

-   `tag_levels = 'I'`: Automatically tags each subplot with Roman numerals. Other options for tag_levels include: `A`, `a`, `1`
:::

#### 4.1.3.1 Other Arguments for `plot_annotation()`

A list of arguments that can be used with `plot_annotation()` can be found [here](https://www.rdocumentation.org/packages/patchwork/versions/0.0.1/topics/plot_annotation).

Using `tag_prefix:`

```{r}
((p1 / p2) | p3) + 
  plot_annotation(tag_levels = '1', tag_prefix="Figure ")
```

### 4.1.4 Creating Figure with `inset`

`inset_element()` of **patchwork** enables us to place several plots or graphic elements freely **on top or below another plot**.

```{r}
p3 + inset_element(p2, 
                   left = 0.02, 
                   bottom = 0.7, 
                   right = 0.5, 
                   top = 1)
```

### 4.1.5 Creating a Composite Figure by Using `patchwork` and `ggtheme`

```{r}
patchwork <- (p1 / p2) | p3
patchwork & theme_economist()
```

### 4.1.6 Attempting to Modify the Plot in 4.1.5

As the plot title of *p3* was cut off, with the titles of *p2* overlapping *p3*, we will attempt to modify the plot by reducing the title size. At the same time, I will also try other themes.

::: panel-tabset
#### Reducing the Title Size

Adding `plot.title = element_text(size=10)` will reduce the respective plots' title size.

```{r}
patchwork & 
  theme_economist() & 
  theme(
    plot.title = element_text(size = 9),        # Reduce plot title size
    axis.text = element_text(size = 6),         # Reduce axis tick text size
    axis.title = element_text(size = 6)         # Reduce axis labels size
  )
```

#### Using `theme_wsj()`

```{r}
patchwork & 
  theme_wsj() & 
  theme(
    plot.title = element_text(size = 8),        # Reduce plot title size
    axis.text = element_text(size = 6),         # Reduce axis tick text size
    axis.title = element_text(size = 6)         # Reduce axis labels size
  )
```

# 5.0 References

-   [Patchwork R package goes nerd viral](https://www.littlemissdata.com/blog/patchwork)

-   [ggrepel](https://ggrepel.slowkow.com/)

-   [ggthemes](https://ggplot2.tidyverse.org/reference/ggtheme.html)

-   [hrbrthemes](https://cinc.rud.is/web/packages/hrbrthemes/)

-   [ggplot tips: Arranging plots](https://albert-rapp.de/post/2021-10-28-extend-plot-variety/)

-   [ggplot2 Theme Elements Demonstration](https://henrywang.nl/ggplot2-theme-elements-demonstration/)

-   [ggplot2 Theme Elements Reference Sheet](https://isabella-b.com/blog/ggplot2-theme-elements-reference/)

## 5.1 Disclaimer

This document includes content written with the assistance of ChatGPT, which was used for grammar correction and the explanation of arguments for the various packages.
:::
