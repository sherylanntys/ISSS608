---
title: "Hands-on Exercise 5.1: Creating Ternary Plot with R"
author: "Sheryl Ann Tan Yi-Shi"
date: "2025-02-08"
date-modified: "last-modified"
execute: 
  echo: true
  eval: true
  warning: false
  freeze: true
---

# 1.0 Getting Started

## 1.1 Installing and Loading the Packages

The following R packages will be used in this exercise:

| Package | Description |
|------------------|------------------------------------------------------|
| `ggtern` | Plots ternary diagrams |
| `Plotly R` | Creates interactive web-based graphs via plotly's JavaScript graphing library, plotly.js. |

The following code chunk loads the required packages into R:

```{r}
pacman::p_load(plotly, ggtern, tidyverse)
```

## 1.2 Importing Data

The `read_csv()` function of the `readr` package will be used to import *espopagsex2000to2018_tidy.csv* into R:

```{r}
pop_data <- read_csv("data/respopagsex2000to2018_tidy.csv") 
```

## 1.3 Data Preparation

The `mutate()` function of the `dplyr` package is used to derive three new measures: **young, active** and **old**.

```{r}
agpop_mutated <- pop_data %>%
  mutate(`Year` = as.character(Year))%>%
  spread(AG, Population) %>%
  mutate(YOUNG = rowSums(.[4:8]))%>%
  mutate(ACTIVE = rowSums(.[9:16]))  %>%
  mutate(OLD = rowSums(.[17:21])) %>%
  mutate(TOTAL = rowSums(.[22:24])) %>%
  filter(Year == 2018)%>%
  filter(TOTAL > 0)
```

# 2.0 Plotting Ternary Diagram with R

## 2.1 Plotting a Static Ternary Diagram

The `ggtern()` function of the `ggetern` package is used to create a simple ternary plot:

```{r}
ggtern(data=agpop_mutated,aes(x=YOUNG,y=ACTIVE, z=OLD)) +
  geom_point()
```


The following code chunk adds the graph title "Population Structure, 2015" and `theme_rgbw()` to the ternary plot generated above:

```{r}
ggtern(data=agpop_mutated, aes(x=YOUNG,y=ACTIVE, z=OLD)) +
  geom_point() +
  labs(title="Population structure, 2015") +
  theme_rgbw()
```

## 2.2 Plotting an Interactive Ternary Diagram

```{r}
label <- function(txt) {
  list(
    text = txt, 
    x = 0.1, y = 1,
    ax = 0, ay = 0,
    xref = "paper", yref = "paper", 
    align = "center",
    font = list(family = "serif", size = 15, color = "white"),
    bgcolor = "#b3b3b3", bordercolor = "black", borderwidth = 2
  )
}

# reusable function for axis formatting
axis <- function(txt) {
  list(
    title = txt, tickformat = ".0%", tickfont = list(size = 10)
  )
}

ternaryAxes <- list(
  aaxis = axis("Young"), 
  baxis = axis("Active"), 
  caxis = axis("Old")
)

# Initiating a plotly visualization 
plot_ly(
  agpop_mutated, 
  a = ~YOUNG, 
  b = ~ACTIVE, 
  c = ~OLD, 
  color = I("black"), 
  type = "scatterternary"
) %>%
  layout(
    annotations = label("Ternary Markers"), 
    ternary = ternaryAxes
  )
```
