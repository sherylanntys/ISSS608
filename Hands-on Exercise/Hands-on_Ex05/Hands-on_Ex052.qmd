---
title: "Hands-on Exercise 5.2: Visual Correlation Analysis"
author: "Sheryl Ann Tan Yi-Shi"
date: "2025-02-08"
date-modified: "last-modified"
execute: 
  echo: true
  eval: true
  warning: false
  freeze: true
---

# 1.0 Getting Started

## 1.1 Installing and Loading the Packages

The code chunk below installs and launches `corrplot`, `ggpubr`, `plotly`, and `tidyverse` in R:

```{r}
pacman::p_load(corrplot, ggstatsplot, tidyverse)
```

## 1.2 Importing Data

The `read_csv()` function of the `readr` package will be used to import *wine_quality.csv* into R:

```{r}
wine <- read_csv("data/wine_quality.csv")
```

# 2.0 Building Correlation Matrix: `pairs()` Method

## 2.1 Building a Basic Correlation Matrix

```{r}
pairs(wine[,1:11])
```

```{r}
pairs(wine[,2:12])
```

## 2.2 Drawing the Lower Corner

To show the lower half of the correlation matrix, the upper panel argument will be used as shown in the code chunk below:

```{r}
pairs(wine[,2:12], upper.panel = NULL)
```

Similarly, we can use the `lower.panel` argument to show the upper half of the correlation matrix:

```{r}
pairs(wine[,2:12], lower.panel = NULL)
```

## 2.3 Including Correlation Coefficients

`panel.cor` function will be used to show the correlation coefficient of each pair of variables:

```{r}
panel.cor <- function(x, y, digits=2, prefix="", cex.cor, ...) {
usr <- par("usr")
on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y, use="complete.obs"))
txt <- format(c(r, 0.123456789), digits=digits)[1]
txt <- paste(prefix, txt, sep="")
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)
}

pairs(wine[,2:12], 
      upper.panel = panel.cor)
```

# 3.0 Visualising Correlation Matrix: `ggcormat()`

## 3.1 The Basic Plot

```{r}
ggstatsplot::ggcorrmat(
  data = wine, 
  cor.vars = 1:11)
```

```{r}
ggstatsplot::ggcorrmat(
  data = wine, 
  cor.vars = 1:11,
  ggcorrplot.args = list(outline.color = "black", 
                         hc.order = TRUE,
                         tl.cex = 10),
  title    = "Correlogram for wine dataset",
  subtitle = "Four pairs are no significant at p < 0.05"
)
```

# 4.0 Building Multiple Plots

```{r}
grouped_ggcorrmat(
  data = wine,
  cor.vars = 1:11,
  grouping.var = type,
  type = "robust",
  p.adjust.method = "holm",
  plotgrid.args = list(ncol = 2),
  ggcorrplot.args = list(outline.color = "black", 
                         hc.order = TRUE,
                         tl.cex = 10),
  annotation.args = list(
    tag_levels = "a",
    title = "Correlogram for wine dataset",
    subtitle = "The measures are: alcohol, sulphates, fixed acidity, citric acid, chlorides, residual sugar, density, free sulfur dioxide and volatile acidity",
    caption = "Dataset: UCI Machine Learning Repository"
  )
)
```

# 5.0 Visualising Correlation Matrix Using `corrplot` Package

## 5.1 Getting Started with `corrplot`

The code chunk below uses `cor()` to compute the correlation matrix of the wine data frame:

```{r}
wine.cor <- cor(wine[, 1:11])
```

The code chunk below uses `corrplot()` to plot the corrgram based on default settings:

```{r}
corrplot(wine.cor)
```

## 5.2 Working with Visual Geometrics

```{r}
corrplot(wine.cor, 
         method = "ellipse") 
```

### 5.2.1 Trying Out Other Visual Geometrics

::: panel-tabset
#### Square

```{r}
corrplot(wine.cor, 
         method = "square") 
```

#### Color

```{r}
corrplot(wine.cor, 
         method = "color") 
```

#### Pie

```{r}
corrplot(wine.cor, 
         method = "pie") 
```

#### Number

```{r}
corrplot(wine.cor, 
         method = "number") 
```
:::

## 5.3 Working with Mixed Layout

The code chunk below plots a corrgram with a mixed visual matrix with one half showing ellipses, and the other half showing numbers:

```{r}
corrplot.mixed(wine.cor, 
               lower = "ellipse", 
               upper = "number",
               tl.pos = "lt",
               diag = "l",
               tl.col = "black")
```

## 5.4 Combining Corrgram with the Significant Test

We are interested to know which pair of variables and their correlation coefficients are statistically significant in statistical analysis:

```{r}
wine.sig = cor.mtest(wine.cor, conf.level= .95)

corrplot(wine.cor,
         method = "number",
         type = "lower",
         diag = FALSE,
         tl.col = "black",
         tl.srt = 45,
         p.mat = wine.sig$p,
         sig.level = .05)
```

## 5.5 Reordering a Corrgram

```{r}
corrplot.mixed(wine.cor, 
               lower = "ellipse", 
               upper = "number",
               tl.pos = "lt",
               diag = "l",
               order="AOE",
               tl.col = "black")
```

## 5.6 Reordering a Correlation Matrix using `hclust`

```{r}
corrplot(wine.cor, 
         method = "ellipse", 
         tl.pos = "lt",
         tl.col = "black",
         order="hclust",
         hclust.method = "ward.D",
         addrect = 3)
```

### 5.6.1 Trying Other Order Methods'

**Alphabet**

```{r}
corrplot.mixed(wine.cor, 
               lower = "ellipse", 
               upper = "square",
               tl.pos = "lt",
               diag = "l",
               order="alphabet",
               tl.col = "black")
```

**FPC**

```{r}
corrplot.mixed(wine.cor, 
               tl.pos = "lt",
               diag = "l",
               order="FPC",
               tl.col = "black")
```

# 6.0 Reference

Michael Friendly (2002). “Corrgrams: Exploratory displays for correlation matrices”. *The American Statistician*, 56, 316–324.

D.J. Murdoch, E.D. Chow (1996). “A graphical display of large correlation matrices”. *The American Statistician*, 50, 178–180.

<https://r4va.netlify.app/chap06>
