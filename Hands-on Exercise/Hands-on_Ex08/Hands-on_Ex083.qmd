---
title: "Hands-on Exercise 8.3: Analytical Mapping"
author: "Sheryl Ann Tan Yi-Shi"
date: "2025-03-08"
date-modified: "last-modified"
execute: 
  echo: true
  eval: true
  warning: false
  freeze: true
---

# 1.0 Getting Started

## 1.1 Installing and loading R packages

```{r}
pacman::p_load(tmap, tidyverse, sf)
```

## 1.2 Importing data

```{r}
NGA_wp <- read_rds("data/rds/NGA_wp.rds")
```

# 2.0 Basic Choropleth Mapping

## 2.1 Visualising distribution of non-functional water points

```{r}
p1 <- tm_shape(NGA_wp) +
  tm_fill("wp_functional",
          fill.scale = tm_scale_intervals(values = 10), 
          palette = "brewer.blues") + 
  tm_borders(lwd = 0.1,
             fill_alpha = 1) +
  tm_title("Distribution of functional water point by LGAs")

p2 <- tm_shape(NGA_wp) +
  tm_fill("total_wp",
          fill.scale = tm_scale_intervals(values = 10),
          palette = "brewer.blues") + 
  tm_borders(lwd = 0.1,
             fill_alpha = 1) + 
  tm_title("Distribution of total water point by LGAs") 


tmap_arrange(p2, p1, nrow = 1)
```

# 3.0 Choropleth Map for Rates

## 3.1 Deriving proportion of functional water points and non-functional water points

```{r}
NGA_wp <- NGA_wp %>%
  mutate(pct_functional = wp_functional/total_wp) %>%
  mutate(pct_nonfunctional = wp_nonfunctional/total_wp)
```

## 3.2 Plotting map of rate

```{r}
tm_shape(NGA_wp) +
  tm_fill("pct_functional",
          fill.scale = tm_scale_intervals(values = 10),
          palette = "brewer.blues", 
          legend.hist = TRUE) + 
  tm_borders(lwd = 0.1,
             fill_alpha = 1) + 
  tm_title("Rate map of functional water point by LGAs") + 
  tm_layout(legend.outside = TRUE)
```

# 4.0 Extreme Value Maps

## 4.1 Percentile map

### 4.1.1 Data preparation

**Step 1**: Exclude records with NA by using the code chunk below.

```{r}
NGA_wp <- NGA_wp %>%
  drop_na()
```

**Step 2:** Creating customised classification and extracting values.

```{r}
percent <- c(0,.01,.1,.5,.9,.99,1)
var <- NGA_wp["pct_functional"] %>%
  st_set_geometry(NULL)
quantile(var[,1], percent)
```

### 4.1.2 Creating the get.var function

```{r}
get.var <- function(vname,df) {
  v <- df[vname] %>% 
    st_set_geometry(NULL)
  v <- unname(v[,1])
  return(v)
}
```

### 4.1.3 A percentile mapping function

```{r}
percentmap <- function(vnam, df, legtitle=NA, mtitle="Percentile Map"){
  percent <- c(0,.01,.1,.5,.9,.99,1)
  var <- get.var(vnam, df)
  bperc <- quantile(var, percent)
  tm_shape(df) +
  tm_polygons() +
  tm_shape(df) +
     tm_fill(vnam,
             title=legtitle,
             breaks=bperc,
             palette="Blues",
          labels=c("< 1%", "1% - 10%", "10% - 50%", "50% - 90%", "90% - 99%", "> 99%"))  +
  tm_borders() +
  tm_layout(main.title = mtitle, 
            title.position = c("right","bottom"))
}
```

### 4.1.4 Test drive the percentile mapping function

```{r}
percentmap("total_wp", NGA_wp)
```

## 4.2 Box map

```{r}
ggplot(data = NGA_wp,
       aes(x = "",
           y = wp_nonfunctional)) +
  geom_boxplot()
```

### 4.2.1 Creating the boxbreaks function

```{r}
boxbreaks <- function(v,mult=1.5) {
  qv <- unname(quantile(v))
  iqr <- qv[4] - qv[2]
  upfence <- qv[4] + mult * iqr
  lofence <- qv[2] - mult * iqr
  # initialize break points vector
  bb <- vector(mode="numeric",length=7)
  # logic for lower and upper fences
  if (lofence < qv[1]) {  # no lower outliers
    bb[1] <- lofence
    bb[2] <- floor(qv[1])
  } else {
    bb[2] <- lofence
    bb[1] <- qv[1]
  }
  if (upfence > qv[5]) { # no upper outliers
    bb[7] <- upfence
    bb[6] <- ceiling(qv[5])
  } else {
    bb[6] <- upfence
    bb[7] <- qv[5]
  }
  bb[3:5] <- qv[2:4]
  return(bb)
}
```

### 4.2.2 Creating the get.var function

```{r}
get.var <- function(vname,df) {
  v <- df[vname] %>% st_set_geometry(NULL)
  v <- unname(v[,1])
  return(v)
}
```

### 4.2.3 Test drive the newly created function

```{r}
var <- get.var("wp_nonfunctional", NGA_wp) 
boxbreaks(var)
```

### 4.2.4 Boxmap function

```{r}
boxmap <- function(vnam, df, 
                   legtitle=NA,
                   mtitle="Box Map",
                   mult=1.5){
  var <- get.var(vnam,df)
  bb <- boxbreaks(var)
  tm_shape(df) +
    tm_polygons() +
  tm_shape(df) +
     tm_fill(vnam,title=legtitle,
             breaks=bb,
             palette="Blues",
          labels = c("lower outlier", 
                     "< 25%", 
                     "25% - 50%", 
                     "50% - 75%",
                     "> 75%", 
                     "upper outlier"))  +
  tm_borders() +
  tm_layout(main.title = mtitle)
}
```

```{r}
tmap_mode("plot")
boxmap("wp_nonfunctional", NGA_wp)
```
