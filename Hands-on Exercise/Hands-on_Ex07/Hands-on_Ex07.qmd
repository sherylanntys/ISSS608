---
title: "Hands-on Exercise 7.0: Visualising and Analysing Time-Oriented Data"
author: "Sheryl Ann Tan Yi-Shi"
date: "2025-02-22"
date-modified: "last-modified"
execute: 
  echo: true
  eval: true
  warning: false
  freeze: true
---

# 1.0 Getting Started

## 1.1 Installing and Loading the Packages

The following code chunk loads the required packages into R:

```{r}
pacman::p_load(scales, viridis, lubridate, ggthemes, gridExtra, readxl, knitr, data.table, CGPfunctions, ggHoriPlot, tidyverse)
```

## 1.2 Importing Data

The `read_csv()` function of the `readr` package will be used to import *eventlog.csv* into R:

```{r}
attacks <- read_csv("data/eventlog.csv")
```

## 1.3 Examining the Data Structure

The `kable()` function will be used to review the structure of the imported data frame:

```{r}
kable(head(attacks))
```

## 1.4 Data Preparation

**Step 1.** The code chunk below creates two new fields (*wkday* and *hour*):

```{r}
make_hr_wkday <- function(ts, sc, tz) {
  real_times <- ymd_hms(ts, 
                        tz = tz[1], 
                        quiet = TRUE)
  dt <- data.table(source_country = sc,
                   wkday = weekdays(real_times),
                   hour = hour(real_times))
  return(dt)
  }
```

**Step 2.** The code chunk below creates the attacks tibble data frame:

```{r}
wkday_levels <- c('Saturday', 'Friday', 
                  'Thursday', 'Wednesday', 
                  'Tuesday', 'Monday', 
                  'Sunday')

attacks <- attacks %>%
  group_by(tz) %>%
  do(make_hr_wkday(.$timestamp, 
                   .$source_country, 
                   .$tz)) %>% 
  ungroup() %>% 
  mutate(wkday = factor(
    wkday, levels = wkday_levels),
    hour  = factor(
      hour, levels = 0:23))
```

`kable()` is used again to view the table after processing:

```{r}
kable(head(attacks))
```

# 2.0 Building Calendar Heatmaps

The code chunk below generates a calendar heatmap based on a tibble data table called *grouped*, which is derived from aggregating the attack by *wkday* and *hour* fields.

```{r}
grouped <- attacks %>% 
  count(wkday, hour) %>% 
  ungroup() %>%
  na.omit()

ggplot(grouped, 
       aes(hour, 
           wkday, 
           fill = n)) + 
geom_tile(color = "white", 
          size = 0.1) + 
theme_tufte(base_family = "Helvetica") + 
coord_equal() +
scale_fill_gradient(name = "# of attacks",
                    low = "sky blue", 
                    high = "dark blue") +
labs(x = NULL, 
     y = NULL, 
     title = "Attacks by weekday and time of day") +
theme(axis.ticks = element_blank(),
      plot.title = element_text(hjust = 0.5),
      legend.title = element_text(size = 8),
      legend.text = element_text(size = 6) )
```

## 2.1 Building Multiple Calendar Heatmaps

**Step 1**. Deriving attack by country object through calculating the % of attacks by country.

```{r}
attacks_by_country <- count(
  attacks, source_country) %>%
  mutate(percent = percent(n/sum(n))) %>%
  arrange(desc(n))
```

**Step 2.** Preparing the tidy data frame.

```{r}
top4 <- attacks_by_country$source_country[1:4]
top4_attacks <- attacks %>%
  filter(source_country %in% top4) %>%
  count(source_country, wkday, hour) %>%
  ungroup() %>%
  mutate(source_country = factor(
    source_country, levels = top4)) %>%
  na.omit()
```

**Step 3.** Plotting the multiple calendar heatmap by using `ggplot2` package.

```{r}
ggplot(top4_attacks, 
       aes(hour, 
           wkday, 
           fill = n)) + 
  geom_tile(color = "white", 
          size = 0.1) + 
  theme_tufte(base_family = "Helvetica") + 
  coord_equal() +
  scale_fill_gradient(name = "# of attacks",
                    low = "sky blue", 
                    high = "dark blue") +
  facet_wrap(~source_country, ncol = 2) +
  labs(x = NULL, y = NULL, 
     title = "Attacks on top 4 countries by weekday and time of day") +
  theme(axis.ticks = element_blank(),
        axis.text.x = element_text(size = 7),
        plot.title = element_text(hjust = 0.5),
        legend.title = element_text(size = 8),
        legend.text = element_text(size = 6) )
```

# 3.0 Plotting Cycle Plot

## 3.1 Data Import

The code chunk below imports *arrivals_by_air.xlsx* by using the `read_excel()` function:

```{r}
air <- read_excel("data/arrivals_by_air.xlsx")
```

## 3.2 Deriving Month and Year Fields

Two fields, *month* and *year* are derived from the *Month-Year* field via the code chunk below:

```{r}
air$month <- factor(month(air$`Month-Year`), 
                    levels=1:12, 
                    labels=month.abb, 
                    ordered=TRUE) 
air$year <- year(ymd(air$`Month-Year`))
```

## 3.3 Extracting the Target Country

The code chunk below extracts data for the target country, Vietnam:

```{r}
Vietnam <- air %>% 
  select(`Vietnam`, 
         month, 
         year) %>%
  filter(year >= 2010)
```

## 3.4 Computing Year Average Arrivals by Month

The code chunk below uses `group_by()` and \`summarise()\~ to compute year average arrivals by month.

```{r}
hline.data <- Vietnam %>% 
  group_by(month) %>%
  summarise(avgvalue = mean(`Vietnam`))
```

## 3.5 Plotting the Cycle Plot

The code chunk below is used to plot the cycle plot:

```{r}
ggplot() + 
  geom_line(data=Vietnam,
            aes(x=year, 
                y=`Vietnam`, 
                group=month), 
            colour="black") +
  geom_hline(aes(yintercept=avgvalue), 
             data=hline.data, 
             linetype=6, 
             colour="red", 
             size=0.5) + 
  facet_grid(~month) +
  labs(axis.text.x = element_blank(),
       title = "Visitor arrivals from Vietnam by air, Jan 2010-Dec 2019") +
  xlab("") +
  ylab("No. of Visitors") +
  theme_tufte(base_family = "Helvetica")
```

# 4.0 Plotting Slopegraph

## 4.1 Data Import

The code chunk below imports *rice.csv* via `read_csv()`:

```{r}
rice <- read_csv("data/rice.csv")

```

## 4.2 Plotting the Slopegraph

The code chunk below plots a basic slopegraph:

```{r}
rice %>% 
  mutate(Year = factor(Year)) %>%
  filter(Year %in% c(1961, 1980)) %>%
  newggslopegraph(Year, Yield, Country,
                Title = "Rice Yield of Top 11 Asian Counties",
                SubTitle = "1961-1980")
```
