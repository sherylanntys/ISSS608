---
title: "Hands-on Exercise 3.1: Programming Interactive Data Visualisation with R"
author: "Sheryl Ann Tan Yi-Shi"
date: "2025-01-26"
date-modified: "last-modified"
execute: 
  echo: true
  eval: true
  warning: false
  freeze: true
---



# 1.0 Getting Started

## 1.1 Loading the R Packages

The following R packages would installed and loaded:

| R Package   | Description                                         |
|-------------|-----------------------------------------------------|
| `ggiraph`   | Makes `ggplot` graphics interactive.                |
| `plotly`    | Plots interactive statistical graphs.               |
| `DT`        | Creates interactive tables on a html page.          |
| `tidyverse` |                                                     |
| `patchwork` | Combines multiple `ggplot2` graphs into one figure. |



```{r}
pacman::p_load(ggiraph, plotly, 
               patchwork, DT, tidyverse) 
```



## 1.2 Importing Data

The code chunk below uses `read_csv( )` to import the *Exam_data.csv* data file into R and save it as a tibble data frame called `exam_data`.



```{r}
exam_data <- read_csv("data/Exam_data.csv")
```



# 2.0 Interative Data Visualisation: `ggiraph` Methods

## 2.1 Tooltip Effect with `tooltip` Aesthetic

The code chunk below plots an interactive statistical graph using the `ggiraph` package.

The code chunk consists of the following parts:

1.  Ggplot object, and

2.  `girafe( )` of `ggiraph` will be used to create an interactive svg object.

`geom_dotplot_interactive( )` will be used to create a basic graph while `girafe( )` will be used to generate a svg object to be displayed on a html page.



```{r}
p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(
    aes(tooltip = ID),
    stackgroups = TRUE, 
    binwidth = 1, 
    method = "histodot") +
  scale_y_continuous(NULL, 
                     breaks = NULL)
girafe(
  ggobj = p,
  width_svg = 6,
  height_svg = 6*0.618
)
```



# 3.0 Interactivity

Hovering the mouse pointer on a data point of interest in the graph under Section 2.1 would display the student's ID.

## 3.1 Displaying Multiple Information on `tooltip`

The code chunk below can be customised by including a list object:



```{r}
exam_data$tooltip <- c(paste0(     
  "Name = ", exam_data$ID,         
  "\n Class = ", exam_data$CLASS)) # Modify the tooltip here.

p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(
    aes(tooltip = exam_data$tooltip), 
    stackgroups = TRUE,
    binwidth = 1,
    method = "histodot") +
  scale_y_continuous(NULL,               
                     breaks = NULL)
girafe(
  ggobj = p,
  width_svg = 8,
  height_svg = 8*0.618
)
```



## 3.2 Customising `tooltip` Style

`opts_tooltip( )` of `ggiraph` customises tooltip rendering by adding CSS declarations.



```{r}
tooltip_css <- "background-color:white; #<<
font-style:bold; color:black;" #<<

# CSS declarations in the code above.

p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(              
    aes(tooltip = ID),                   
    stackgroups = TRUE,                  
    binwidth = 1,                        
    method = "histodot") +               
  scale_y_continuous(NULL,               
                     breaks = NULL)
girafe(                                  
  ggobj = p,                             
  width_svg = 6,                         
  height_svg = 6*0.618,
  options = list(    #<<
    opts_tooltip(    #<<
      css = tooltip_css)) #<<
)                                        
```



## 3.3 Displaying Statistics on `tooltip`

The code chunk below uses a function to compute 90% confidence interval of the mean. The derived statistics are then displayed in the tooltip.



```{r}
tooltip <- function(y, ymax, accuracy = .01) {
  mean <- scales::number(y, accuracy = accuracy)
  sem <- scales::number(ymax - y, accuracy = accuracy)
  paste("Mean maths scores:", mean, "+/-", sem)
}

gg_point <- ggplot(data=exam_data, 
                   aes(x = RACE),
) +
  stat_summary(aes(y = MATHS, 
                   tooltip = after_stat(  
                     tooltip(y, ymax))),  
    fun.data = "mean_se", 
    geom = GeomInteractiveCol,  
    fill = "light blue"
  ) +
  stat_summary(aes(y = MATHS),
    fun.data = mean_se,
    geom = "errorbar", width = 0.2, size = 0.2
  )

girafe(ggobj = gg_point,
       width_svg = 8,
       height_svg = 8*0.618)
```



## 3.4 Hover Effect with `data_id` Aesthetic

Elements associated with `data_id` will be highlighted upon mouse over. The default value of the hover css is `hover_css="fill:orange;"`.



```{r}
p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(           
    aes(data_id = CLASS),             
    stackgroups = TRUE,               
    binwidth = 1,                        
    method = "histodot") +               
  scale_y_continuous(NULL,               
                     breaks = NULL)
girafe(                                  
  ggobj = p,                             
  width_svg = 6,                         
  height_svg = 6*0.618                      
)                                        
```



## 3.5 Styling Hover Effect



```{r}
p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(              
    aes(data_id = CLASS),              
    stackgroups = TRUE,                  
    binwidth = 1,                        
    method = "histodot") +               
  scale_y_continuous(NULL,               
                     breaks = NULL)
girafe(                                  
  ggobj = p,                             
  width_svg = 6,                         
  height_svg = 6*0.618,
  options = list(                        
    opts_hover(css = "fill: #202020;"), #  Highlighted elements in #202020 colour.
    opts_hover_inv(css = "opacity:0.2;") # Non-highlighted elements would have lower opacity.
  )                                        
)                                        

```



## 3.6 Combining `tooltip` and `hover` Effects



```{r}
p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(              
    aes(tooltip = CLASS, 
        data_id = CLASS),              
    stackgroups = TRUE,                  
    binwidth = 1,                        
    method = "histodot") +               
  scale_y_continuous(NULL,               
                     breaks = NULL)
girafe(                                  
  ggobj = p,                             
  width_svg = 6,                         
  height_svg = 6*0.618,
  options = list(                        
    opts_hover(css = "fill: #202020;"),  
    opts_hover_inv(css = "opacity:0.2;") 
  )                                        
)                                        
```



## 3.7 Click Effect with `onclick`

The data object would link to a web document, which would be displayed in a new window once clicked.



```{r}
exam_data$onclick <- sprintf("window.open(\"%s%s\")",
"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school",
as.character(exam_data$ID))

p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(              
    aes(onclick = onclick),              
    stackgroups = TRUE,                  
    binwidth = 1,                        
    method = "histodot") +               
  scale_y_continuous(NULL,               
                     breaks = NULL)
girafe(                                  
  ggobj = p,                             
  width_svg = 6,                         
  height_svg = 6*0.618)                                        
```



## 3.8 Coordinated Multiple Views with `ggiraph`



```{r}
p1 <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(              
    aes(data_id = ID),              
    stackgroups = TRUE,                  
    binwidth = 1,                        
    method = "histodot") +  
  coord_cartesian(xlim=c(0,100)) + 
  scale_y_continuous(NULL,               
                     breaks = NULL)

p2 <- ggplot(data=exam_data, 
       aes(x = ENGLISH)) +
  geom_dotplot_interactive(              
    aes(data_id = ID),              
    stackgroups = TRUE,                  
    binwidth = 1,                        
    method = "histodot") + 
  coord_cartesian(xlim=c(0,100)) + 
  scale_y_continuous(NULL,               
                     breaks = NULL)

girafe(code = print(p1 + p2), # patchwork
       width_svg = 6,
       height_svg = 3,
       options = list(
         opts_hover(css = "fill: #202020;"),
         opts_hover_inv(css = "opacity:0.2;")
         )
       ) 
```



-   When a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.

-   `patchwork` will be used inside the `girafe` function to create the interactive coordinated multiple views.

# 4.0 Interactive Data Visualisation - `plotly` Methods

## 4.1 Creating an Interactive Scatter Plot: `plot_ly( )` Method



```{r}
plot_ly(data = exam_data, 
             x = ~MATHS, 
             y = ~ENGLISH)
```



## 4.2 Working with Visual Variable: `plot_ly( )` Method



```{r}
plot_ly(data = exam_data, 
        x = ~ENGLISH, 
        y = ~MATHS, 
        color = ~RACE)
```



## 4.3 Creating an Interactive Scatterplot: `ggplotly( )` Method



```{r}
p <- ggplot(data=exam_data, 
            aes(x = MATHS,
                y = ENGLISH)) +
  geom_point(size=1) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))
ggplotly(p)
```



## 4.4 Coordinated Multiple Views with `plotly`

-   `highlight_key( )` is used as shared data

-   Two scatterplots would be created via `ggplot2`

-   `subplot( )` will be used to place them next to each other.



```{r}
d <- highlight_key(exam_data)
p1 <- ggplot(data=d, 
            aes(x = MATHS,
                y = ENGLISH)) +
  geom_point(size=1) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))

p2 <- ggplot(data=d, 
            aes(x = MATHS,
                y = SCIENCE)) +
  geom_point(size=1) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))
subplot(ggplotly(p1),
        ggplotly(p2))
```



# 5.0 Interactive Data Visualisation - `crosstalk` Methods

## 5.1 Interactive Data Table: DT Package



```{r}
DT::datatable(exam_data, class= "compact")
```



## 5.2 Linked Brushing: `crosstalk` Method



```{r}
d <- highlight_key(exam_data) 
p <- ggplot(d, 
            aes(ENGLISH, 
                MATHS)) + 
  geom_point(size=1) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))

gg <- highlight(ggplotly(p),        
                "plotly_selected")  

crosstalk::bscols(gg,               
                  DT::datatable(d), 
                  widths = 5)        
```



# 6.0 Exploring Other Interactive Visualisations

::: panel-tabset
## `ggiraph`: Interactive Scatter Plot

The following code chunk plots the a scatter plot of Science Scores vs. English Scores, with a linear regression line added. The regression line indicates a positive correlation between English and Science scores.

Points are grouped by `CLASS` using the `data_id` aesthetic. Hovering over one point highlights all students from the same class. The `tooltip` displays the `ID` and `CLASS` for each point.



```{r}
p <- ggplot(data = exam_data, aes(x = ENGLISH, y = SCIENCE)) +
  geom_point_interactive(
    aes(tooltip = paste("ID:", ID, "\nClass:", CLASS), data_id = CLASS),
    size = 2
  ) +
  geom_smooth(
    method = "lm", se = FALSE, linetype = "dashed", color = "red"
  ) + # Add a linear regression line
  labs(
    title = "English vs Science Scores",
    x = "English Scores",
    y = "Science Scores"
  ) +
  theme_minimal()

girafe(
  ggobj = p,
  width_svg = 8,
  height_svg = 6,
  options = list(
    opts_hover(css = "fill: orange"), # Highlighted points in orange with black border
    opts_hover_inv(css = "opacity: 0.1;")               # Reduce opacity for non-hovered points
  )
)

```



## `ggiraph`: Interactive Boxplot

The following code chunk creates a series of boxplots to visualise examination scores (`MATHS`, `ENGLISH`, and `SCIENCE`) by gender. The plots are combined using `patchwork` for easy comparison.

Hovering over the respective boxplots would display the tooltips containing the following information: median score, IQR, maximum and minimum scores.



```{r}

y_limits <- c(0, 100) # Ensure that y-axis is consistent across all plots.

p1 <- ggplot(data = exam_data, aes(x = GENDER, y = MATHS, fill = GENDER)) +
  geom_boxplot_interactive(
    aes(tooltip = paste0(
      "Median: ", ..middle..,
      "\nIQR: ", round(..upper.. - ..lower.., 2),
      "\nMax: ", ..ymax..,
      "\nMin: ", ..ymin..
    ))
  ) +
  labs(
    title = "Math Scores by Gender",
    x = "Gender",
    y = "Scores"
  ) +
  scale_y_continuous(limits = y_limits) +
  theme_minimal()

p2 <- ggplot(data = exam_data, aes(x = GENDER, y = ENGLISH, fill = GENDER)) +
  geom_boxplot_interactive(
    aes(tooltip = paste0(
      "Median: ", ..middle..,
      "\nIQR: ", round(..upper.. - ..lower.., 2),
      "\nMax: ", ..ymax..,
      "\nMin: ", ..ymin..
    ))
  ) +
  labs(
    title = "English Scores by Gender",
    x = "Gender",
    y = "Scores"
  ) +
  scale_y_continuous(limits = y_limits) +
  theme_minimal()

p3 <- ggplot(data = exam_data, aes(x = GENDER, y = SCIENCE, fill = GENDER)) +
  geom_boxplot_interactive(
    aes(tooltip = paste0(
      "Median: ", ..middle..,
      "\nIQR: ", round(..upper.. - ..lower.., 2),
      "\nMax: ", ..ymax..,
      "\nMin: ", ..ymin..
    ))
  ) +
  labs(
    title = "Science Scores by Gender",
    x = "Gender",
    y = "Scores"
  ) +
  scale_y_continuous(limits = y_limits) +
  theme_minimal()

combined_plot <- (p1 + p2 + p3) + plot_layout(guides = "collect")

girafe(
  ggobj = combined_plot,
  width_svg = 12,
  height_svg = 6
)

```



## `plotly`: Interactive Boxplot

The following code chunk plots the boxplots of English scores for each `RACE`, allowing a visual comparison of English score distributions between races. Hovering over each boxplot will display the five-number summary.



```{r}
plot_ly(data = exam_data, y = ~ENGLISH, color = ~RACE, type = "box", hoverinfo = "y+name") %>%
  layout(title = "English Scores by Race",
         xaxis = list(title = "Race"),
         yaxis = list(title = "English Scores"))

```


:::

# 7.0 References

This [link](https://davidgohel.github.io/ggiraph/index.html) provides online version of the reference guide and several useful articles. Use this [link](https://cran.r-project.org/web/packages/ggiraph/ggiraph.pdf) to download the pdf version of the reference guide.

-   [How to Plot With Ggiraph](https://www.r-bloggers.com/2018/04/how-to-plot-with-ggiraph/)

-   [Interactive map of France with ggiraph](http://rstudio-pubs-static.s3.amazonaws.com/152833_56a4917734204de7b37881d164cf8051.html)

-   [Custom interactive sunbursts with ggplot in R](https://www.pipinghotdata.com/posts/2021-06-01-custom-interactive-sunbursts-with-ggplot-in-r/)

-   This [link](https://github.com/d-qn/2016_08_02_rioOlympicsAthletes) provides code example on how ggiraph is used to interactive graphs for [Swiss Olympians - the solo specialists](https://www.swissinfo.ch/eng/rio-2016-_swiss-olympiansthe-solo-specialists-/42349156?utm_content=bufferd148b&utm_medium=social&utm_source=twitter.com&utm_campaign=buffer).

-   [Getting Started with Plotly in R](https://plotly.com/r/getting-started/)

-   A collection of plotly R graphs are available via this [link](https://plotly.com/r/).

-   Carson Sievert (2020) **Interactive web-based data visualization with R, plotly, and shiny**, Chapman and Hall/CRC is the best resource to learn plotly for R. The online version is available via this [link](https://plotly-r.com/)

-   [Plotly R Figure Reference](https://plotly.com/r/reference/index/) provides a comprehensive discussion of each visual representations.

-   [Plotly R Library Fundamentals](https://plotly.com/r/plotly-fundamentals/) is a good place to learn the fundamental features of Plotly’s R API.

-   [Getting Started](https://gganimate.com/articles/gganimate.html)

-   Visit this [link](https://rpubs.com/raymondteo/dataviz8) for a very interesting implementation of gganimate by your senior.

-   [Building an animation step-by-step with gganimate](https://www.alexcookson.com/post/2020-10-18-building-an-animation-step-by-step-with-gganimate/).

-   [Creating a composite gif with multiple gganimate panels](https://solarchemist.se/2021/08/02/composite-gif-gganimate/)

## 7.1 Disclaimer

This document includes content written with the assistance of ChatGPT, which was used for grammar correction and the explanation of arguments for the various packages.

