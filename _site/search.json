[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608 Visual Analytics and Applications",
    "section": "",
    "text": "```"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Hi! I’m Sheryl. In this webpage, you will find my learning journey and deliverables for ISSS608 Visual Analytics and Applications."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on Exercise/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 01: A Layered Grammar of Graphics: ggplot2 Methods",
    "section": "",
    "text": "pacman::p_load(tidyverse)\n\n\n\n\nThe code chunk below imports exam_data.csv into R environment by using the read_csv() function of the readr package.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nThere data set contains seven attributes:\n\nCategorical Attributes: ID, CLASS, GENDER and RACE. These columns are denoted as chr (“character type”).\nContinuous Attributes: ENGLISH, MATHS, and SCIENCE. These columns are stored as dbl (“double type”), i.e. numeric values."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex01/Hands-on_Ex01.html#loading-the-required-libraries",
    "href": "Hands-on Exercise/Hands-on_Ex01/Hands-on_Ex01.html#loading-the-required-libraries",
    "title": "Hands-on Exercise 01: A Layered Grammar of Graphics: ggplot2 Methods",
    "section": "",
    "text": "pacman::p_load(tidyverse)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex01/Hands-on_Ex01.html#importing-data",
    "href": "Hands-on Exercise/Hands-on_Ex01/Hands-on_Ex01.html#importing-data",
    "title": "Hands-on Exercise 01: A Layered Grammar of Graphics: ggplot2 Methods",
    "section": "Importing Data",
    "text": "Importing Data\nThe code chunk below imports exam_data.csv into R environment by using the read_csv() function of the readr package.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nThere data set contains seven attributes:\n\nCategorical Attributes: ID, CLASS, GENDER and RACE. These columns are denoted as chr (“character type”).\nContinuous Attributes: ENGLISH, MATHS, and SCIENCE. These columns are stored as dbl (“double type”), i.e. numeric values."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex01/Hands-on_Ex01.html#r-graphics-vs.-ggplot",
    "href": "Hands-on Exercise/Hands-on_Ex01/Hands-on_Ex01.html#r-graphics-vs.-ggplot",
    "title": "Hands-on Exercise 01: A Layered Grammar of Graphics: ggplot2 Methods",
    "section": "R Graphics vs. ggplot",
    "text": "R Graphics vs. ggplot\nThe tabset below compares how R Graphics and ggplot plot a simple histogram:\n\nR Graphicsggplot2\n\n\n\nhist(exam_data$MATHS)\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths Scores\")\n\n\n\n\n\n\n\n\n\n\n\n\nSide Note: Attempting to Customise the R Graphics Histogram\nThe code chunk below customises the R Graphics histogram so that it’s similar to the ggplot2 histogram.\n\nhist(exam_data$MATHS, \n     breaks = 20,                     \n     col = \"grey\",                \n     border = \"black\",                 \n     main = \"Distribution of Maths Scores\",  \n     xlab = \"MATHS\",            \n     ylab = \"Count\")               \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nAfter plotting the histograms using both R Graphics and ggplot2, I noted the following:\n\nX-Axis Labels: R Graphics automatically labels the x-axis with the column reference (“exam_data$MATHS”). This reduces the plot’s readability and interpretability as it directly reflects the code rather than a clear, descriptive label. On the other hand, ggplot2 retains the column name (”MATHS”) as the x-axis label, providing a more intuitive presentation by default.\nLayers: ggplot2 uses a layered approach, where data, aesthetics and geometric objects are added step-by-step using +."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-data",
    "href": "Hands-on Exercise/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-data",
    "title": "Hands-on Exercise 01: A Layered Grammar of Graphics: ggplot2 Methods",
    "section": "3.0 Essential Grammatical Elements in ggplot2: Data",
    "text": "3.0 Essential Grammatical Elements in ggplot2: Data\nThe code chunk below is used to call the ggplot() function.\n\nggplot(data=exam_data)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-aesthetics-mappings",
    "href": "Hands-on Exercise/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-aesthetics-mappings",
    "title": "Hands-on Exercise 01: A Layered Grammar of Graphics: ggplot2 Methods",
    "section": "4.0 Essential Grammatical Elements in ggplot2: Aesthetics Mappings",
    "text": "4.0 Essential Grammatical Elements in ggplot2: Aesthetics Mappings\nThe aesthetic mappings take attributes of the data and use them to influence visual characteristics. Each visual characteristics can thus encode an aspect of the data and be used to convey information.\nAll aesthetics of a plot are specified in the aes() function call.\n\nggplot(data=exam_data, aes(x=MATHS))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nOther aesthetic mappings include - x, y, color, size, shape, alpha (transparency)."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-geom",
    "href": "Hands-on Exercise/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-geom",
    "title": "Hands-on Exercise 01: A Layered Grammar of Graphics: ggplot2 Methods",
    "section": "5.0 Essential Grammatical Elements in ggplot2: geom",
    "text": "5.0 Essential Grammatical Elements in ggplot2: geom\nGeometric objects are the actual marks we put on a plot. Examples include:\n\ngeom_point for drawing individual points (e.g., a scatter plot)\ngeom_line for drawing lines (e.g., for a line charts)\ngeom_smooth for drawing smoothed lines (e.g., for simple trends or approximations)\ngeom_bar for drawing bars (e.g., for bar charts)\ngeom_histogram for drawing binned values (e.g. a histogram)\ngeom_polygon for drawing arbitrary shapes\ngeom_map for drawing polygons in the shape of a map! (You can access the data to use for these maps by using the map_data() function).\n\nA plot must have at least one geom.\n\n5.1 Geometric Objects: geom_bar\nThe code chunk below plots a bar chart using geom_bar():\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\n5.2 Geometric Objects: geom_dotplot\nIn a dot plot, the width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm), and dots are stacked, with each dot representing one observation.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe y-scale is misleading.\n\n\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL)  \n\n\n\n\n\n\n\n\n\n\n5.3 Geometric Objects: geom_histogram\nThe code chunk below uses geom_histogram() to create a simple histogram.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()  \n\n\n\n\n\n\n\n\n\n\n5.4 Modifying a Geometric Object by Changing geom\nIn the code chunk below:\n\nbins is used to change the number of bins to 20\nfill is used to shade the histogram with light blue\ncolor is used to change the outline colour of the bars in black.\n\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"light blue\")  \n\n\n\n\n\n\n\n\n\n\n5.5 Modifying a Geometric Object by Changing aes( )\nThe code chunk below changes the interior colour of the histogram by using sub-group of aes():\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\")\n\n\n\n\n\n\n\n\n\n\n5.6 Geometric Objects: geom_density\ngeom-density() computes and plots kernel density estimate, which is a smoothed version of the histogram.\nIt is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\nThe code below plots the distribution of Maths scores in a kernel density estimate plot.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density()           \n\n\n\n\n\n\n\n\nThe code chunk below plots two kernel density lines by using colour or fill arguments of aes()\n\nggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()\n\n\n\n\n\n\n\n\n\n\n5.7 Geometric Objects: geom_boxplot\ngeom_boxplot() displays continuous value list. It visualises five summary statistics (the median, two hinges and two whiskers), and all “outlying” points individually.\nThe code chunk below plots boxplots by using geom_boxplot().\n\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot()            \n\n\n\n\n\n\n\n\nNotches are used in box plots to help visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.\nThe code chunk below plots the distribution of Maths scores by gender in notched plot instead of boxplot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nGenerally, the notches serve as a visual indicator of the confidence interval around the median.\nNotched Box Plots are particularly useful in assessing whether the medians are meaningfully different across groups.\n\n\n\n\n5.8 Geometric Objects: geom_violin\ngeom_violin is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed side by side.\nThe code below plot the distribution of Maths score by gender in violin plot.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe shape of the violin represents the density of the data at different values. Wider sections indicate higher data concentration.\nSome factors to consider when interpreting violin plots include the shape of the violin (width, number of peaks, etc.) and its symmetry. Symmetry represents the skewness of the data.\n\n\n\n\n5.9 Geometric Objects: geom_point\ngeom_point() is especially useful for creating scatterplot.\nThe code chunk below plots a scatterplot showing the Maths and English grades of pupils by using geom_point().\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()            \n\n\n\n\n\n\n\n\n\n\n5.10 Geom Objects can be Combined\nThe code chunk below plots the data points on the boxplots by using both geom_boxplot() and geom_point().\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-stat",
    "href": "Hands-on Exercise/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-stat",
    "title": "Hands-on Exercise 01: A Layered Grammar of Graphics: ggplot2 Methods",
    "section": "6.0 Essential Grammatical Elements in ggplot2: stat",
    "text": "6.0 Essential Grammatical Elements in ggplot2: stat\n\n6.1 Working with stat( )\nThe boxplots below are incomplete because the positions of the means were not shown.\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\n\n6.2 Working with stat - the stat_summary( ) Method\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun = \"mean\",         \n               colour =\"red\",        \n               size=4)               \n\n\n\n\n\n\n\n\n\n\n6.3 Working with stat - the geom( ) Method\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun=\"mean\",           \n             colour=\"red\",          \n             size=4)          \n\n\n\n\n\n\n\n\n\n\n6.4 Adding a Best Fit Curve on a Scatterplot\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(size=0.5)\n\n\n\n\n\n\n\n\nThe default method used is loess. The default smoothing method can be overridden as shown below.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-facets",
    "href": "Hands-on Exercise/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-facets",
    "title": "Hands-on Exercise 01: A Layered Grammar of Graphics: ggplot2 Methods",
    "section": "7.0 Essential Grammatical Elements in ggplot2: Facets",
    "text": "7.0 Essential Grammatical Elements in ggplot2: Facets\nFacetting generates small multiples (sometimes also called trellis plot), each displaying a different subset of the data. They are an alternative to aesthetics for displaying additional discrete variables.\n\n7.1 Working with facet_wrap\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)\n\n\n\n\n\n\n\n\n\n\n7.2 facet_grid() Function\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-coordinates",
    "href": "Hands-on Exercise/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-coordinates",
    "title": "Hands-on Exercise 01: A Layered Grammar of Graphics: ggplot2 Methods",
    "section": "8.0 Essential Grammatical Elements in ggplot2: Coordinates",
    "text": "8.0 Essential Grammatical Elements in ggplot2: Coordinates\n\n8.1 Working with Coordinates\nBy default, the bar chart of ggplot2 is in vertical form.\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\n\nHowever, you can flip the bar chart into a horizontal bar chart.\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()\n\n\n\n\n\n\n\n\n\n\n8.2 Changing the y- and x-axis Range\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=0.5)\n\n\n\n\n\n\n\n\nFixing both y-axis and x-axis range from 0 to 100.\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-theme",
    "href": "Hands-on Exercise/Hands-on_Ex01/Hands-on_Ex01.html#essential-grammatical-elements-in-ggplot2-theme",
    "title": "Hands-on Exercise 01: A Layered Grammar of Graphics: ggplot2 Methods",
    "section": "9.0 Essential Grammatical Elements in ggplot2: Theme",
    "text": "9.0 Essential Grammatical Elements in ggplot2: Theme\nThemes control elements of the graph not related to the data,\n\n9.1 Working with theme\n\ntheme_gray()theme_classic()theme_minimal()\n\n\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex00/Hands-on_Ex00.html",
    "href": "Hands-on Exercise/Hands-on_Ex00/Hands-on_Ex00.html",
    "title": "Hands-on Exercise 00: Working with tidyverse",
    "section": "",
    "text": "Loading tidyverse onto the R environment by using the code chunk below:\n\npacman::p_load(tidyverse)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex00/Hands-on_Ex00.html#getting-started",
    "href": "Hands-on Exercise/Hands-on_Ex00/Hands-on_Ex00.html#getting-started",
    "title": "Hands-on Exercise 00: Working with tidyverse",
    "section": "",
    "text": "Loading tidyverse onto the R environment by using the code chunk below:\n\npacman::p_load(tidyverse)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex00/Hands-on_Ex00.html#importing-data",
    "href": "Hands-on Exercise/Hands-on_Ex00/Hands-on_Ex00.html#importing-data",
    "title": "Hands-on Exercise 00: Working with tidyverse",
    "section": "Importing Data",
    "text": "Importing Data\nThe code chunk below uses read_csv() of readr to import REALIS2019.csv into the R environment as a tibble data frame.\n\nrealis2019 &lt;- read_csv(\"data/REALIS2019.csv\")\n\n\npopdata_fat &lt;- read_csv(\"data/PopData2019_fat.csv\")"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex00/Hands-on_Ex00.html#pivoting-data",
    "href": "Hands-on Exercise/Hands-on_Ex00/Hands-on_Ex00.html#pivoting-data",
    "title": "Hands-on Exercise 00: Working with tidyverse",
    "section": "Pivoting Data",
    "text": "Pivoting Data\n\npopdata_long &lt;- popdata_fat %&gt;%\n  pivot_longer(c(3:21),\n               names_to = \"Age Group\",\n               values_to = \"Population\")\n\n\nwrite_rds(popdata_long,\"rds/popdata_long.rds\")"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex00/Hands-on_Ex00.html#working-with-dplyr",
    "href": "Hands-on Exercise/Hands-on_Ex00/Hands-on_Ex00.html#working-with-dplyr",
    "title": "Hands-on Exercise 00: Working with tidyverse",
    "section": "Working with dplyr",
    "text": "Working with dplyr\n\nrealis2019_selected &lt;- realis2019 %&gt;%\n  select('Project Name',\n         'Transacted Price ($)',\n         'Type of Sale',\n         'Unit Price ($ psm)',\n         'Property Type')\nrealis2019_selected\n\n# A tibble: 19,515 × 5\n   `Project Name`     `Transacted Price ($)` `Type of Sale` `Unit Price ($ psm)`\n   &lt;chr&gt;                               &lt;dbl&gt; &lt;chr&gt;                         &lt;dbl&gt;\n 1 PEIRCE VIEW                        840000 Resale                         7434\n 2 FLORIDA PARK                      3040000 Resale                         9737\n 3 BULLION PARK                       860000 Resale                        11467\n 4 CASTLE GREEN                      1000000 Resale                         9346\n 5 HAPPY ESTATE                      7000000 Resale                        10183\n 6 TEACHER'S HOUSING…                2880000 Resale                        12659\n 7 THE PANORAMA                      1510000 Resale                        16064\n 8 THE PANORAMA                       710000 Resale                        16905\n 9 CHIP THYE GARDEN                  2800000 Resale                        13500\n10 TEACHER'S HOUSING…                2300000 Resale                         9935\n# ℹ 19,505 more rows\n# ℹ 1 more variable: `Property Type` &lt;chr&gt;\n\n\nTake note that only the first ten results of a tibble data frame would be displayed."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex00/Hands-on_Ex00.html#working-with-filter-of-dplyr",
    "href": "Hands-on Exercise/Hands-on_Ex00/Hands-on_Ex00.html#working-with-filter-of-dplyr",
    "title": "Hands-on Exercise 00: Working with tidyverse",
    "section": "Working with filter() of dplyr",
    "text": "Working with filter() of dplyr\n\nrealis2019_filtered &lt;- realis2019_selected %&gt;%\n  filter(`Property Type` == \"Condominium\" |\n           `Property Type` == \"Apartment\") %&gt;%\n  filter(`Type of Sale` == \"New Sale\") %&gt;%\n  filter(`Unit Price ($ psm)` &lt;= 13000)\n\nrealis2019_filtered\n\n# A tibble: 87 × 5\n   `Project Name`     `Transacted Price ($)` `Type of Sale` `Unit Price ($ psm)`\n   &lt;chr&gt;                               &lt;dbl&gt; &lt;chr&gt;                         &lt;dbl&gt;\n 1 RIVERFRONT RESIDE…                1029000 New Sale                      12863\n 2 RIVERFRONT RESIDE…                 871000 New Sale                      12809\n 3 RIVERFRONT RESIDE…                1940000 New Sale                      12848\n 4 RIVERFRONT RESIDE…                1030000 New Sale                      12875\n 5 RIVERFRONT RESIDE…                2061000 New Sale                      12962\n 6 RIVERFRONT RESIDE…                 762000 New Sale                      12915\n 7 RIVERFRONT RESIDE…                1001000 New Sale                      12513\n 8 RIVERFRONT RESIDE…                1271000 New Sale                      12838\n 9 RIVERFRONT RESIDE…                1310000 New Sale                      12970\n10 RIVERFRONT RESIDE…                1339000 New Sale                      13000\n# ℹ 77 more rows\n# ℹ 1 more variable: `Property Type` &lt;chr&gt;\n\n\n\nPutting It All Together\nAlternatively, you can combine the select() and filter() functions together as shown in the code chunk below:\n\nrealis2019_filtered2 &lt;- realis2019 %&gt;%\n  select('Project Name',\n         'Transacted Price ($)',\n         'Type of Sale',\n         'Unit Price ($ psm)',\n         'Property Type') %&gt;%\n  filter(`Property Type` == \"Condominium\" |\n           `Property Type` == \"Apartment\") %&gt;%\n  filter(`Type of Sale` == \"New Sale\") %&gt;%\n  filter(`Unit Price ($ psm)` &lt;= 13000)\n\nrealis2019_filtered2\n\n# A tibble: 87 × 5\n   `Project Name`     `Transacted Price ($)` `Type of Sale` `Unit Price ($ psm)`\n   &lt;chr&gt;                               &lt;dbl&gt; &lt;chr&gt;                         &lt;dbl&gt;\n 1 RIVERFRONT RESIDE…                1029000 New Sale                      12863\n 2 RIVERFRONT RESIDE…                 871000 New Sale                      12809\n 3 RIVERFRONT RESIDE…                1940000 New Sale                      12848\n 4 RIVERFRONT RESIDE…                1030000 New Sale                      12875\n 5 RIVERFRONT RESIDE…                2061000 New Sale                      12962\n 6 RIVERFRONT RESIDE…                 762000 New Sale                      12915\n 7 RIVERFRONT RESIDE…                1001000 New Sale                      12513\n 8 RIVERFRONT RESIDE…                1271000 New Sale                      12838\n 9 RIVERFRONT RESIDE…                1310000 New Sale                      12970\n10 RIVERFRONT RESIDE…                1339000 New Sale                      13000\n# ℹ 77 more rows\n# ℹ 1 more variable: `Property Type` &lt;chr&gt;"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex01/Hands-on_Ex01.html#getting-started",
    "href": "Hands-on Exercise/Hands-on_Ex01/Hands-on_Ex01.html#getting-started",
    "title": "Hands-on Exercise 01: A Layered Grammar of Graphics: ggplot2 Methods",
    "section": "",
    "text": "pacman::p_load(tidyverse)\n\n\n\n\nThe code chunk below imports exam_data.csv into R environment by using the read_csv() function of the readr package.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nThere data set contains seven attributes:\n\nCategorical Attributes: ID, CLASS, GENDER and RACE. These columns are denoted as chr (“character type”).\nContinuous Attributes: ENGLISH, MATHS, and SCIENCE. These columns are stored as dbl (“double type”), i.e. numeric values."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex01/Hands-on_Ex01.html#introducing-ggplot",
    "href": "Hands-on Exercise/Hands-on_Ex01/Hands-on_Ex01.html#introducing-ggplot",
    "title": "Hands-on Exercise 01: A Layered Grammar of Graphics: ggplot2 Methods",
    "section": "2.0 Introducing ggplot",
    "text": "2.0 Introducing ggplot\n\n2.1 R Graphics vs. ggplot\nThe tabset below compares how R Graphics and ggplot plot a simple histogram:\n\nR Graphicsggplot2\n\n\n\nhist(exam_data$MATHS)\n\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths Scores\")\n\n\n\n\n\n\n\n\n\n\n\n\n2.1.1 Side Note: Attempting to Customise the R Graphics Histogram\nThe code chunk below customises the R Graphics histogram so that it’s similar to the ggplot2 histogram.\n\nhist(exam_data$MATHS, \n     breaks = 20,                     \n     col = \"grey\",                \n     border = \"black\",                 \n     main = \"Distribution of Maths Scores\",  \n     xlab = \"MATHS\",            \n     ylab = \"Count\")               \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nAfter plotting the histograms using both R Graphics and ggplot2, I noted the following:\n\nX-Axis Labels: R Graphics automatically labels the x-axis with the column reference (“exam_data$MATHS”). This reduces the plot’s readability and interpretability as it directly reflects the code rather than a clear, descriptive label. On the other hand, ggplot2 retains the column name (”MATHS”) as the x-axis label, providing a more intuitive presentation by default.\nLayers: ggplot2 uses a layered approach, where data, aesthetics and geometric objects are added step-by-step using +."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex01/Hands-on_Ex01.html#reference",
    "href": "Hands-on Exercise/Hands-on_Ex01/Hands-on_Ex01.html#reference",
    "title": "Hands-on Exercise 01: A Layered Grammar of Graphics: ggplot2 Methods",
    "section": "10.0 Reference",
    "text": "10.0 Reference\n\nHadley Wickham (2023) ggplot2: Elegant Graphics for Data Analysis. Online 3rd edition.\nWinston Chang (2013) R Graphics Cookbook 2nd edition. Online version.\nHealy, Kieran (2019) Data Visualization: A practical introduction. Online version\nLearning ggplot2 on Paper – Components\nLearning ggplot2 on Paper – Layer\nLearning ggplot2 on Paper – Scale"
  },
  {
    "objectID": "index.html#latest-posts",
    "href": "index.html#latest-posts",
    "title": "ISSS608 Visual Analytics and Applications",
    "section": "Latest Posts",
    "text": "Latest Posts\n\n\n\n\n\n\n\n\nHands-on Exercise 5.5: Treemap Visualisation with R\n\n\n\n\n\n\nSheryl Ann Tan Yi-Shi\n\n\nFeb 8, 2025\n\n\n\n\n\n\n\n\n\n\n\n\nHands-on Exercise 5.4: Visual Multivariate Analysis with Parallel Coordinates Plot\n\n\n\n\n\n\nSheryl Ann Tan Yi-Shi\n\n\nFeb 8, 2025\n\n\n\n\n\n\n\n\n\n\n\n\nHands-on Exercise 5.3: Heatmap for Visualising and Analysing Multivariate Data\n\n\n\n\n\n\nSheryl Ann Tan Yi-Shi\n\n\nFeb 8, 2025\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex02/Hands-on_Ex02.html",
    "href": "Hands-on Exercise/Hands-on_Ex02/Hands-on_Ex02.html",
    "title": "Hands-on Exercise 02: Beyond ggplot2 Fundamentals",
    "section": "",
    "text": "The following R packages will be used:\n\nggrepel: Provides geoms for ggplot2 to repel overlapping text labels.\nggthemes: Provides extra themes, geoms and scales for ggplot2.\nhrbrthemes: Provides typography-centric themes and theme components for ggplot2.\npatchwork: Prepares composite figure created using ggplot2.\n\n\npacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse) \n\n\n\n\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex02/Hands-on_Ex02.html#installing-and-loading-the-required-libraries",
    "href": "Hands-on Exercise/Hands-on_Ex02/Hands-on_Ex02.html#installing-and-loading-the-required-libraries",
    "title": "Hands-on Exercise 02: Beyond ggplot2 Fundamentals",
    "section": "",
    "text": "The following R packages will be used:\n\nggrepel: Provides geoms for ggplot2 to repel overlapping text labels.\nggthemes: Provides extra themes, geoms and scales for ggplot2.\nhrbrthemes: Provides typography-centric themes and theme components for ggplot2.\npatchwork: Prepares composite figure created using ggplot2.\n\n\npacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex02/Hands-on_Ex02.html#importing-data",
    "href": "Hands-on Exercise/Hands-on_Ex02/Hands-on_Ex02.html#importing-data",
    "title": "Hands-on Exercise 02: Beyond ggplot2 Fundamentals",
    "section": "",
    "text": "exam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggrepel.",
    "href": "Hands-on Exercise/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggrepel.",
    "title": "Hands-on Exercise 02: Beyond ggplot2 Fundamentals",
    "section": "2.1 Working with ggrepel.",
    "text": "2.1 Working with ggrepel.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\ngeom_label_repel(aes(label = ID), fontface = “bold”): Replaces geom_label to dynamically adjust label positions and prevent overlapping.\nThe density of points in certain regions of the graph may lead to labels being omitted.\n\n\n\n2.1.1 Exploring Other Arguments in geom_label_repel\nA list of arguments that can be used with geom_label_repel() can be found here."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex02/Hands-on_Ex02.html#max.overlaps",
    "href": "Hands-on Exercise/Hands-on_Ex02/Hands-on_Ex02.html#max.overlaps",
    "title": "Hands-on Exercise 02: Beyond ggplot2 Fundamentals",
    "section": "max.overlaps",
    "text": "max.overlaps\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\",\n                   max.overlaps=20) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nmax.overlaps\nBy default, geom_label_repel exclude text labels when they overlap too many other labels. The default is 10. Increasing the max.overlaps argument would increase the number of labels displayed in the graph."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggrepel",
    "href": "Hands-on Exercise/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggrepel",
    "title": "Hands-on Exercise 02: Beyond ggplot2 Fundamentals",
    "section": "2.1 Working with ggrepel",
    "text": "2.1 Working with ggrepel\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\ngeom_label_repel(aes(label = ID), fontface = \"bold\"): Replaces geom_label() to dynamically adjust label positions and prevent overlapping.\nThe density of points in certain regions of the graph may lead to labels being omitted.\n\n\n\n2.1.1 Exploring Other Arguments in geom_label_repel\nA list of arguments that can be used with geom_label_repel() can be found here.\nmax.overlaps\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\",\n                   max.overlaps=20) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nmax.overlaps\nBy default, geom_label_repel exclude text labels when they overlap too many other labels. The default is 10. Increasing the max.overlaps argument would increase the number of labels displayed in the graph."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggtheme-package",
    "href": "Hands-on Exercise/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggtheme-package",
    "title": "Hands-on Exercise 02: Beyond ggplot2 Fundamentals",
    "section": "3.1 Working with ggtheme Package",
    "text": "3.1 Working with ggtheme Package\nIn the example below, The Economist theme is used.\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex02/Hands-on_Ex02.html#working-with-hrbthems-package",
    "href": "Hands-on Exercise/Hands-on_Ex02/Hands-on_Ex02.html#working-with-hrbthems-package",
    "title": "Hands-on Exercise 02: Beyond ggplot2 Fundamentals",
    "section": "3.2 Working with hrbthems Package",
    "text": "3.2 Working with hrbthems Package\nThe hrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed, and fonts that are used.\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\naxis_title_size: Adjust the font size of the axis title.\nbase_size: Adjust the font size of the axis labels.\ngrid: Remove the x-axis grid lines."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex02/Hands-on_Ex02.html#creating-composite-graphics-patchwork-methods",
    "href": "Hands-on Exercise/Hands-on_Ex02/Hands-on_Ex02.html#creating-composite-graphics-patchwork-methods",
    "title": "Hands-on Exercise 02: Beyond ggplot2 Fundamentals",
    "section": "4.1 Creating Composite Graphics: patchwork Methods",
    "text": "4.1 Creating Composite Graphics: patchwork Methods\nGenerally syntax that can be used:\n\n+: Used to create a two-column layout\n( ): Used to create a subplot group.\n/: Used to create a two-row layout.\n\n\n4.1.1 Combining Two ggplot2 Graphs\n\nUsing +Using ()Using /\n\n\n\np1 + p2\n\n\n\n\n\n\n\n\n\n\n\n(p1 + p2)/p1\n\n\n\n\n\n\n\n\n\n\n\np1 / p3\n\n\n\n\n\n\n\n\n\n\n\n\n\n4.1.2 Combining Three ggplot2 Graphs\nThe following syntax can be used:\n\n/: Used to stack two graphs.\n|: Used to place the plots beside each other.\n( ): Used to define the sequence of the plotting.\n\n\n(p1 / p2) | p3\n\n\n\n\n\n\n\n\n\n\n4.1.3 Creating a Composite Figure with Tag\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nplot_annotation(): Adds annotations to the composite plot.\ntag_levels = 'I': Automatically tags each subplot with Roman numerals. Other options for tag_levels include: A, a, 1\n\n\n\n\n4.1.3.1 Other Arguments for plot_annotation()\nA list of arguments that can be used with plot_annotation() can be found here.\nUsing tag_prefix:\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = '1', tag_prefix=\"Figure \")\n\n\n\n\n\n\n\n\n\n\n\n4.1.4 Creating Figure with inset\ninset_element() of patchwork enables us to place several plots or graphic elements freely on top or below another plot.\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n\n\n\n\n\n\n\n\n\n4.1.5 Creating a Composite Figure by Using patchwork and ggtheme\n\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_economist()\n\n\n\n\n\n\n\n\n\n\n4.1.6 Attempting to Modify the Plot in 4.1.5\nAs the plot title of p3 was cut off, with the titles of p2 overlapping p3, we will attempt to modify the plot by reducing the title size. At the same time, I will also try other themes.\n\nReducing the Title SizeUsing theme_wsj()\n\n\nAdding plot.title = element_text(size=10) will reduce the respective plots’ title size.\n\npatchwork & \n  theme_economist() & \n  theme(\n    plot.title = element_text(size = 9),        # Reduce plot title size\n    axis.text = element_text(size = 6),         # Reduce axis tick text size\n    axis.title = element_text(size = 6)         # Reduce axis labels size\n  )\n\n\n\n\n\n\n\n\n\n\n\npatchwork & \n  theme_wsj() & \n  theme(\n    plot.title = element_text(size = 8),        # Reduce plot title size\n    axis.text = element_text(size = 6),         # Reduce axis tick text size\n    axis.title = element_text(size = 6)         # Reduce axis labels size\n  )"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex02/Hands-on_Ex02.html#disclaimer",
    "href": "Hands-on Exercise/Hands-on_Ex02/Hands-on_Ex02.html#disclaimer",
    "title": "Hands-on Exercise 02: Beyond ggplot2 Fundamentals",
    "section": "5.1 Disclaimer",
    "text": "5.1 Disclaimer\nThis document includes content written with the assistance of ChatGPT, which was used for grammar correction and the explanation of arguments for the various packages."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html",
    "href": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html",
    "title": "Hands-on Exercise 3.1: Programming Interactive Data Visualisation with R",
    "section": "",
    "text": "The following R packages would installed and loaded:\n\n\n\nR Package\nDescription\n\n\n\n\nggiraph\nMakes ggplot graphics interactive.\n\n\nplotly\nPlots interactive statistical graphs.\n\n\nDT\nCreates interactive tables on a html page.\n\n\ntidyverse\n\n\n\npatchwork\nCombines multiple ggplot2 graphs into one figure.\n\n\n\n\npacman::p_load(ggiraph, plotly, \n               patchwork, DT, tidyverse) \n\n\n\n\nThe code chunk below uses read_csv( ) to import the Exam_data.csv data file into R and save it as a tibble data frame called exam_data.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#importing-data",
    "href": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#importing-data",
    "title": "Hands-on Exercise 3.1: Programming Interactive Data Visualisation with R",
    "section": "",
    "text": "The code chunk below uses read_csv( ) to import the Exam_data.csv data file into R and save it as a tibble data frame called exam_data.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#tooltip-effect-with-tooltip-aesthetic",
    "href": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#tooltip-effect-with-tooltip-aesthetic",
    "title": "Hands-on Exercise 3.1: Programming Interactive Data Visualisation with R",
    "section": "2.1 Tooltip Effect with tooltip Aesthetic",
    "text": "2.1 Tooltip Effect with tooltip Aesthetic\nThe code chunk below plots an interactive statistical graph using the ggiraph package.\nThe code chunk consists of the following parts:\n\nGgplot object, and\ngirafe( ) of ggiraph will be used to create an interactive svg object.\n\ngeom_dotplot_interactive( ) will be used to create a basic graph while girafe( ) will be used to generate a svg object to be displayed on a html page.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#displaying-multiple-information-on-tooltip",
    "href": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#displaying-multiple-information-on-tooltip",
    "title": "Hands-on Exercise 3.1: Programming Interactive Data Visualisation with R",
    "section": "3.1 Displaying Multiple Information on tooltip",
    "text": "3.1 Displaying Multiple Information on tooltip\nThe code chunk below can be customised by including a list object:\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) # Modify the tooltip here.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#customising-tooltip-style",
    "href": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#customising-tooltip-style",
    "title": "Hands-on Exercise 3.1: Programming Interactive Data Visualisation with R",
    "section": "3.2 Customising tooltip Style",
    "text": "3.2 Customising tooltip Style\nopts_tooltip( ) of ggiraph customises tooltip rendering by adding CSS declarations.\n\ntooltip_css &lt;- \"background-color:white; #&lt;&lt;\nfont-style:bold; color:black;\" #&lt;&lt;\n\n# CSS declarations in the code above.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID),                   \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(    #&lt;&lt;\n    opts_tooltip(    #&lt;&lt;\n      css = tooltip_css)) #&lt;&lt;\n)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#displaying-statistics-on-tooltip",
    "href": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#displaying-statistics-on-tooltip",
    "title": "Hands-on Exercise 3.1: Programming Interactive Data Visualisation with R",
    "section": "3.3 Displaying Statistics on tooltip",
    "text": "3.3 Displaying Statistics on tooltip\nThe code chunk below uses a function to compute 90% confidence interval of the mean. The derived statistics are then displayed in the tooltip.\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#hover-effect-with-data_id-aesthetic",
    "href": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#hover-effect-with-data_id-aesthetic",
    "title": "Hands-on Exercise 3.1: Programming Interactive Data Visualisation with R",
    "section": "3.4 Hover Effect with data_id Aesthetic",
    "text": "3.4 Hover Effect with data_id Aesthetic\nElements associated with data_id will be highlighted upon mouse over. The default value of the hover css is hover_css=\"fill:orange;\".\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(           \n    aes(data_id = CLASS),             \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#styling-hover-effect",
    "href": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#styling-hover-effect",
    "title": "Hands-on Exercise 3.1: Programming Interactive Data Visualisation with R",
    "section": "3.5 Styling Hover Effect",
    "text": "3.5 Styling Hover Effect\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"), #  Highlighted elements in #202020 colour.\n    opts_hover_inv(css = \"opacity:0.2;\") # Non-highlighted elements would have lower opacity.\n  )                                        \n)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#combining-tooltip-and-hover-effects",
    "href": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#combining-tooltip-and-hover-effects",
    "title": "Hands-on Exercise 3.1: Programming Interactive Data Visualisation with R",
    "section": "3.6 Combining tooltip and hover Effects",
    "text": "3.6 Combining tooltip and hover Effects\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#click-effect-with-onclick",
    "href": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#click-effect-with-onclick",
    "title": "Hands-on Exercise 3.1: Programming Interactive Data Visualisation with R",
    "section": "3.7 Click Effect with onclick",
    "text": "3.7 Click Effect with onclick\nThe data object would link to a web document, which would be displayed in a new window once clicked.\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#coordinated-multiple-views-with-ggiraph",
    "href": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#coordinated-multiple-views-with-ggiraph",
    "title": "Hands-on Exercise 3.1: Programming Interactive Data Visualisation with R",
    "section": "3.8 Coordinated Multiple Views with ggiraph",
    "text": "3.8 Coordinated Multiple Views with ggiraph\n\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), # patchwork\n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n\n\n\n\n\n\nWhen a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\npatchwork will be used inside the girafe function to create the interactive coordinated multiple views."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#creating-an-interactive-scatter-plot-plot_ly-method",
    "href": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#creating-an-interactive-scatter-plot-plot_ly-method",
    "title": "Hands-on Exercise 3.1: Programming Interactive Data Visualisation with R",
    "section": "4.1 Creating an Interactive Scatter Plot: plot_ly( ) Method",
    "text": "4.1 Creating an Interactive Scatter Plot: plot_ly( ) Method\n\nplot_ly(data = exam_data, \n             x = ~MATHS, \n             y = ~ENGLISH)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#working-with-visual-variable-plot_ly-method",
    "href": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#working-with-visual-variable-plot_ly-method",
    "title": "Hands-on Exercise 3.1: Programming Interactive Data Visualisation with R",
    "section": "4.2 Working with Visual Variable: plot_ly( ) Method",
    "text": "4.2 Working with Visual Variable: plot_ly( ) Method\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#creating-an-interactive-scatterplot-ggplotly-method",
    "href": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#creating-an-interactive-scatterplot-ggplotly-method",
    "title": "Hands-on Exercise 3.1: Programming Interactive Data Visualisation with R",
    "section": "4.3 Creating an Interactive Scatterplot: ggplotly( ) Method",
    "text": "4.3 Creating an Interactive Scatterplot: ggplotly( ) Method\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#coordinated-multiple-views-with-plotly",
    "href": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#coordinated-multiple-views-with-plotly",
    "title": "Hands-on Exercise 3.1: Programming Interactive Data Visualisation with R",
    "section": "4.4 Coordinated Multiple Views with plotly",
    "text": "4.4 Coordinated Multiple Views with plotly\n\nhighlight_key( ) is used as shared data\nTwo scatterplots would be created via ggplot2\nsubplot( ) will be used to place them next to each other.\n\n\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-table-dt-package",
    "href": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#interactive-data-table-dt-package",
    "title": "Hands-on Exercise 3.1: Programming Interactive Data Visualisation with R",
    "section": "5.1 Interactive Data Table: DT Package",
    "text": "5.1 Interactive Data Table: DT Package\n\nDT::datatable(exam_data, class= \"compact\")"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#linked-brushing-crosstalk-method",
    "href": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#linked-brushing-crosstalk-method",
    "title": "Hands-on Exercise 3.1: Programming Interactive Data Visualisation with R",
    "section": "5.2 Linked Brushing: crosstalk Method",
    "text": "5.2 Linked Brushing: crosstalk Method\n\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#disclaimer",
    "href": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#disclaimer",
    "title": "Hands-on Exercise 3.1: Programming Interactive Data Visualisation with R",
    "section": "7.1 Disclaimer",
    "text": "7.1 Disclaimer\nThis document includes content written with the assistance of ChatGPT, which was used for grammar correction and the explanation of arguments for the various packages."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#loading-the-r-packages",
    "href": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#loading-the-r-packages",
    "title": "Hands-on Exercise 3.1: Programming Interactive Data Visualisation with R",
    "section": "",
    "text": "The following R packages would installed and loaded:\n\n\n\nR Package\nDescription\n\n\n\n\nggiraph\nMakes ggplot graphics interactive.\n\n\nplotly\nPlots interactive statistical graphs.\n\n\nDT\nCreates interactive tables on a html page.\n\n\ntidyverse\n\n\n\npatchwork\nCombines multiple ggplot2 graphs into one figure.\n\n\n\n\npacman::p_load(ggiraph, plotly, \n               patchwork, DT, tidyverse)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03b.html",
    "href": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03b.html",
    "title": "Hands-on Exercise 3.2: Programming Animated Statistical Graphics with R",
    "section": "",
    "text": "The following code chunk imports and loads the following R packages:\n\n\n\n\n\n\n\nR Package\nDescription\n\n\n\n\ngifski\nConverts image frames into high-quality GIF animations.\n\n\ngganimate\nA ggplot extension for creating animated statistical graphs.\n\n\ngapminder\nAn excerpt of the data available at Gapminder.org. The country_colors scheme will be used in this exercise.\n\n\n\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)\n\n\n\n\nThe following code chunk is used to import the Data worksheet from GlobalPopulation Excel workbook into R:\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_each_(funs(factor(.)), col) %&gt;%\n  mutate(Year = as.integer(Year))\n\nmutate_each( ) of the dplyr package is used to convert all data type into factor. In R, a factor is a data type that is used to represent categorical data.\nHowever, mutate_each( ) and funs( ) were deprecated in dplyr 0.7.0 and dplyr 0.8.0 respectively. As such, the code chunk will be re-written using mutate_at( ).\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))\n\nAlternatively, across( ) can also be used to derive the same outputs.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate(across(col, as.factor)) %&gt;%\n  mutate(Year = as.integer(Year))"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03b.html#loading-the-r-packages",
    "href": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03b.html#loading-the-r-packages",
    "title": "Hands-on Exercise 3.2: Programming Animated Statistical Graphics with R",
    "section": "",
    "text": "The following code chunk imports and loads the following R packages:\n\n\n\n\n\n\n\nR Package\nDescription\n\n\n\n\ngifski\nConverts image frames into high-quality GIF animations.\n\n\ngganimate\nA ggplot extension for creating animated statistical graphs.\n\n\ngapminder\nAn excerpt of the data available at Gapminder.org. The country_colors scheme will be used in this exercise.\n\n\n\n\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03b.html#importing-the-data",
    "href": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03b.html#importing-the-data",
    "title": "Hands-on Exercise 3.2: Programming Animated Statistical Graphics with R",
    "section": "",
    "text": "The following code chunk is used to import the Data worksheet from GlobalPopulation Excel workbook into R:\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_each_(funs(factor(.)), col) %&gt;%\n  mutate(Year = as.integer(Year))\n\nmutate_each( ) of the dplyr package is used to convert all data type into factor. In R, a factor is a data type that is used to represent categorical data.\nHowever, mutate_each( ) and funs( ) were deprecated in dplyr 0.7.0 and dplyr 0.8.0 respectively. As such, the code chunk will be re-written using mutate_at( ).\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))\n\nAlternatively, across( ) can also be used to derive the same outputs.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate(across(col, as.factor)) %&gt;%\n  mutate(Year = as.integer(Year))"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03b.html#building-a-static-population-bubble-plot",
    "href": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03b.html#building-a-static-population-bubble-plot",
    "title": "Hands-on Exercise 3.2: Programming Animated Statistical Graphics with R",
    "section": "2.1 Building a Static Population Bubble Plot",
    "text": "2.1 Building a Static Population Bubble Plot\nThe code chunk below uses the basic ggplot2 functions to create a static bubble plot:\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young')"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03b.html#building-an-animated-bubble-plot",
    "href": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03b.html#building-an-animated-bubble-plot",
    "title": "Hands-on Exercise 3.2: Programming Animated Statistical Graphics with R",
    "section": "2.2 Building an Animated Bubble Plot",
    "text": "2.2 Building an Animated Bubble Plot\n\ntransition_time( ) is used to create the transition through distinct states of time.\nease_aes( ) is used to control the easing of aesthetics. The default is linear. Other methods include quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce. For example, cubic-in-out would start with the animation slowly easing in, speeding up in the middle and then slowly easing out.\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03b.html#building-an-animated-bubble-plot-ggplotly-method",
    "href": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03b.html#building-an-animated-bubble-plot-ggplotly-method",
    "title": "Hands-on Exercise 3.2: Programming Animated Statistical Graphics with R",
    "section": "3.1 Building an Animated Bubble Plot: ggplotly( ) Method",
    "text": "3.1 Building an Animated Bubble Plot: ggplotly( ) Method\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nggplotly(gg)\n\n\n\n\n\nThe animated bubble plot includes a play/pause button and a slider to control the animation.\nAlthough show.legend = FALSE was used, the legend still appears on the plot. Hence, theme(legend.position='none') will be used to replace the affected code chunk.\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nggplotly(gg)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03b.html#building-an-animated-bubble-plot-plot_ly-method",
    "href": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03b.html#building-an-animated-bubble-plot-plot_ly-method",
    "title": "Hands-on Exercise 3.2: Programming Animated Statistical Graphics with R",
    "section": "3.2 Building an Animated Bubble Plot: plot_ly( ) Method",
    "text": "3.2 Building an Animated Bubble Plot: plot_ly( ) Method\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03b.html#disclaimer",
    "href": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03b.html#disclaimer",
    "title": "Hands-on Exercise 3.2: Programming Animated Statistical Graphics with R",
    "section": "5.1 Disclaimer",
    "text": "5.1 Disclaimer\nThis document includes content written with the assistance of ChatGPT, which was used for grammar and code correction, and the explanation of arguments for the various packages."
  },
  {
    "objectID": "index.html#welcome",
    "href": "index.html#welcome",
    "title": "ISSS608 Visual Analytics and Applications",
    "section": "Welcome",
    "text": "Welcome\nHello and welcome to my webpage for ISSS608 Visual Analytics and Applications taught by Prof. Kam Tin Seong. Here, you'll find my coursework and projects for the module. Enjoy!"
  },
  {
    "objectID": "index.html#explore",
    "href": "index.html#explore",
    "title": "ISSS608 Visual Analytics and Applications",
    "section": "Explore",
    "text": "Explore"
  },
  {
    "objectID": "Hands-on_Ex_Landing.html",
    "href": "Hands-on_Ex_Landing.html",
    "title": "Hands-on Exercise Landing Page",
    "section": "",
    "text": "Sheryl Ann Tan Yi-Shi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSheryl Ann Tan Yi-Shi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSheryl Ann Tan Yi-Shi\n\n\nJan 19, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSheryl Ann Tan Yi-Shi\n\n\nJan 26, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSheryl Ann Tan Yi-Shi\n\n\nJan 26, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSheryl Ann Tan Yi-Shi\n\n\nFeb 1, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSheryl Ann Tan Yi-Shi\n\n\nFeb 1, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSheryl Ann Tan Yi-Shi\n\n\nFeb 1, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSheryl Ann Tan Yi-Shi\n\n\nFeb 1, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSheryl Ann Tan Yi-Shi\n\n\nFeb 8, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSheryl Ann Tan Yi-Shi\n\n\nFeb 8, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSheryl Ann Tan Yi-Shi\n\n\nFeb 8, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSheryl Ann Tan Yi-Shi\n\n\nFeb 8, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSheryl Ann Tan Yi-Shi\n\n\nFeb 8, 2025\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "Hands-on_Ex_Landing.html#overview-of-hands-on-exercises",
    "href": "Hands-on_Ex_Landing.html#overview-of-hands-on-exercises",
    "title": "Hands-on Exercise Landing Page",
    "section": "",
    "text": "Sheryl Ann Tan Yi-Shi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSheryl Ann Tan Yi-Shi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSheryl Ann Tan Yi-Shi\n\n\nJan 19, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSheryl Ann Tan Yi-Shi\n\n\nJan 26, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSheryl Ann Tan Yi-Shi\n\n\nJan 26, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSheryl Ann Tan Yi-Shi\n\n\nFeb 1, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSheryl Ann Tan Yi-Shi\n\n\nFeb 1, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSheryl Ann Tan Yi-Shi\n\n\nFeb 1, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSheryl Ann Tan Yi-Shi\n\n\nFeb 1, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSheryl Ann Tan Yi-Shi\n\n\nFeb 8, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSheryl Ann Tan Yi-Shi\n\n\nFeb 8, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSheryl Ann Tan Yi-Shi\n\n\nFeb 8, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSheryl Ann Tan Yi-Shi\n\n\nFeb 8, 2025\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSheryl Ann Tan Yi-Shi\n\n\nFeb 8, 2025\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "Take-Home Exercise/Take-Home_Ex01/Take-Home_Ex01.html",
    "href": "Take-Home Exercise/Take-Home_Ex01/Take-Home_Ex01.html",
    "title": "Take-Home Exercise 1.0: Creating Data Visualisation Beyond Default",
    "section": "",
    "text": "Cardiovascular diseases, including heart attacks, are a leading cause of mortality worldwide. In recent years, Japan has experienced a steady increase in heart disease-related mortality, largely driven by its aging population, thus making it a growing public health concern (Ohira et al., 2023).\n\n\n\nThis exercise involves assuming the role of a graphical editor at an international media company that regularly publishes content on digital platforms. The company plans to release articles focused on one of the following themes:\n\nHeart Attack in Japan\nShip Performance in the Gulf of Guinea\n\nFor the purposes of this take-home exercise, the theme, Heart Attack in Japan, was selected for the preparation of data visualizations for the article.\n\n\n\nThe dataset used in this exercise is sourced from Kaggle and can be accessed via this link.\nThis dataset provides the opportunity to perform a comprehensive analysis of heart attack incidents in Japan as it includes a range of features such as:\n\nAge and Demographics including gender and region.\nMedical Indicators including cholesterol level, heart rate, systolic blood pressure, and diastolic blood pressure.\nPhysical Metrics including Body Mass Index (BMI) measurements.\nBehavioural Factors including physical activity levels and levels of alcohol consumption."
  },
  {
    "objectID": "Take-Home Exercise/Take-Home_Ex01/Take-Home_Ex01.html#background",
    "href": "Take-Home Exercise/Take-Home_Ex01/Take-Home_Ex01.html#background",
    "title": "Take-Home Exercise 1.0: Creating Data Visualisation Beyond Default",
    "section": "",
    "text": "Cardiovascular diseases, including heart attacks, are a leading cause of mortality worldwide. In recent years, Japan has experienced a steady increase in heart disease-related mortality, largely driven by its aging population, thus making it a growing public health concern (Ohira et al., 2023)."
  },
  {
    "objectID": "Take-Home Exercise/Take-Home_Ex01/Take-Home_Ex01.html#the-task",
    "href": "Take-Home Exercise/Take-Home_Ex01/Take-Home_Ex01.html#the-task",
    "title": "Take-Home Exercise 1.0: Creating Data Visualisation Beyond Default",
    "section": "",
    "text": "This exercise involves assuming the role of a graphical editor at an international media company that regularly publishes content on digital platforms. The company plans to release articles focused on one of the following themes:\n\nHeart Attack in Japan\nShip Performance in the Gulf of Guinea\n\nFor the purposes of this take-home exercise, the theme, Heart Attack in Japan, was selected for the preparation of data visualizations for the article."
  },
  {
    "objectID": "Take-Home Exercise/Take-Home_Ex01/Take-Home_Ex01.html#about-the-dataset",
    "href": "Take-Home Exercise/Take-Home_Ex01/Take-Home_Ex01.html#about-the-dataset",
    "title": "Take-Home Exercise 1.0: Creating Data Visualisation Beyond Default",
    "section": "",
    "text": "The dataset used in this exercise is sourced from Kaggle and can be accessed via this link.\nThis dataset provides the opportunity to perform a comprehensive analysis of heart attack incidents in Japan as it includes a range of features such as:\n\nAge and Demographics including gender and region.\nMedical Indicators including cholesterol level, heart rate, systolic blood pressure, and diastolic blood pressure.\nPhysical Metrics including Body Mass Index (BMI) measurements.\nBehavioural Factors including physical activity levels and levels of alcohol consumption."
  },
  {
    "objectID": "Take-Home Exercise/Take-Home_Ex01/Take-Home_Ex01.html#loading-r-packages",
    "href": "Take-Home Exercise/Take-Home_Ex01/Take-Home_Ex01.html#loading-r-packages",
    "title": "Take-Home Exercise 1.0: Creating Data Visualisation Beyond Default",
    "section": "2.1 Loading R Packages",
    "text": "2.1 Loading R Packages\nThe following R packages were used:\n\n\n\nR Package\nDescription\n\n\n\n\ndplyr\n\n\n\ntidyverse\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npacman::p_load(ggiraph, plotly, \n               patchwork, DT, tidyverse, dplyr)"
  },
  {
    "objectID": "Take-Home Exercise/Take-Home_Ex01/Take-Home_Ex01.html#importing-the-data",
    "href": "Take-Home Exercise/Take-Home_Ex01/Take-Home_Ex01.html#importing-the-data",
    "title": "Take-Home Exercise 1.0: Creating Data Visualisation Beyond Default",
    "section": "2.2 Importing the Data",
    "text": "2.2 Importing the Data\nThe dataset was imported into R using the read_csv function from the readr package, which is part of the tidyverse suite.\n\nheartattack_data &lt;- read_csv(\"data/japan_heart_attack_dataset.csv\")"
  },
  {
    "objectID": "Take-Home Exercise/Take-Home_Ex01/Take-Home_Ex01.html#understanding-the-data",
    "href": "Take-Home Exercise/Take-Home_Ex01/Take-Home_Ex01.html#understanding-the-data",
    "title": "Take-Home Exercise 1.0: Creating Data Visualisation Beyond Default",
    "section": "2.3 Understanding the Data",
    "text": "2.3 Understanding the Data\nThe following code chunk allows us to understand the structure of the dataset.\n\nCodeResults\n\n\n\nglimpse(heartattack_data)\n\n\n\n\n\nRows: 30,000\nColumns: 32\n$ Age                     &lt;dbl&gt; 56, 69, 46, 32, 60, 25, 78, 38, 56, 75, 36, 40…\n$ Gender                  &lt;chr&gt; \"Male\", \"Male\", \"Male\", \"Female\", \"Female\", \"F…\n$ Region                  &lt;chr&gt; \"Urban\", \"Urban\", \"Rural\", \"Urban\", \"Rural\", \"…\n$ Smoking_History         &lt;chr&gt; \"Yes\", \"No\", \"Yes\", \"No\", \"No\", \"No\", \"No\", \"Y…\n$ Diabetes_History        &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", \"No…\n$ Hypertension_History    &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", \"No…\n$ Cholesterol_Level       &lt;dbl&gt; 186.4002, 185.1367, 210.6966, 211.1655, 223.81…\n$ Physical_Activity       &lt;chr&gt; \"Moderate\", \"Low\", \"Low\", \"Moderate\", \"High\", …\n$ Diet_Quality            &lt;chr&gt; \"Poor\", \"Good\", \"Average\", \"Good\", \"Good\", \"Go…\n$ Alcohol_Consumption     &lt;chr&gt; \"Low\", \"Low\", \"Moderate\", \"High\", \"High\", \"Hig…\n$ Stress_Levels           &lt;dbl&gt; 3.644786, 3.384056, 3.810911, 6.014878, 6.8068…\n$ BMI                     &lt;dbl&gt; 33.96135, 28.24287, 27.60121, 23.71729, 19.771…\n$ Heart_Rate              &lt;dbl&gt; 72.30153, 57.45764, 64.65870, 55.13147, 76.667…\n$ Systolic_BP             &lt;dbl&gt; 123.90209, 129.89331, 145.65490, 131.78522, 10…\n$ Diastolic_BP            &lt;dbl&gt; 85.68281, 73.52426, 71.99481, 68.21133, 92.902…\n$ Family_History          &lt;chr&gt; \"No\", \"Yes\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No…\n$ Heart_Attack_Occurrence &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n$ Extra_Column_1          &lt;dbl&gt; 0.40498852, 0.03627815, 0.85297888, 0.39085280…\n$ Extra_Column_2          &lt;dbl&gt; 0.43330004, 0.51256694, 0.21959083, 0.29684675…\n$ Extra_Column_3          &lt;dbl&gt; 0.62871236, 0.66839275, 0.61343656, 0.15572404…\n$ Extra_Column_4          &lt;dbl&gt; 0.70160955, 0.11552874, 0.50800995, 0.87025144…\n$ Extra_Column_5          &lt;dbl&gt; 0.49814235, 0.42381938, 0.90066981, 0.39035591…\n$ Extra_Column_6          &lt;dbl&gt; 0.007901312, 0.083932768, 0.227205241, 0.40318…\n$ Extra_Column_7          &lt;dbl&gt; 0.79458257, 0.68895108, 0.49634358, 0.74140891…\n$ Extra_Column_8          &lt;dbl&gt; 0.29077922, 0.83016364, 0.75210679, 0.22396813…\n$ Extra_Column_9          &lt;dbl&gt; 0.49719307, 0.63449028, 0.18150125, 0.32931387…\n$ Extra_Column_10         &lt;dbl&gt; 0.52199452, 0.30204337, 0.62918031, 0.14319054…\n$ Extra_Column_11         &lt;dbl&gt; 0.79965663, 0.04368285, 0.01827617, 0.90778075…\n$ Extra_Column_12         &lt;dbl&gt; 0.72239788, 0.45166789, 0.06322702, 0.54232201…\n$ Extra_Column_13         &lt;dbl&gt; 0.1487387, 0.8786714, 0.1465122, 0.9224606, 0.…\n$ Extra_Column_14         &lt;dbl&gt; 0.8340099, 0.5356022, 0.9972962, 0.6262165, 0.…\n$ Extra_Column_15         &lt;dbl&gt; 0.061632229, 0.617825340, 0.974455410, 0.22860…"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex041.html",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex041.html",
    "title": "Hands-on Exercise 4.1: Visualising Distribution",
    "section": "",
    "text": "The following R packages will be used in this exercise:\n\n\n\n\n\n\n\nR Package\nDescription\n\n\n\n\nggridges\nFor plotting ridgeline plots.\n\n\nggdist\nFor visualising distribution and uncertainty.\n\n\ntidyverse\n\n\n\nggthemes\nProvides additional themes, scales, and geoms for ggplots package.\n\n\ncolorspace\nFor selecting individual colors or color palettes and employing them in various kinds of visualisations.\n\n\n\nThe following code chunk will be used to load these packages into R:\n\npacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse)\n\n\n\n\nThe code chunk below uses read_csv( ) to import exam_data.csv into R and save it into a tibble data frame:\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex041.html#installing-and-loading-the-packages",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex041.html#installing-and-loading-the-packages",
    "title": "Hands-on Exercise 4.1: Visualising Distribution",
    "section": "",
    "text": "The following R packages will be used in this exercise:\n\n\n\n\n\n\n\nR Package\nDescription\n\n\n\n\nggridges\nFor plotting ridgeline plots.\n\n\nggdist\nFor visualising distribution and uncertainty.\n\n\ntidyverse\n\n\n\nggthemes\nProvides additional themes, scales, and geoms for ggplots package.\n\n\ncolorspace\nFor selecting individual colors or color palettes and employing them in various kinds of visualisations.\n\n\n\nThe following code chunk will be used to load these packages into R:\n\npacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex041.html#data-import",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex041.html#data-import",
    "title": "Hands-on Exercise 4.1: Visualising Distribution",
    "section": "",
    "text": "The code chunk below uses read_csv( ) to import exam_data.csv into R and save it into a tibble data frame:\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex041.html#plotting-ridgeline-graphs-ggridges-method",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex041.html#plotting-ridgeline-graphs-ggridges-method",
    "title": "Hands-on Exercise 4.1: Visualising Distribution",
    "section": "2.1 Plotting Ridgeline Graphs: ggridges Method",
    "text": "2.1 Plotting Ridgeline Graphs: ggridges Method\nMain Geoms Used to Plot Ridgeline Plots: geom_ridgeline( ) and geom_density_ridges( ).\n\n2.1.1 Using geom_density_ridges( )\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n2.1.2 Using geom_ridgeline()\n\nexam_dens &lt;- do.call(rbind, lapply(split(exam, exam$CLASS), function(df) {\n  dens &lt;- density(df$ENGLISH, adjust = 0.9) # Change the adjust parameter to control how detailed the density estimates are.\n  data.frame(ENGLISH = dens$x, density = dens$y, CLASS = unique(df$CLASS))\n}))\n\nggplot(exam_dens, aes(x = ENGLISH, y = CLASS, height = density, group = CLASS)) +\n  geom_ridgeline(\n    scale = 50,  # Adjust the scale variable  to change overlap and height of ridges.\n    fill = \"#7097BB\",\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(\n    name = NULL,\n    expand = expansion(add = c(0.1, 0.1))\n  ) +\n  theme_ridges()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\ngeom_ridgeline() requires an explicitly provided height aesthetic, which is set to the manually calculated density.\ngeom_density_ridges() does not seem to require any pre-processing steps for density calculation. Density estimation is handled internally by the geom_density_ridges() function."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex041.html#varying-fill-colours-along-the-x-axis",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex041.html#varying-fill-colours-along-the-x-axis",
    "title": "Hands-on Exercise 4.1: Visualising Distribution",
    "section": "2.2 Varying Fill Colours Along the X-Axis",
    "text": "2.2 Varying Fill Colours Along the X-Axis\nThis can be achieved via geom_ridgeline_gradient() or geom_density_ridges_gradient().\n\n2.2.1 Using geom_density_ridges_gradient()\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex041.html#mapping-the-probabilities-directly-onto-colour",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex041.html#mapping-the-probabilities-directly-onto-colour",
    "title": "Hands-on Exercise 4.1: Visualising Distribution",
    "section": "2.3 Mapping the Probabilities Directly onto Colour",
    "text": "2.3 Mapping the Probabilities Directly onto Colour\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex041.html#ridgeline-plots-with-quantile-lines",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex041.html#ridgeline-plots-with-quantile-lines",
    "title": "Hands-on Exercise 4.1: Visualising Distribution",
    "section": "2.4 Ridgeline Plots with Quantile Lines",
    "text": "2.4 Ridgeline Plots with Quantile Lines\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()\n\n\n\n\n\n\n\n\nAlternatively, cut-off points can also be specified as shown in the code chunk below:\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex041.html#plotting-a-half-eye-graph",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex041.html#plotting-a-half-eye-graph",
    "title": "Hands-on Exercise 4.1: Visualising Distribution",
    "section": "3.1. Plotting a Half Eye Graph",
    "text": "3.1. Plotting a Half Eye Graph\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex041.html#adding-the-boxplot-with-geom_boxplot",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex041.html#adding-the-boxplot-with-geom_boxplot",
    "title": "Hands-on Exercise 4.1: Visualising Distribution",
    "section": "3.2 Adding the Boxplot with geom_boxplot( )",
    "text": "3.2 Adding the Boxplot with geom_boxplot( )\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex041.html#adding-the-dot-plots-with-stat_dots",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex041.html#adding-the-dot-plots-with-stat_dots",
    "title": "Hands-on Exercise 4.1: Visualising Distribution",
    "section": "3.3 Adding the Dot Plots with stat_dots( )",
    "text": "3.3 Adding the Dot Plots with stat_dots( )\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex041.html#finishing-touch---flipping-the-plot-horizontally",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex041.html#finishing-touch---flipping-the-plot-horizontally",
    "title": "Hands-on Exercise 4.1: Visualising Distribution",
    "section": "3.4 Finishing Touch - Flipping the Plot Horizontally",
    "text": "3.4 Finishing Touch - Flipping the Plot Horizontally\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex041.html#disclaimer",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex041.html#disclaimer",
    "title": "Hands-on Exercise 4.1: Visualising Distribution",
    "section": "4.1 Disclaimer",
    "text": "4.1 Disclaimer\nThis document includes content written with the assistance of ChatGPT, which was used for grammar correction, correction of code and the explanation of arguments for the various packages."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex042.html",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex042.html",
    "title": "Hands-on Exercise 4.2: Visual Statistics Analysis",
    "section": "",
    "text": "In this exercise, ggstatsplot would be used to create visual graphics with rich statistical information.\n\npacman::p_load(ggstatsplot, tidyverse)\n\n\n\n\nThe code chunk below uses read_csv( ) to import exam_data.csv into R and save it into a tibble data frame:\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex042.html#installing-and-loading-the-r-packages",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex042.html#installing-and-loading-the-r-packages",
    "title": "Hands-on Exercise 4.2: Visual Statistics Analysis",
    "section": "",
    "text": "In this exercise, ggstatsplot would be used to create visual graphics with rich statistical information.\n\npacman::p_load(ggstatsplot, tidyverse)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex042.html#importing-data",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex042.html#importing-data",
    "title": "Hands-on Exercise 4.2: Visual Statistics Analysis",
    "section": "",
    "text": "The code chunk below uses read_csv( ) to import exam_data.csv into R and save it into a tibble data frame:\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex042.html#one-sample-test-gghistostats-method",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex042.html#one-sample-test-gghistostats-method",
    "title": "Hands-on Exercise 4.2: Visual Statistics Analysis",
    "section": "2.1 One-Sample Test: gghistostats() Method",
    "text": "2.1 One-Sample Test: gghistostats() Method\nThe code chunk below uses gghistostats() to build a visual of one-sample test on English scores.\n\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\"\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\ntype specifies the type of statistical analysis to be performed.\ntest.value refers to the value which the observed data (English scores) will be compared against.\nBased on the plot above, the very negative loge(BF01) of -31.45 suggests a strong statistical evidence against the null hypothesis, implying that the mean English score is different from 60."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex042.html#two-sample-mean-test-ggbetweenstats",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex042.html#two-sample-mean-test-ggbetweenstats",
    "title": "Hands-on Exercise 4.2: Visual Statistics Analysis",
    "section": "2.2. Two-Sample Mean Test: ggbetweenstats()",
    "text": "2.2. Two-Sample Mean Test: ggbetweenstats()\nThe code chunk below uses ggbetweenstats() to build a bisual for two-sample mean test of Math scores by gender:\n\nggbetweenstats(\n  data = exam,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nThe Mann-Whitney U test is a non-parametric test, which is used to compare differences between two independent groups when the data cannot be assumed to be normally distributed.\nSince the p-value is 0.91 (&gt;0.05) suggests that there is no statistically significant difference in Math scores between males and females. The high p-value implies that any observed differences in median scores is likely due to random chance rather than systematic differences between genders."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex042.html#one-way-anova-test-ggbetweenstats-method",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex042.html#one-way-anova-test-ggbetweenstats-method",
    "title": "Hands-on Exercise 4.2: Visual Statistics Analysis",
    "section": "2.3 One-Way ANOVA Test: ggbetweenstats() Method",
    "text": "2.3 One-Way ANOVA Test: ggbetweenstats() Method\n\nggbetweenstats(\n  data = exam,\n  x = RACE, \n  y = ENGLISH,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nThe Welch ANOVA test is used to determine if there are statistically significant differences in the mean for &gt;3 groups. It is tailored for situations where the groups do not have equal variances (“heteroscedasticity”).\nSince the p-value is 1.71e-04 (&lt;0.05), the differences in English scores amongst racial groups is statistically significant."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex042.html#significant-test-of-correlation-ggscatterstats",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex042.html#significant-test-of-correlation-ggscatterstats",
    "title": "Hands-on Exercise 4.2: Visual Statistics Analysis",
    "section": "2.4 Significant Test of Correlation: ggscatterstats()",
    "text": "2.4 Significant Test of Correlation: ggscatterstats()\n\nggscatterstats(\n  data = exam,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE,\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\np-value of 1.70e-83 (&lt;0.05) suggests that the relationship between English and Maths is statistically significant.\nCorrelation Coefficient of 0.83 indicates a strong positive correlation between Math and English scores."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex042.html#significant-test-of-association",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex042.html#significant-test-of-association",
    "title": "Hands-on Exercise 4.2: Visual Statistics Analysis",
    "section": "2.5 Significant Test of Association",
    "text": "2.5 Significant Test of Association\nThe code chunk below bins the Math scores into a 4-class variable:\n\nexam1 &lt;- exam %&gt;% \n  mutate(MATHS_bins = \n           cut(MATHS, \n               breaks = c(0,60,75,85,100))\n)\n\nThe code chunk below uses ggbarstats() to build a visual for significant test of association:\n\nggbarstats(exam1, \n           x = MATHS_bins, \n           y = GENDER)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex042.html#getting-started-1",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex042.html#getting-started-1",
    "title": "Hands-on Exercise 4.2: Visual Statistics Analysis",
    "section": "3.1 Getting Started",
    "text": "3.1 Getting Started\n\n3.1.1 Installing and Loading the Required Libraries\n\npacman::p_load(readxl, performance, parameters, see)\n\n\n\n3.1.2 Importing Excel File\nThe code chunk below uses read_xls() to import the data worksheet of ToyotaCorolla.xls workbook into R:\n\ncar_resale &lt;- read_xls(\"data/ToyotaCorolla.xls\", \n                       \"data\")\ncar_resale\n\n# A tibble: 1,436 × 38\n      Id Model          Price Age_08_04 Mfg_Month Mfg_Year    KM Fuel_Type    HP\n   &lt;dbl&gt; &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;     &lt;dbl&gt;\n 1     1 TOYOTA Coroll… 13500        23        10     2002 46986 Diesel       90\n 2     2 TOYOTA Coroll… 13750        23        10     2002 72937 Diesel       90\n 3     3  TOYOTA Corol… 13950        24         9     2002 41711 Diesel       90\n 4     4 TOYOTA Coroll… 14950        26         7     2002 48000 Diesel       90\n 5     5 TOYOTA Coroll… 13750        30         3     2002 38500 Diesel       90\n 6     6 TOYOTA Coroll… 12950        32         1     2002 61000 Diesel       90\n 7     7  TOYOTA Corol… 16900        27         6     2002 94612 Diesel       90\n 8     8 TOYOTA Coroll… 18600        30         3     2002 75889 Diesel       90\n 9     9  TOYOTA Corol… 21500        27         6     2002 19700 Petrol      192\n10    10  TOYOTA Corol… 12950        23        10     2002 71138 Diesel       69\n# ℹ 1,426 more rows\n# ℹ 29 more variables: Met_Color &lt;dbl&gt;, Color &lt;chr&gt;, Automatic &lt;dbl&gt;, CC &lt;dbl&gt;,\n#   Doors &lt;dbl&gt;, Cylinders &lt;dbl&gt;, Gears &lt;dbl&gt;, Quarterly_Tax &lt;dbl&gt;,\n#   Weight &lt;dbl&gt;, Mfr_Guarantee &lt;dbl&gt;, BOVAG_Guarantee &lt;dbl&gt;,\n#   Guarantee_Period &lt;dbl&gt;, ABS &lt;dbl&gt;, Airbag_1 &lt;dbl&gt;, Airbag_2 &lt;dbl&gt;,\n#   Airco &lt;dbl&gt;, Automatic_airco &lt;dbl&gt;, Boardcomputer &lt;dbl&gt;, CD_Player &lt;dbl&gt;,\n#   Central_Lock &lt;dbl&gt;, Powered_Windows &lt;dbl&gt;, Power_Steering &lt;dbl&gt;, …"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex042.html#multiple-regression-model-using-lm",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex042.html#multiple-regression-model-using-lm",
    "title": "Hands-on Exercise 4.2: Visual Statistics Analysis",
    "section": "3.2 Multiple Regression Model Using lm()",
    "text": "3.2 Multiple Regression Model Using lm()\n\nmodel &lt;- lm(Price ~ Age_08_04 + Mfg_Year + KM + \n              Weight + Guarantee_Period, data = car_resale)\nmodel\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex042.html#model-diagnostic-checking-for-multicollinearity",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex042.html#model-diagnostic-checking-for-multicollinearity",
    "title": "Hands-on Exercise 4.2: Visual Statistics Analysis",
    "section": "3.3 Model Diagnostic: Checking for Multicollinearity",
    "text": "3.3 Model Diagnostic: Checking for Multicollinearity\n\ncheck_collinearity(model)\n\n# Check for Multicollinearity\n\nLow Correlation\n\n             Term  VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n               KM 1.46 [ 1.37,  1.57]         1.21      0.68     [0.64, 0.73]\n           Weight 1.41 [ 1.32,  1.51]         1.19      0.71     [0.66, 0.76]\n Guarantee_Period 1.04 [ 1.01,  1.17]         1.02      0.97     [0.86, 0.99]\n\nHigh Correlation\n\n      Term   VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n Age_08_04 31.07 [28.08, 34.38]         5.57      0.03     [0.03, 0.04]\n  Mfg_Year 31.16 [28.16, 34.48]         5.58      0.03     [0.03, 0.04]\n\n\n\ncheck_c &lt;- check_collinearity(model)\nplot(check_c)\n\n\n\n\n\n\n\n\nVariables that are highly collinear with one or more other variables in the model. High VIF for these variables indicates that they share a substantial amount of information with other predictors, reducing the precision of the estimates of the model coefficients. Potential actions for high VIF variables include removing one of the highly collinear variables (either Age_08_04 or Mfg_Year) to reduce multicollinearity."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex042.html#model-diagnostics-checking-normality-assumption",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex042.html#model-diagnostics-checking-normality-assumption",
    "title": "Hands-on Exercise 4.2: Visual Statistics Analysis",
    "section": "3.4 Model Diagnostics: Checking Normality Assumption",
    "text": "3.4 Model Diagnostics: Checking Normality Assumption\n\nmodel1 &lt;- lm(Price ~ Age_08_04 + KM + \n              Weight + Guarantee_Period, data = car_resale)\n\n\ncheck_n &lt;- check_normality(model1)\nplot(check_n)\n\n\n\n\n\n\n\n\nThe assumption of normality of residuals is not fully met, as indicated by the outliers and the heavy tails."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex042.html#model-diagnostics-check-model-for-homogeneity-of-variances",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex042.html#model-diagnostics-check-model-for-homogeneity-of-variances",
    "title": "Hands-on Exercise 4.2: Visual Statistics Analysis",
    "section": "3.5 Model Diagnostics: Check Model for Homogeneity of Variances",
    "text": "3.5 Model Diagnostics: Check Model for Homogeneity of Variances\n\ncheck_h &lt;- check_heteroscedasticity(model1)\nplot(check_h)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex042.html#model-diagnostics-complete-check",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex042.html#model-diagnostics-complete-check",
    "title": "Hands-on Exercise 4.2: Visual Statistics Analysis",
    "section": "3.6 Model Diagnostics: Complete Check",
    "text": "3.6 Model Diagnostics: Complete Check\n\ncheck_model(model1)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex042.html#visualising-regression-parameters-see-methods",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex042.html#visualising-regression-parameters-see-methods",
    "title": "Hands-on Exercise 4.2: Visual Statistics Analysis",
    "section": "3.7 Visualising Regression Parameters: see Methods",
    "text": "3.7 Visualising Regression Parameters: see Methods\n\nplot(parameters(model1))"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex042.html#visualising-regression-parameters-ggcoefstats-methods",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex042.html#visualising-regression-parameters-ggcoefstats-methods",
    "title": "Hands-on Exercise 4.2: Visual Statistics Analysis",
    "section": "3.8 Visualising Regression Parameters: ggcoefstats() Methods",
    "text": "3.8 Visualising Regression Parameters: ggcoefstats() Methods\n\nggcoefstats(model1, \n            output = \"plot\")"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex043.html",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex043.html",
    "title": "Hands-on Exercise 4.3: Visualising Uncertainty",
    "section": "",
    "text": "The following R packages will be used in this exercise:\n\n\n\nR Package\nDescription\n\n\n\n\ntidyverse\n\n\n\nplotly\nFor creating interactive plots.\n\n\ngganimate\nFor creating animated plots\n\n\nDT\nFor displaying interactive html tables.\n\n\ncrosstalk\nFor implementing cross-widget interactions\n\n\nggdist\nFor visualising distribution and uncertainty\n\n\n\n\ndevtools::install_github(\"wilkelab/ungeviz\")\n\npacman::p_load(ungeviz, plotly, crosstalk,\n               DT, ggdist, ggridges,\n               colorspace, gganimate, tidyverse)\n\n\n\n\nThe code chunk below uses read_csv() to import exam_data.csv into R:\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")\n\n\n\n\nA point estimate is a single number (e.g. mean). Uncertainty can be expressed as standard error or confidence interval.\nThe following code chunk derives the summary statistics:\n\nmy_sum &lt;- exam %&gt;%\n  group_by(RACE) %&gt;%\n  summarise(\n    n=n(),\n    mean=mean(MATHS),\n    sd=sd(MATHS)\n    ) %&gt;%\n  mutate(se=sd/sqrt(n-1))\n\nThe following code chunk would be used to display the my_sum tibble data frame in a html table format:\n\nknitr::kable(head(my_sum), format = 'html')\n\n\n\n\nRACE\nn\nmean\nsd\nse\n\n\n\n\nChinese\n193\n76.50777\n15.69040\n1.132357\n\n\nIndian\n12\n60.66667\n23.35237\n7.041005\n\n\nMalay\n108\n57.44444\n21.13478\n2.043177\n\n\nOthers\n9\n69.66667\n10.72381\n3.791438\n\n\n\n\n\n\n\n\n\n\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=RACE, \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    size=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"Standard error of mean maths score by rac\")\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=reorder(RACE, -mean), \n        ymin=mean-1.96*se, \n        ymax=mean+1.96*se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    size=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  labs(x = \"Maths score\",\n       title = \"95% confidence interval of mean maths score by race\")\n\n\n\n\n\n\n\n\n\n\n\n\nshared_df = SharedData$new(my_sum)\n\nbscols(widths = c(4,8),\n       ggplotly((ggplot(shared_df) +\n                   geom_errorbar(aes(\n                     x=reorder(RACE, -mean),\n                     ymin=mean-2.58*se, \n                     ymax=mean+2.58*se), \n                     width=0.2, \n                     colour=\"black\", \n                     alpha=0.9, \n                     size=0.5) +\n                   geom_point(aes(\n                     x=RACE, \n                     y=mean, \n                     text = paste(\"Race:\", `RACE`, \n                                  \"&lt;br&gt;N:\", `n`,\n                                  \"&lt;br&gt;Avg. Scores:\", round(mean, digits = 2),\n                                  \"&lt;br&gt;95% CI:[\", \n                                  round((mean-2.58*se), digits = 2), \",\",\n                                  round((mean+2.58*se), digits = 2),\"]\")),\n                     stat=\"identity\", \n                     color=\"red\", \n                     size = 1.5, \n                     alpha=1) + \n                   xlab(\"Race\") + \n                   ylab(\"Average Scores\") + \n                   theme_minimal() + \n                   theme(axis.text.x = element_text(\n                     angle = 45, vjust = 0.5, hjust=1)) +\n                   ggtitle(\"99% Confidence interval of average /&lt;br&gt;maths scores by race\")), \n                tooltip = \"text\"), \n       DT::datatable(shared_df, \n                     rownames = FALSE, \n                     class=\"compact\", \n                     width=\"100%\", \n                     options = list(pageLength = 10,\n                                    scrollX=T), \n                     colnames = c(\"No. of pupils\", \n                                  \"Avg Scores\",\n                                  \"Std Dev\",\n                                  \"Std Error\")) %&gt;%\n         formatRound(columns=c('mean', 'sd', 'se'),\n                     digits=2))"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex043.html#installing-and-loading-the-packages",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex043.html#installing-and-loading-the-packages",
    "title": "Hands-on Exercise 4.3: Visualising Uncertainty",
    "section": "",
    "text": "The following R packages will be used in this exercise:\n\n\n\nR Package\nDescription\n\n\n\n\ntidyverse\n\n\n\nplotly\nFor creating interactive plots.\n\n\ngganimate\nFor creating animated plots\n\n\nDT\nFor displaying interactive html tables.\n\n\ncrosstalk\nFor implementing cross-widget interactions\n\n\nggdist\nFor visualising distribution and uncertainty\n\n\n\n\ndevtools::install_github(\"wilkelab/ungeviz\")\n\npacman::p_load(ungeviz, plotly, crosstalk,\n               DT, ggdist, ggridges,\n               colorspace, gganimate, tidyverse)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex043.html#data-import",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex043.html#data-import",
    "title": "Hands-on Exercise 4.3: Visualising Uncertainty",
    "section": "",
    "text": "The code chunk below uses read_csv() to import exam_data.csv into R:\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex043.html#visualising-the-uncertainty-of-point-estimates-ggplot2-methods",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex043.html#visualising-the-uncertainty-of-point-estimates-ggplot2-methods",
    "title": "Hands-on Exercise 4.3: Visualising Uncertainty",
    "section": "",
    "text": "A point estimate is a single number (e.g. mean). Uncertainty can be expressed as standard error or confidence interval.\nThe following code chunk derives the summary statistics:\n\nmy_sum &lt;- exam %&gt;%\n  group_by(RACE) %&gt;%\n  summarise(\n    n=n(),\n    mean=mean(MATHS),\n    sd=sd(MATHS)\n    ) %&gt;%\n  mutate(se=sd/sqrt(n-1))\n\nThe following code chunk would be used to display the my_sum tibble data frame in a html table format:\n\nknitr::kable(head(my_sum), format = 'html')\n\n\n\n\nRACE\nn\nmean\nsd\nse\n\n\n\n\nChinese\n193\n76.50777\n15.69040\n1.132357\n\n\nIndian\n12\n60.66667\n23.35237\n7.041005\n\n\nMalay\n108\n57.44444\n21.13478\n2.043177\n\n\nOthers\n9\n69.66667\n10.72381\n3.791438"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex043.html#plotting-standard-error-bars-of-point-estimates",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex043.html#plotting-standard-error-bars-of-point-estimates",
    "title": "Hands-on Exercise 4.3: Visualising Uncertainty",
    "section": "",
    "text": "ggplot(my_sum) +\n  geom_errorbar(\n    aes(x=RACE, \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    size=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"Standard error of mean maths score by rac\")"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex043.html#plotting-confidence-interval-of-point-estimates",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex043.html#plotting-confidence-interval-of-point-estimates",
    "title": "Hands-on Exercise 4.3: Visualising Uncertainty",
    "section": "",
    "text": "ggplot(my_sum) +\n  geom_errorbar(\n    aes(x=reorder(RACE, -mean), \n        ymin=mean-1.96*se, \n        ymax=mean+1.96*se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    size=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  labs(x = \"Maths score\",\n       title = \"95% confidence interval of mean maths score by race\")"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex043.html#visualising-the-uncertainty-of-point-estimates-with-interactive-error-bars",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex043.html#visualising-the-uncertainty-of-point-estimates-with-interactive-error-bars",
    "title": "Hands-on Exercise 4.3: Visualising Uncertainty",
    "section": "",
    "text": "shared_df = SharedData$new(my_sum)\n\nbscols(widths = c(4,8),\n       ggplotly((ggplot(shared_df) +\n                   geom_errorbar(aes(\n                     x=reorder(RACE, -mean),\n                     ymin=mean-2.58*se, \n                     ymax=mean+2.58*se), \n                     width=0.2, \n                     colour=\"black\", \n                     alpha=0.9, \n                     size=0.5) +\n                   geom_point(aes(\n                     x=RACE, \n                     y=mean, \n                     text = paste(\"Race:\", `RACE`, \n                                  \"&lt;br&gt;N:\", `n`,\n                                  \"&lt;br&gt;Avg. Scores:\", round(mean, digits = 2),\n                                  \"&lt;br&gt;95% CI:[\", \n                                  round((mean-2.58*se), digits = 2), \",\",\n                                  round((mean+2.58*se), digits = 2),\"]\")),\n                     stat=\"identity\", \n                     color=\"red\", \n                     size = 1.5, \n                     alpha=1) + \n                   xlab(\"Race\") + \n                   ylab(\"Average Scores\") + \n                   theme_minimal() + \n                   theme(axis.text.x = element_text(\n                     angle = 45, vjust = 0.5, hjust=1)) +\n                   ggtitle(\"99% Confidence interval of average /&lt;br&gt;maths scores by race\")), \n                tooltip = \"text\"), \n       DT::datatable(shared_df, \n                     rownames = FALSE, \n                     class=\"compact\", \n                     width=\"100%\", \n                     options = list(pageLength = 10,\n                                    scrollX=T), \n                     colnames = c(\"No. of pupils\", \n                                  \"Avg Scores\",\n                                  \"Std Dev\",\n                                  \"Std Error\")) %&gt;%\n         formatRound(columns=c('mean', 'sd', 'se'),\n                     digits=2))"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex043.html#visualising-the-uncertainty-of-point-estimates-ggdist-methods",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex043.html#visualising-the-uncertainty-of-point-estimates-ggdist-methods",
    "title": "Hands-on Exercise 4.3: Visualising Uncertainty",
    "section": "3.1 Visualising the Uncertainty of Point Estimates: ggdist Methods",
    "text": "3.1 Visualising the Uncertainty of Point Estimates: ggdist Methods\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval() +\n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\n\nexam %&gt;%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(.width = 0.95,\n  .point = median,\n  .interval = qi) +\n  labs(\n    title = \"Visualising confidence intervals of median math score\",\n    subtitle = \"Median Point + Multiple-interval plot\")"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex043.html#visualising-the-uncertainty-of-point-estimates-ggdist-methods-1",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex043.html#visualising-the-uncertainty-of-point-estimates-ggdist-methods-1",
    "title": "Hands-on Exercise 4.3: Visualising Uncertainty",
    "section": "3.2 Visualising the Uncertainty of Point Estimates: ggdist Methods",
    "text": "3.2 Visualising the Uncertainty of Point Estimates: ggdist Methods\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval(\n    show.legend = FALSE) +   \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex043.html#visualising-the-uncertainty-of-point-estimates-ggdist-methods-2",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex043.html#visualising-the-uncertainty-of-point-estimates-ggdist-methods-2",
    "title": "Hands-on Exercise 4.3: Visualising Uncertainty",
    "section": "3.3 Visualising the Uncertainty of Point Estimates: ggdist Methods",
    "text": "3.3 Visualising the Uncertainty of Point Estimates: ggdist Methods\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_gradientinterval(   \n    fill = \"skyblue\",      \n    show.legend = TRUE     \n  ) +                        \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Gradient + interval plot\")"
  },
  {
    "objectID": "Take-Home Exercise/Take-Home_Ex01/Take-Home_Ex01.html#duplicate-check",
    "href": "Take-Home Exercise/Take-Home_Ex01/Take-Home_Ex01.html#duplicate-check",
    "title": "Take-Home Exercise 1.0: Creating Data Visualisation Beyond Default",
    "section": "2.4 Duplicate Check",
    "text": "2.4 Duplicate Check\n\nduplicate &lt;- heartattack_data %&gt;% \n  group_by_all() %&gt;% \n  filter(n()&gt;1) %&gt;% \n  ungroup()\n  \nduplicate\n\n# A tibble: 0 × 32\n# ℹ 32 variables: Age &lt;dbl&gt;, Gender &lt;chr&gt;, Region &lt;chr&gt;, Smoking_History &lt;chr&gt;,\n#   Diabetes_History &lt;chr&gt;, Hypertension_History &lt;chr&gt;,\n#   Cholesterol_Level &lt;dbl&gt;, Physical_Activity &lt;chr&gt;, Diet_Quality &lt;chr&gt;,\n#   Alcohol_Consumption &lt;chr&gt;, Stress_Levels &lt;dbl&gt;, BMI &lt;dbl&gt;,\n#   Heart_Rate &lt;dbl&gt;, Systolic_BP &lt;dbl&gt;, Diastolic_BP &lt;dbl&gt;,\n#   Family_History &lt;chr&gt;, Heart_Attack_Occurrence &lt;chr&gt;, Extra_Column_1 &lt;dbl&gt;,\n#   Extra_Column_2 &lt;dbl&gt;, Extra_Column_3 &lt;dbl&gt;, Extra_Column_4 &lt;dbl&gt;, …"
  },
  {
    "objectID": "Take-Home Exercise/Take-Home_Ex01/Take-Home_Ex01.html#understanding-the-data-and-data-wrangling",
    "href": "Take-Home Exercise/Take-Home_Ex01/Take-Home_Ex01.html#understanding-the-data-and-data-wrangling",
    "title": "Take-Home Exercise 1.0: Creating Data Visualisation Beyond Default",
    "section": "2.3 Understanding the Data and Data Wrangling",
    "text": "2.3 Understanding the Data and Data Wrangling\nTo gain an initial understanding of the dataset, the following code chunk utilises the glimpse function from the dplyr package. This function provides a quick overview of the dataset’s structure by displaying the first few entries of each column along with their data types.\n\nCodeResults\n\n\n\nglimpse(heartattack_data)\n\n\n\n\n\nRows: 30,000\nColumns: 32\n$ Age                     &lt;dbl&gt; 56, 69, 46, 32, 60, 25, 78, 38, 56, 75, 36, 40…\n$ Gender                  &lt;chr&gt; \"Male\", \"Male\", \"Male\", \"Female\", \"Female\", \"F…\n$ Region                  &lt;chr&gt; \"Urban\", \"Urban\", \"Rural\", \"Urban\", \"Rural\", \"…\n$ Smoking_History         &lt;chr&gt; \"Yes\", \"No\", \"Yes\", \"No\", \"No\", \"No\", \"No\", \"Y…\n$ Diabetes_History        &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", \"No…\n$ Hypertension_History    &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", \"No…\n$ Cholesterol_Level       &lt;dbl&gt; 186.4002, 185.1367, 210.6966, 211.1655, 223.81…\n$ Physical_Activity       &lt;chr&gt; \"Moderate\", \"Low\", \"Low\", \"Moderate\", \"High\", …\n$ Diet_Quality            &lt;chr&gt; \"Poor\", \"Good\", \"Average\", \"Good\", \"Good\", \"Go…\n$ Alcohol_Consumption     &lt;chr&gt; \"Low\", \"Low\", \"Moderate\", \"High\", \"High\", \"Hig…\n$ Stress_Levels           &lt;dbl&gt; 3.644786, 3.384056, 3.810911, 6.014878, 6.8068…\n$ BMI                     &lt;dbl&gt; 33.96135, 28.24287, 27.60121, 23.71729, 19.771…\n$ Heart_Rate              &lt;dbl&gt; 72.30153, 57.45764, 64.65870, 55.13147, 76.667…\n$ Systolic_BP             &lt;dbl&gt; 123.90209, 129.89331, 145.65490, 131.78522, 10…\n$ Diastolic_BP            &lt;dbl&gt; 85.68281, 73.52426, 71.99481, 68.21133, 92.902…\n$ Family_History          &lt;chr&gt; \"No\", \"Yes\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No…\n$ Heart_Attack_Occurrence &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n$ Extra_Column_1          &lt;dbl&gt; 0.40498852, 0.03627815, 0.85297888, 0.39085280…\n$ Extra_Column_2          &lt;dbl&gt; 0.43330004, 0.51256694, 0.21959083, 0.29684675…\n$ Extra_Column_3          &lt;dbl&gt; 0.62871236, 0.66839275, 0.61343656, 0.15572404…\n$ Extra_Column_4          &lt;dbl&gt; 0.70160955, 0.11552874, 0.50800995, 0.87025144…\n$ Extra_Column_5          &lt;dbl&gt; 0.49814235, 0.42381938, 0.90066981, 0.39035591…\n$ Extra_Column_6          &lt;dbl&gt; 0.007901312, 0.083932768, 0.227205241, 0.40318…\n$ Extra_Column_7          &lt;dbl&gt; 0.79458257, 0.68895108, 0.49634358, 0.74140891…\n$ Extra_Column_8          &lt;dbl&gt; 0.29077922, 0.83016364, 0.75210679, 0.22396813…\n$ Extra_Column_9          &lt;dbl&gt; 0.49719307, 0.63449028, 0.18150125, 0.32931387…\n$ Extra_Column_10         &lt;dbl&gt; 0.52199452, 0.30204337, 0.62918031, 0.14319054…\n$ Extra_Column_11         &lt;dbl&gt; 0.79965663, 0.04368285, 0.01827617, 0.90778075…\n$ Extra_Column_12         &lt;dbl&gt; 0.72239788, 0.45166789, 0.06322702, 0.54232201…\n$ Extra_Column_13         &lt;dbl&gt; 0.1487387, 0.8786714, 0.1465122, 0.9224606, 0.…\n$ Extra_Column_14         &lt;dbl&gt; 0.8340099, 0.5356022, 0.9972962, 0.6262165, 0.…\n$ Extra_Column_15         &lt;dbl&gt; 0.061632229, 0.617825340, 0.974455410, 0.22860…\n\n\n\n\n\nBased on the output generated, the dataset consists of 30,000 rows and 32 columns.\n\n2.3.1 Filtering of Columns\nFrom the output generated in Section 2.3, the dataset includes 15 columns labelled from Extra_Column_1 to Extra_Column_15 . These columns do not have clear descriptions nor apparent relevance to the study. Hence, in order to streamline the dataset, these columns were removed. This would allow us to focus on variables that would be more relevant to the analysis.\nAfter filtering out the irrelevant columns, the dataset now comprises of 17 columns as shown in the Results tab below:\n\nCodeResults\n\n\n\nheartattack_data_filtered &lt;- select(heartattack_data, -matches(\"Extra_Column_\"))\n\n\n\n\n\nRows: 30,000\nColumns: 17\n$ Age                     &lt;dbl&gt; 56, 69, 46, 32, 60, 25, 78, 38, 56, 75, 36, 40…\n$ Gender                  &lt;chr&gt; \"Male\", \"Male\", \"Male\", \"Female\", \"Female\", \"F…\n$ Region                  &lt;chr&gt; \"Urban\", \"Urban\", \"Rural\", \"Urban\", \"Rural\", \"…\n$ Smoking_History         &lt;chr&gt; \"Yes\", \"No\", \"Yes\", \"No\", \"No\", \"No\", \"No\", \"Y…\n$ Diabetes_History        &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", \"No…\n$ Hypertension_History    &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", \"No…\n$ Cholesterol_Level       &lt;dbl&gt; 186.4002, 185.1367, 210.6966, 211.1655, 223.81…\n$ Physical_Activity       &lt;chr&gt; \"Moderate\", \"Low\", \"Low\", \"Moderate\", \"High\", …\n$ Diet_Quality            &lt;chr&gt; \"Poor\", \"Good\", \"Average\", \"Good\", \"Good\", \"Go…\n$ Alcohol_Consumption     &lt;chr&gt; \"Low\", \"Low\", \"Moderate\", \"High\", \"High\", \"Hig…\n$ Stress_Levels           &lt;dbl&gt; 3.644786, 3.384056, 3.810911, 6.014878, 6.8068…\n$ BMI                     &lt;dbl&gt; 33.96135, 28.24287, 27.60121, 23.71729, 19.771…\n$ Heart_Rate              &lt;dbl&gt; 72.30153, 57.45764, 64.65870, 55.13147, 76.667…\n$ Systolic_BP             &lt;dbl&gt; 123.90209, 129.89331, 145.65490, 131.78522, 10…\n$ Diastolic_BP            &lt;dbl&gt; 85.68281, 73.52426, 71.99481, 68.21133, 92.902…\n$ Family_History          &lt;chr&gt; \"No\", \"Yes\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No…\n$ Heart_Attack_Occurrence &lt;chr&gt; \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\"…\n\n\n\n\n\n\n\n2.3.2 Duplicate and Missing Value Checks\nDuplicate Data Check\nWe performed a check for duplicate records using the dplyr package. Duplicates can skew analysis results. Hence, identifying and removing them is crucial.\n\nCodeResults\n\n\n\nheartattack_data_v3 &lt;- heartattack_data_filtered %&gt;%\n  mutate(is_duplicate = duplicated(.) | duplicated(., fromLast = TRUE))\n\n# Filtering to obtain only the rows that are duplicates\nduplicates_only &lt;- filter(heartattack_data_v3, is_duplicate == TRUE)\n\n# Displaying the first few rows of the duplicates\nhead(duplicates_only)\n\n\n\n\n\n# A tibble: 0 × 18\n# ℹ 18 variables: Age &lt;dbl&gt;, Gender &lt;chr&gt;, Region &lt;chr&gt;, Smoking_History &lt;chr&gt;,\n#   Diabetes_History &lt;chr&gt;, Hypertension_History &lt;chr&gt;,\n#   Cholesterol_Level &lt;dbl&gt;, Physical_Activity &lt;chr&gt;, Diet_Quality &lt;chr&gt;,\n#   Alcohol_Consumption &lt;chr&gt;, Stress_Levels &lt;dbl&gt;, BMI &lt;dbl&gt;,\n#   Heart_Rate &lt;dbl&gt;, Systolic_BP &lt;dbl&gt;, Diastolic_BP &lt;dbl&gt;,\n#   Family_History &lt;chr&gt;, Heart_Attack_Occurrence &lt;chr&gt;, is_duplicate &lt;lgl&gt;\n\n\n\n\n\nAfter applying the duplicate check, the output indicated a tibble data frame of 0 × 18, which implies that there are no duplicate records in our dataset.\nMissing Value Check\nMissing values in a dataset can introduce bias and affect the accuracy of statistical analysis, leading to misleading results. Hence, the dplyr package was utilised to identify and summarise the missing values across each variable in the dataset.\n\nCodeResults\n\n\n\nmissing_values_summary &lt;- heartattack_data_filtered %&gt;%\n  summarise_all(~ sum(is.na(.)))\n\nmissing_values_summary\n\n\n\n\n\n# A tibble: 1 × 17\n    Age Gender Region Smoking_History Diabetes_History Hypertension_History\n  &lt;int&gt;  &lt;int&gt;  &lt;int&gt;           &lt;int&gt;            &lt;int&gt;                &lt;int&gt;\n1     0      0      0               0                0                    0\n# ℹ 11 more variables: Cholesterol_Level &lt;int&gt;, Physical_Activity &lt;int&gt;,\n#   Diet_Quality &lt;int&gt;, Alcohol_Consumption &lt;int&gt;, Stress_Levels &lt;int&gt;,\n#   BMI &lt;int&gt;, Heart_Rate &lt;int&gt;, Systolic_BP &lt;int&gt;, Diastolic_BP &lt;int&gt;,\n#   Family_History &lt;int&gt;, Heart_Attack_Occurrence &lt;int&gt;\n\n\n\n\n\nThe output indicates the count of missing values for each variable in the dataset. In this case, all columns have a count of 0, indicating that this dataset has no missing values.\n\n\n2.3.3 Recoding Variables\nRecoding BMI\nRaw BMI values alone do not provide an intuitive interpretation of body weight, making interpretation difficult for both technical and non-technical audiences. As such, there is a need to recode the BMI values into meaningful groups.\nIn this exercise, the BMI values were categorised into four distinct groups in accordance to the World Health Organisation’s International BMI Classification. Applying this classification would simplify the interpretation of BMI values, allowing readers of the article to easily determine whether an individual falls within a healthy range or an at-risk category, and the potential relationship with heart attack incidence.\nThe categories used are as follows:\n\n\n\nClassification\nBMI\n\n\n\n\nUnderweight\n&lt;18.5\n\n\nNormal Weight\n18.5 - 24.9\n\n\nPre-Obese\n25.0 - 29.9\n\n\nObese\n&gt;=30\n\n\n\nThe cut function in R was employed to implement this classification. This function assigns each BMI value to one of the specified categories, creating a new column, BMI_Category, in the dataset.\n\nCodeResults\n\n\n\n# Categorizing BMI according to WHO standards\nheartattack_data_filtered$BMI_Category &lt;- cut(\n  heartattack_data_filtered$BMI,\n  breaks = c(-Inf, 18.5, 24.9, 29.9, Inf),\n  labels = c(\"Underweight\", \"Normal Weight\", \"Pre-Obese\", \"Obese\"),\n  right = TRUE\n)\n\n\n\n\n\n\n  Underweight Normal Weight     Pre-Obese         Obese \n         2875         11980         10215          4930 \n\n\n\n\n\nRecoding Age\nIn epidemiological studies, age is often grouped into categories rather than analysed as a continuous variable. While age is a key determinant of health risks, raw age variables do not immediately provide clear insights. Binning age into meaningful categories simplifies interpretation, making it easier to identify trends across different life stages.\nThe age variable was binned into the following categories:\n\n\n\nClassification\nAge Range\n\n\n\n\nYouth\n0 - 17\n\n\nYoung Adult\n18 - 35\n\n\nMiddle-Aged Adults\n36 - 64\n\n\nElderly\n&gt;= 65\n\n\n\nThe code chunk below uses the cut() function in R to categorise the age variable into the aforementioned groupings. A new variable called age_group would be created:\n\nCodeResults\n\n\n\nheartattack_data_filtered$Age_Group &lt;- cut(\n  heartattack_data_filtered$Age,\n  breaks = c(-Inf, 17, 35, 64, Inf), \n  labels = c(\"Youth\", \"Young Adult\", \"Middle-Aged Adult\", \"Elderly\"),\n  right = TRUE\n)\n\n# Verify the new categories\ntable(heartattack_data_filtered$Age_Group)\n\n\n\n\n\n\n            Youth       Young Adult Middle-Aged Adult           Elderly \n                0              8766             13905              7329 \n\n\n\n\n\n\n\n2.3.4 Data Type Conversion\nThe data table below shows the current data type of each of the 17 columns, along with the proposed data type for conversion. To improve data handling and ensure accurate analysis, the proposed data type for each column should align with the nature of the data.\n\n\n\nVariable\nCurrent Data Type\nProposed Data Type\n\n\n\n\nAge_Group\nCharacter\nOrdered Factor\n\n\nCholesterol_Level\nDouble\nDouble\n\n\nStress_Levels\nDouble\nDouble\n\n\nHeart_Rate\nDouble\nDouble\n\n\nSystolic_BP\nDouble\nDouble\n\n\nDiastolic_BP\nDouble\nDouble\n\n\nGender\nCharacter\nFactor\n\n\nRegion\nCharacter\nFactor\n\n\nSmoking_History\nCharacter\nFactor\n\n\nDiabetes_History\nCharacter\nFactor\n\n\nHypertension_History\nCharacter\nFactor\n\n\nPhysical_Activity\nCharacter\nOrdered Factor\n\n\nDiet_Quality\nCharacter\nOrdered Factor\n\n\nAlcohol_Consumption\nCharacter\nOrdered Factor\n\n\nFamily_History\nCharacter\nFactor\n\n\nHeart_Attack_Occurrence\nCharacter\nFactor\n\n\nBMI_Category\nCharacter\nOrdered Factor\n\n\n\nThe following code chunk is used to implement the proposed data type conversions:\n\nCodeResults\n\n\n\n# Convert numeric variables\nheartattack_data_filtered &lt;- heartattack_data_filtered %&gt;%\n  mutate(\n    Age = as.integer(Age)\n  )\n\n# Convert categorical variables to factors\nheartattack_data_filtered &lt;- heartattack_data_filtered %&gt;%\n  mutate(\n    Gender = as.factor(Gender),\n    Region = as.factor(Region),\n    Smoking_History = as.factor(Smoking_History),\n    Diabetes_History = as.factor(Diabetes_History),\n    Hypertension_History = as.factor(Hypertension_History),\n    Family_History = as.factor(Family_History),\n    Heart_Attack_Occurrence = as.factor(Heart_Attack_Occurrence)\n  )\n\n# Convert ordered categorical variables\nheartattack_data_filtered &lt;- heartattack_data_filtered %&gt;%\n  mutate(\n    Physical_Activity = factor(Physical_Activity, \n                               levels = c(\"Low\", \"Moderate\", \"High\"), \n                               ordered = TRUE),\n    Diet_Quality = factor(Diet_Quality, \n                          levels = c(\"Poor\", \"Average\", \"Good\"), \n                          ordered = TRUE),\n    Alcohol_Consumption = factor(Alcohol_Consumption, \n                                 levels = c(\"None\", \"Low\", \"Moderate\", \"High\"), \n                                 ordered = TRUE),\n    BMI_Category = factor(BMI_Category, \n                          levels = c(\"Underweight\", \"Normal Weight\", \"Pre-Obese\", \"Obese\"), \n                          ordered = TRUE),\n    Age_Group = factor(Age_Group, \n                       levels = c(\"Youth\", \"Young Adult\", \"Middle-Aged Adult\", \"Elderly\"), \n                       ordered = TRUE)\n  )\n\n\n\n\n\nRows: 30,000\nColumns: 19\n$ Age                     &lt;int&gt; 56, 69, 46, 32, 60, 25, 78, 38, 56, 75, 36, 40…\n$ Gender                  &lt;fct&gt; Male, Male, Male, Female, Female, Female, Male…\n$ Region                  &lt;fct&gt; Urban, Urban, Rural, Urban, Rural, Rural, Urba…\n$ Smoking_History         &lt;fct&gt; Yes, No, Yes, No, No, No, No, Yes, No, No, No,…\n$ Diabetes_History        &lt;fct&gt; No, No, No, No, No, No, Yes, No, No, No, No, N…\n$ Hypertension_History    &lt;fct&gt; No, No, No, No, No, No, Yes, No, Yes, No, Yes,…\n$ Cholesterol_Level       &lt;dbl&gt; 186.4002, 185.1367, 210.6966, 211.1655, 223.81…\n$ Physical_Activity       &lt;ord&gt; Moderate, Low, Low, Moderate, High, Low, High,…\n$ Diet_Quality            &lt;ord&gt; Poor, Good, Average, Good, Good, Good, Poor, P…\n$ Alcohol_Consumption     &lt;ord&gt; Low, Low, Moderate, High, High, High, High, No…\n$ Stress_Levels           &lt;dbl&gt; 3.644786, 3.384056, 3.810911, 6.014878, 6.8068…\n$ BMI                     &lt;dbl&gt; 33.96135, 28.24287, 27.60121, 23.71729, 19.771…\n$ Heart_Rate              &lt;dbl&gt; 72.30153, 57.45764, 64.65870, 55.13147, 76.667…\n$ Systolic_BP             &lt;dbl&gt; 123.90209, 129.89331, 145.65490, 131.78522, 10…\n$ Diastolic_BP            &lt;dbl&gt; 85.68281, 73.52426, 71.99481, 68.21133, 92.902…\n$ Family_History          &lt;fct&gt; No, Yes, No, No, No, No, No, No, No, Yes, Yes,…\n$ Heart_Attack_Occurrence &lt;fct&gt; No, No, No, No, No, No, No, No, Yes, No, No, N…\n$ BMI_Category            &lt;ord&gt; Obese, Pre-Obese, Pre-Obese, Normal Weight, No…\n$ Age_Group               &lt;ord&gt; Middle-Aged Adult, Elderly, Middle-Aged Adult,…"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex044.html",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex044.html",
    "title": "Hands-on Exercise 4.4: Building Funnel Plot with R",
    "section": "",
    "text": "Funnel plot is a specially designed data visualisation for conducting unbiased comparison between outlets, stores or business entities.\n\n\nThe following R packages would be used:\n\n\n\nR Package\nDescription\n\n\n\n\nreadr\n\n\n\nFunnelPlotR\nFor creating funnel plots.\n\n\nggplot2\nFor creating funnel plots manually.\n\n\nknitr\nFor building static html tables.\n\n\nplotly\nFor creating interactive funnel plots.\n\n\n\n\npacman::p_load(tidyverse, FunnelPlotR, plotly, knitr)\n\n\n\n\nThe code chunk below utilises read_csv() to import the data into R:\n\ncovid19 &lt;- read_csv(\"data/COVID-19_DKI_Jakarta.csv\") %&gt;%\n  mutate_if(is.character, as.factor)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex044.html#installing-and-loading-r-packages",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex044.html#installing-and-loading-r-packages",
    "title": "Hands-on Exercise 4.4: Building Funnel Plot with R",
    "section": "",
    "text": "The following R packages would be used:\n\n\n\nR Package\nDescription\n\n\n\n\nreadr\n\n\n\nFunnelPlotR\nFor creating funnel plots.\n\n\nggplot2\nFor creating funnel plots manually.\n\n\nknitr\nFor building static html tables.\n\n\nplotly\nFor creating interactive funnel plots.\n\n\n\n\npacman::p_load(tidyverse, FunnelPlotR, plotly, knitr)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex044.html#importing-data",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex044.html#importing-data",
    "title": "Hands-on Exercise 4.4: Building Funnel Plot with R",
    "section": "",
    "text": "The code chunk below utilises read_csv() to import the data into R:\n\ncovid19 &lt;- read_csv(\"data/COVID-19_DKI_Jakarta.csv\") %&gt;%\n  mutate_if(is.character, as.factor)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex044.html#funnelplotr-methods-the-basic-plot",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex044.html#funnelplotr-methods-the-basic-plot",
    "title": "Hands-on Exercise 4.4: Building Funnel Plot with R",
    "section": "2.1 FunnelPlotR Methods: The Basic Plot",
    "text": "2.1 FunnelPlotR Methods: The Basic Plot\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Positive,\n  denominator = Death,\n  group = `Sub-district`\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 0 are outliers. \nPlot is adjusted for overdispersion."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex044.html#funnelplotr-methods-makeover-1",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex044.html#funnelplotr-methods-makeover-1",
    "title": "Hands-on Exercise 4.4: Building Funnel Plot with R",
    "section": "2.2 FunnelPlotR Methods: Makeover 1",
    "text": "2.2 FunnelPlotR Methods: Makeover 1\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",     #&lt;&lt;\n  xrange = c(0, 6500),  #&lt;&lt;\n  yrange = c(0, 0.05)   #&lt;&lt;\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex044.html#funnelplotr-methods-makeover-2",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex044.html#funnelplotr-methods-makeover-2",
    "title": "Hands-on Exercise 4.4: Building Funnel Plot with R",
    "section": "2.3 FunnelPlotR Methods: Makeover 2",
    "text": "2.3 FunnelPlotR Methods: Makeover 2\n\nfunnel_plot(\n  .data = covid19,\n  numerator = Death,\n  denominator = Positive,\n  group = `Sub-district`,\n  data_type = \"PR\",   \n  xrange = c(0, 6500),  \n  yrange = c(0, 0.05),\n  label = NA,\n  title = \"Cumulative COVID-19 Fatality Rate by Cumulative Total Number of COVID-19 Positive Cases\", #&lt;&lt;           \n  x_label = \"Cumulative COVID-19 Positive Cases\", #&lt;&lt;\n  y_label = \"Cumulative Fatality Rate\"  #&lt;&lt;\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex044.html#computing-the-basic-derived-fields",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex044.html#computing-the-basic-derived-fields",
    "title": "Hands-on Exercise 4.4: Building Funnel Plot with R",
    "section": "3.1 Computing the Basic Derived Fields",
    "text": "3.1 Computing the Basic Derived Fields\nThe following code chunk derives the cumulative death rate, and standard error of cumulative death rate:\n\ndf &lt;- covid19 %&gt;%\n  mutate(rate = Death / Positive) %&gt;%\n  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %&gt;%\n  filter(rate &gt; 0)\n\nfit.mean is then computed via the code chunk below:\n\nfit.mean &lt;- weighted.mean(df$rate, 1/df$rate.se^2)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex044.html#calculate-lower-and-upper-limits-fo-95-and-99.9-ci",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex044.html#calculate-lower-and-upper-limits-fo-95-and-99.9-ci",
    "title": "Hands-on Exercise 4.4: Building Funnel Plot with R",
    "section": "3.2 Calculate Lower and Upper Limits fo 95% and 99.9% CI",
    "text": "3.2 Calculate Lower and Upper Limits fo 95% and 99.9% CI\n\nnumber.seq &lt;- seq(1, max(df$Positive), 1)\nnumber.ll95 &lt;- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul95 &lt;- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ll999 &lt;- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul999 &lt;- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \ndfCI &lt;- data.frame(number.ll95, number.ul95, number.ll999, \n                   number.ul999, number.seq, fit.mean)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex044.html#plotting-a-static-funnel-plot",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex044.html#plotting-a-static-funnel-plot",
    "title": "Hands-on Exercise 4.4: Building Funnel Plot with R",
    "section": "3.3 Plotting a Static Funnel Plot",
    "text": "3.3 Plotting a Static Funnel Plot\n\np &lt;- ggplot(df, aes(x = Positive, y = rate)) +\n  geom_point(aes(label=`Sub-district`), \n             alpha=0.4) +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_hline(data = dfCI, \n             aes(yintercept = fit.mean), \n             size = 0.4, \n             colour = \"grey40\") +\n  coord_cartesian(ylim=c(0,0.05)) +\n  annotate(\"text\", x = 1, y = -0.13, label = \"95%\", size = 3, colour = \"grey40\") + \n  annotate(\"text\", x = 4.5, y = -0.18, label = \"99%\", size = 3, colour = \"grey40\") + \n  ggtitle(\"Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases\") +\n  xlab(\"Cumulative Number of COVID-19 Cases\") + \n  ylab(\"Cumulative Fatality Rate\") +\n  theme_light() +\n  theme(plot.title = element_text(size=12),\n        legend.position = c(0.91,0.85), \n        legend.title = element_text(size=7),\n        legend.text = element_text(size=7),\n        legend.background = element_rect(colour = \"grey60\", linetype = \"dotted\"),\n        legend.key.height = unit(0.3, \"cm\"))\np"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex044.html#interactive-funnel-plot-plotly-ggplot2",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex044.html#interactive-funnel-plot-plotly-ggplot2",
    "title": "Hands-on Exercise 4.4: Building Funnel Plot with R",
    "section": "3.4 Interactive Funnel Plot: plotly + ggplot2",
    "text": "3.4 Interactive Funnel Plot: plotly + ggplot2\n\nfp_ggplotly &lt;- ggplotly(p,\n  tooltip = c(\"label\", \n              \"x\", \n              \"y\"))\nfp_ggplotly"
  },
  {
    "objectID": "Take-Home Exercise/Take-Home_Ex01/Take-Home_Ex01b.html",
    "href": "Take-Home Exercise/Take-Home_Ex01/Take-Home_Ex01b.html",
    "title": "Take-Home Exercise 1.0: Creating Data Visualisation Beyond Default",
    "section": "",
    "text": "The maritime sector is one of the most critical components of global trade, contributing significantly to economic growth and sustainability. Understanding ship performance, fuel efficiency, and operational cost factors are essential for improving decision-making and minimizing environmental impact.\n\n\n\nThis exercise involves assuming the role of a graphical editor at an international media company that regularly publishes content on digital platforms. The company plans to release articles focused on one of the following themes:\n\nHeart Attack in Japan\nShip Performance in the Gulf of Guinea\n\nThe selected theme for this task is Ship Performance in the Gulf of Guinea and the objective is to prepare data visualisation for the article.\n\n\n\nThe dataset used in this exercise is sourced from Kaggle. It can be accessed via this link.\nThis dataset contains information on key operational metrics and attributes of various ship types in the Gulf of Guinea. The dataset includes numerical (e.g. speed_over_ground_knots, revenue_per_voyage_usd) and categorical variables (e.g. ship_type, maintenance_status) relevant to ship performance evaluation."
  },
  {
    "objectID": "Take-Home Exercise/Take-Home_Ex01/Take-Home_Ex01b.html#background",
    "href": "Take-Home Exercise/Take-Home_Ex01/Take-Home_Ex01b.html#background",
    "title": "Take-Home Exercise 1.0: Creating Data Visualisation Beyond Default",
    "section": "",
    "text": "The maritime sector is one of the most critical components of global trade, contributing significantly to economic growth and sustainability. Understanding ship performance, fuel efficiency, and operational cost factors are essential for improving decision-making and minimizing environmental impact."
  },
  {
    "objectID": "Take-Home Exercise/Take-Home_Ex01/Take-Home_Ex01b.html#the-task",
    "href": "Take-Home Exercise/Take-Home_Ex01/Take-Home_Ex01b.html#the-task",
    "title": "Take-Home Exercise 1.0: Creating Data Visualisation Beyond Default",
    "section": "",
    "text": "This exercise involves assuming the role of a graphical editor at an international media company that regularly publishes content on digital platforms. The company plans to release articles focused on one of the following themes:\n\nHeart Attack in Japan\nShip Performance in the Gulf of Guinea\n\nThe selected theme for this task is Ship Performance in the Gulf of Guinea and the objective is to prepare data visualisation for the article."
  },
  {
    "objectID": "Take-Home Exercise/Take-Home_Ex01/Take-Home_Ex01b.html#about-the-dataset",
    "href": "Take-Home Exercise/Take-Home_Ex01/Take-Home_Ex01b.html#about-the-dataset",
    "title": "Take-Home Exercise 1.0: Creating Data Visualisation Beyond Default",
    "section": "",
    "text": "The dataset used in this exercise is sourced from Kaggle. It can be accessed via this link.\nThis dataset contains information on key operational metrics and attributes of various ship types in the Gulf of Guinea. The dataset includes numerical (e.g. speed_over_ground_knots, revenue_per_voyage_usd) and categorical variables (e.g. ship_type, maintenance_status) relevant to ship performance evaluation."
  },
  {
    "objectID": "Take-Home Exercise/Take-Home_Ex01/Take-Home_Ex01b.html#loading-r-packages",
    "href": "Take-Home Exercise/Take-Home_Ex01/Take-Home_Ex01b.html#loading-r-packages",
    "title": "Take-Home Exercise 1.0: Creating Data Visualisation Beyond Default",
    "section": "2.1 Loading R Packages",
    "text": "2.1 Loading R Packages\nThe following R packages were used:\n\n\n\nR Package\nDescription\n\n\n\n\ndplyr\n\n\n\ntidyverse\n\n\n\nlubridate\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npacman::p_load(ggiraph, plotly, gifski, gganimate, ggthemes, ggridges,\n               patchwork, DT, tidyverse, dplyr, lubridate, ggdist)"
  },
  {
    "objectID": "Take-Home Exercise/Take-Home_Ex01/Take-Home_Ex01b.html#importing-the-data",
    "href": "Take-Home Exercise/Take-Home_Ex01/Take-Home_Ex01b.html#importing-the-data",
    "title": "Take-Home Exercise 1.0: Creating Data Visualisation Beyond Default",
    "section": "2.2 Importing the Data",
    "text": "2.2 Importing the Data\nThe dataset was imported into R using the read_csv function from the readr package, which is part of the tidyverse suite.\n\nship_data &lt;- read_csv(\"data/ship_performance_dataset.csv\")"
  },
  {
    "objectID": "Take-Home Exercise/Take-Home_Ex01/Take-Home_Ex01b.html#understanding-the-data-and-data-wrangling",
    "href": "Take-Home Exercise/Take-Home_Ex01/Take-Home_Ex01b.html#understanding-the-data-and-data-wrangling",
    "title": "Take-Home Exercise 1.0: Creating Data Visualisation Beyond Default",
    "section": "2.3 Understanding the Data and Data Wrangling",
    "text": "2.3 Understanding the Data and Data Wrangling\nTo gain an initial understanding of the dataset, the following code chunk utilises the glimpse function from the dplyr package. This function provides a quick overview of the dataset’s structure by displaying the first few entries of each column along with their data types.\n\nCodeResults\n\n\n\nglimpse(ship_data)\n\n\n\n\n\nRows: 2,736\nColumns: 18\n$ Date                    &lt;date&gt; 2023-06-04, 2023-06-11, 2023-06-18, 2023-06-2…\n$ Ship_Type               &lt;chr&gt; \"Container Ship\", \"Fish Carrier\", \"Container S…\n$ Route_Type              &lt;chr&gt; \"None\", \"Short-haul\", \"Long-haul\", \"Transocean…\n$ Engine_Type             &lt;chr&gt; \"Heavy Fuel Oil (HFO)\", \"Steam Turbine\", \"Dies…\n$ Maintenance_Status      &lt;chr&gt; \"Critical\", \"Good\", \"Fair\", \"Fair\", \"Fair\", \"F…\n$ Speed_Over_Ground_knots &lt;dbl&gt; 12.59756, 10.38758, 20.74975, 21.05510, 13.742…\n$ Engine_Power_kW         &lt;dbl&gt; 2062.9840, 1796.0574, 1648.5567, 915.2618, 108…\n$ Distance_Traveled_nm    &lt;dbl&gt; 1030.9436, 1060.4864, 658.8741, 1126.8225, 144…\n$ Draft_meters            &lt;dbl&gt; 14.132284, 14.653083, 7.199261, 11.789063, 9.7…\n$ Weather_Condition       &lt;chr&gt; \"Moderate\", \"Rough\", \"Moderate\", \"Moderate\", \"…\n$ Cargo_Weight_tons       &lt;dbl&gt; 1959.0179, 162.3947, 178.0409, 1737.3853, 260.…\n$ Operational_Cost_USD    &lt;dbl&gt; 483832.35, 483388.00, 448543.40, 261349.61, 28…\n$ Revenue_per_Voyage_USD  &lt;dbl&gt; 292183.27, 883765.79, 394018.75, 87551.38, 676…\n$ Turnaround_Time_hours   &lt;dbl&gt; 25.86708, 63.24820, 49.41815, 22.40911, 64.158…\n$ Efficiency_nm_per_kWh   &lt;dbl&gt; 1.4551789, 0.2903614, 0.4995945, 0.7029057, 1.…\n$ Seasonal_Impact_Score   &lt;dbl&gt; 1.4156533, 0.8856478, 1.4058132, 1.3707043, 0.…\n$ Weekly_Voyage_Count     &lt;dbl&gt; 1, 6, 9, 1, 8, 7, 3, 6, 8, 2, 9, 4, 3, 7, 7, 3…\n$ Average_Load_Percentage &lt;dbl&gt; 93.76925, 93.89537, 96.21824, 66.19370, 80.008…\n\n\n\n\n\nBased on the output generated, the dataset consists of 2,736 rows and 18 columns. Based on the Date column, it seems that each row represents weekly data of shipping routes.\n\n2.3.1 Duplicate and Missing Value Checks\nDuplicate Data Check\nAs duplicates can skew analysis results, identifying and removing them is crucial for subsequent analysis. Thus, a check for duplicate records was done using the dplyr package as shown in the code chunk below:\n\nCodeResults\n\n\n\nduplicate_count &lt;- sum(duplicated(ship_data))\ncat(\"Number of duplicate rows:\", duplicate_count, \"\\n\")\n\nif (duplicate_count &gt; 0) {\n  duplicate_rows &lt;- ship_data[duplicated(ship_data), ]\n  print(duplicate_rows)\n} else {\n  cat(\"No duplicate rows found.\\n\")\n}\n\n\n\n\n\nNumber of duplicate rows: 0 \n\n\nNo duplicate rows found.\n\n\n\n\n\nBased on the output, there are no duplicate records in the dataset.\nMissing Value Check\nMissing values in a dataset can introduce bias and affect the accuracy of subsequent analysis, potentially leading to misleading results. The following code chunk counts the number of missing values (NA) in the dataset:\n\nmissing_value_count &lt;- sum(rowSums(is.na(ship_data)) &gt; 0)\ncat(\"Number of rows with missing values:\", missing_value_count, \"\\n\")\n\nNumber of rows with missing values: 0 \n\n\nAlthough the output indicates that there are no missing values (NA) in the dataset, a further assessment of categorical columns is required to check for unrecorded data. The following code chunk generates the unique values for each categorical column in the dataset:\n\nCodeResults\n\n\n\ncategorical_columns &lt;- names(ship_data)[sapply(ship_data, is.character)]\n\nfor (col in categorical_columns) {\n  cat(\"\\nUnique values in\", col, \":\\n\")\n  print(unique(ship_data[[col]]))\n}\n\n\n\n\n\n\nUnique values in Ship_Type :\n[1] \"Container Ship\" \"Fish Carrier\"   \"Bulk Carrier\"   \"None\"          \n[5] \"Tanker\"        \n\nUnique values in Route_Type :\n[1] \"None\"         \"Short-haul\"   \"Long-haul\"    \"Transoceanic\" \"Coastal\"     \n\nUnique values in Engine_Type :\n[1] \"Heavy Fuel Oil (HFO)\" \"Steam Turbine\"        \"Diesel\"              \n[4] \"None\"                \n\nUnique values in Maintenance_Status :\n[1] \"Critical\" \"Good\"     \"Fair\"     \"None\"    \n\nUnique values in Weather_Condition :\n[1] \"Moderate\" \"Rough\"    \"Calm\"     \"None\"    \n\n\n\n\n\nFrom the results, it was observed that some of the columns containing categorical data contained the value None, which may indicate missing or unrecorded data rather than an actual category. To quantify this, the following code counts the occurrences of None values in the affected categorical columns:\n\nCodeResults\n\n\n\ncategorical_columns &lt;- names(ship_data)[sapply(ship_data, is.character)]\n\nmissing_categorical_counts &lt;- data.frame(Column = categorical_columns, \n                                         Missing_Count = sapply(ship_data[categorical_columns], function(x) sum(is.na(x) | x == \"None\")))\n\n\n\n\n\n                               Column Missing_Count\nShip_Type                   Ship_Type           136\nRoute_Type                 Route_Type           136\nEngine_Type               Engine_Type           136\nMaintenance_Status Maintenance_Status           136\nWeather_Condition   Weather_Condition           136\n\n\n\n\n\nBased on the results obtained above, each affected column contains 136 None values, representing approximately 5% of the total observations in the dataset. Since the percentage of missing values is relatively low, records containing None will be excluded from subsequent analysis.\n\n\n2.3.2 Creating New Variables\nThe dataset covers the following time period: 4 June 2023 to 30 June 2024. To facilitate time-based analysis, the dates have been grouped into a new variable called Month, which will represent the month of each record in a \"MM-YYYY\" format.\nThe following code was used to generate these variables:\n\nship_data$Month &lt;- format(ship_data$Date, \"%Y-%m\")  \n\nhead(ship_data$Month)\n\n[1] \"2023-06\" \"2023-06\" \"2023-06\" \"2023-06\" \"2023-07\" \"2023-07\"\n\n\nProfit (USD)\nProfit is a key financial metric that reflects the overall economic performance of a ship’s operation. To incorporate profit into the dataset, a new variable was created based on the difference between Revenue_per_Voyage_USD and Operational_Cost_USD.\n\nship_data$Profit_USD &lt;- ship_data$Revenue_per_Voyage_USD - ship_data$Operational_Cost_USD\n\nsummary(ship_data$Profit_USD)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n-444584   40885  262716  266219  492216  977168 \n\n\nBased on the summary statistics of the newly created Profit_USD, we can observe that some of the ships are loss-making, as shown by the minimum value.\n\n\n2.3.3 Data Type Conversion\nThe data table below shows the current data type of each of the 19 columns, along with the proposed data type for conversion. To improve data handling and ensure accurate analysis, the proposed data type for each column should align with the nature of the data.\n\n\n\nVariable\nCurrent Data Type\nProposed Data Type\n\n\n\n\nDate\nDate\nDate\n\n\nShip_Type\nCharacter\nFactor\n\n\nRoute_Type\nCharacter\nFactor\n\n\nEngine_Type\nCharacter\nFactor\n\n\nMaintenance_Status\nCharacter\nOrdered Factor\n\n\nSpeed_Over_Ground_knots\nDouble\nDouble\n\n\nEngine_Power_kW\nDouble\nDouble\n\n\nDistance_Traveled_nm\nDouble\nDouble\n\n\nDraft_meters\nDouble\nDouble\n\n\nWeather_Condition\nCharacter\nOrdered Factor\n\n\nCargo_Weight_tons\nDouble\nDouble\n\n\nOperational_Cost_USD\nDouble\nDouble\n\n\nRevenue_per_Voyage_USD\nDouble\nDouble\n\n\nTurnaround_Time_hours\nDouble\nDouble\n\n\nEfficiency_nm_per_kWh\nDouble\nDouble\n\n\nSeasonal_Impact_Score\nDouble\nDouble\n\n\nWeekly_Voyage_Count\nDouble\nInteger\n\n\nAverage_Load_Percentage\nDouble\nDouble\n\n\nMonth\nCharacter\nDate\n\n\nProfit_USD\nDouble\nDouble\n\n\n\nThe following code chunk is used to implement the proposed data type conversions:\n\nCodeResults\n\n\n\nship_data$Ship_Type &lt;- as.factor(ship_data$Ship_Type)\nship_data$Route_Type &lt;- as.factor(ship_data$Route_Type)\nship_data$Engine_Type &lt;- as.factor(ship_data$Engine_Type)\n\nship_data$Maintenance_Status &lt;- factor(ship_data$Maintenance_Status, \n                                       levels = c(\"Critical\", \"Fair\", \"Good\",\"None\"), \n                                       ordered = TRUE)\n\nship_data$Weather_Condition &lt;- factor(ship_data$Weather_Condition, \n                                      levels = c(\"Calm\", \"Moderate\", \"Rough\", \"Severe\",\"None\"), \n                                      ordered = TRUE)\n\nship_data$Month &lt;- as.Date(paste0(ship_data$Month, \"-01\"), format=\"%Y-%m-%d\")\n\nship_data$Weekly_Voyage_Count &lt;- as.integer(ship_data$Weekly_Voyage_Count)\n\n\n\n\n\nRows: 2,736\nColumns: 20\n$ Date                    &lt;date&gt; 2023-06-04, 2023-06-11, 2023-06-18, 2023-06-2…\n$ Ship_Type               &lt;fct&gt; Container Ship, Fish Carrier, Container Ship, …\n$ Route_Type              &lt;fct&gt; None, Short-haul, Long-haul, Transoceanic, Tra…\n$ Engine_Type             &lt;fct&gt; Heavy Fuel Oil (HFO), Steam Turbine, Diesel, S…\n$ Maintenance_Status      &lt;ord&gt; Critical, Good, Fair, Fair, Fair, Fair, Critic…\n$ Speed_Over_Ground_knots &lt;dbl&gt; 12.59756, 10.38758, 20.74975, 21.05510, 13.742…\n$ Engine_Power_kW         &lt;dbl&gt; 2062.9840, 1796.0574, 1648.5567, 915.2618, 108…\n$ Distance_Traveled_nm    &lt;dbl&gt; 1030.9436, 1060.4864, 658.8741, 1126.8225, 144…\n$ Draft_meters            &lt;dbl&gt; 14.132284, 14.653083, 7.199261, 11.789063, 9.7…\n$ Weather_Condition       &lt;ord&gt; Moderate, Rough, Moderate, Moderate, Moderate,…\n$ Cargo_Weight_tons       &lt;dbl&gt; 1959.0179, 162.3947, 178.0409, 1737.3853, 260.…\n$ Operational_Cost_USD    &lt;dbl&gt; 483832.35, 483388.00, 448543.40, 261349.61, 28…\n$ Revenue_per_Voyage_USD  &lt;dbl&gt; 292183.27, 883765.79, 394018.75, 87551.38, 676…\n$ Turnaround_Time_hours   &lt;dbl&gt; 25.86708, 63.24820, 49.41815, 22.40911, 64.158…\n$ Efficiency_nm_per_kWh   &lt;dbl&gt; 1.4551789, 0.2903614, 0.4995945, 0.7029057, 1.…\n$ Seasonal_Impact_Score   &lt;dbl&gt; 1.4156533, 0.8856478, 1.4058132, 1.3707043, 0.…\n$ Weekly_Voyage_Count     &lt;int&gt; 1, 6, 9, 1, 8, 7, 3, 6, 8, 2, 9, 4, 3, 7, 7, 3…\n$ Average_Load_Percentage &lt;dbl&gt; 93.76925, 93.89537, 96.21824, 66.19370, 80.008…\n$ Month                   &lt;date&gt; 2023-06-01, 2023-06-01, 2023-06-01, 2023-06-0…\n$ Profit_USD              &lt;dbl&gt; -191649.081, 400377.787, -54524.657, -173798.2…"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex051.html",
    "href": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex051.html",
    "title": "Hands-on Exercise 5.1: Creating Ternary Plot with R",
    "section": "",
    "text": "The following R packages will be used in this exercise:\n\n\n\n\n\n\n\nPackage\nDescription\n\n\n\n\nggtern\nPlots ternary diagrams\n\n\nPlotly R\nCreates interactive web-based graphs via plotly’s JavaScript graphing library, plotly.js.\n\n\n\nThe following code chunk loads the required packages into R:\n\npacman::p_load(plotly, ggtern, tidyverse)\n\n\n\n\nThe read_csv() function of the readr package will be used to import espopagsex2000to2018_tidy.csv into R:\n\npop_data &lt;- read_csv(\"data/respopagsex2000to2018_tidy.csv\") \n\n\n\n\nThe mutate() function of the dplyr package is used to derive three new measures: young, active and old.\n\nagpop_mutated &lt;- pop_data %&gt;%\n  mutate(`Year` = as.character(Year))%&gt;%\n  spread(AG, Population) %&gt;%\n  mutate(YOUNG = rowSums(.[4:8]))%&gt;%\n  mutate(ACTIVE = rowSums(.[9:16]))  %&gt;%\n  mutate(OLD = rowSums(.[17:21])) %&gt;%\n  mutate(TOTAL = rowSums(.[22:24])) %&gt;%\n  filter(Year == 2018)%&gt;%\n  filter(TOTAL &gt; 0)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex051.html#installing-and-loading-the-packages",
    "href": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex051.html#installing-and-loading-the-packages",
    "title": "Hands-on Exercise 5.1: Creating Ternary Plot with R",
    "section": "",
    "text": "The following R packages will be used in this exercise:\n\n\n\n\n\n\n\nPackage\nDescription\n\n\n\n\nggtern\nPlots ternary diagrams\n\n\nPlotly R\nCreates interactive web-based graphs via plotly’s JavaScript graphing library, plotly.js.\n\n\n\nThe following code chunk loads the required packages into R:\n\npacman::p_load(plotly, ggtern, tidyverse)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex051.html#importing-data",
    "href": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex051.html#importing-data",
    "title": "Hands-on Exercise 5.1: Creating Ternary Plot with R",
    "section": "",
    "text": "The read_csv() function of the readr package will be used to import espopagsex2000to2018_tidy.csv into R:\n\npop_data &lt;- read_csv(\"data/respopagsex2000to2018_tidy.csv\")"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex051.html#data-preparation",
    "href": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex051.html#data-preparation",
    "title": "Hands-on Exercise 5.1: Creating Ternary Plot with R",
    "section": "",
    "text": "The mutate() function of the dplyr package is used to derive three new measures: young, active and old.\n\nagpop_mutated &lt;- pop_data %&gt;%\n  mutate(`Year` = as.character(Year))%&gt;%\n  spread(AG, Population) %&gt;%\n  mutate(YOUNG = rowSums(.[4:8]))%&gt;%\n  mutate(ACTIVE = rowSums(.[9:16]))  %&gt;%\n  mutate(OLD = rowSums(.[17:21])) %&gt;%\n  mutate(TOTAL = rowSums(.[22:24])) %&gt;%\n  filter(Year == 2018)%&gt;%\n  filter(TOTAL &gt; 0)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex051.html#plotting-a-static-ternary-diagram",
    "href": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex051.html#plotting-a-static-ternary-diagram",
    "title": "Hands-on Exercise 5.1: Creating Ternary Plot with R",
    "section": "2.1 Plotting a Static Ternary Diagram",
    "text": "2.1 Plotting a Static Ternary Diagram\nThe ggtern() function of the ggetern package is used to create a simple ternary plot:\n\nggtern(data=agpop_mutated,aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  geom_point()\n\n\n\n\n\n\n\n\nThe following code chunk adds the graph title “Population Structure, 2015” and theme_rgbw() to the ternary plot generated above:\n\nggtern(data=agpop_mutated, aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  geom_point() +\n  labs(title=\"Population structure, 2015\") +\n  theme_rgbw()"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex051.html#plotting-an-interactive-ternary-diagram",
    "href": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex051.html#plotting-an-interactive-ternary-diagram",
    "title": "Hands-on Exercise 5.1: Creating Ternary Plot with R",
    "section": "2.2 Plotting an Interactive Ternary Diagram",
    "text": "2.2 Plotting an Interactive Ternary Diagram\n\nlabel &lt;- function(txt) {\n  list(\n    text = txt, \n    x = 0.1, y = 1,\n    ax = 0, ay = 0,\n    xref = \"paper\", yref = \"paper\", \n    align = \"center\",\n    font = list(family = \"serif\", size = 15, color = \"white\"),\n    bgcolor = \"#b3b3b3\", bordercolor = \"black\", borderwidth = 2\n  )\n}\n\n# reusable function for axis formatting\naxis &lt;- function(txt) {\n  list(\n    title = txt, tickformat = \".0%\", tickfont = list(size = 10)\n  )\n}\n\nternaryAxes &lt;- list(\n  aaxis = axis(\"Young\"), \n  baxis = axis(\"Active\"), \n  caxis = axis(\"Old\")\n)\n\n# Initiating a plotly visualization \nplot_ly(\n  agpop_mutated, \n  a = ~YOUNG, \n  b = ~ACTIVE, \n  c = ~OLD, \n  color = I(\"black\"), \n  type = \"scatterternary\"\n) %&gt;%\n  layout(\n    annotations = label(\"Ternary Markers\"), \n    ternary = ternaryAxes\n  )"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex052.html",
    "href": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex052.html",
    "title": "Hands-on Exercise 5.2: Visual Correlation Analysis",
    "section": "",
    "text": "The code chunk below installs and launches corrplot, ggpubr, plotly, and tidyverse in R:\n\npacman::p_load(corrplot, ggstatsplot, tidyverse)\n\n\n\n\nThe read_csv() function of the readr package will be used to import wine_quality.csv into R:\n\nwine &lt;- read_csv(\"data/wine_quality.csv\")"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex052.html#installing-and-loading-the-packages",
    "href": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex052.html#installing-and-loading-the-packages",
    "title": "Hands-on Exercise 5.2: Visual Correlation Analysis",
    "section": "",
    "text": "The code chunk below installs and launches corrplot, ggpubr, plotly, and tidyverse in R:\n\npacman::p_load(corrplot, ggstatsplot, tidyverse)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex052.html#importing-data",
    "href": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex052.html#importing-data",
    "title": "Hands-on Exercise 5.2: Visual Correlation Analysis",
    "section": "",
    "text": "The read_csv() function of the readr package will be used to import wine_quality.csv into R:\n\nwine &lt;- read_csv(\"data/wine_quality.csv\")"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex052.html#building-a-basic-correlation-matrix",
    "href": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex052.html#building-a-basic-correlation-matrix",
    "title": "Hands-on Exercise 5.2: Visual Correlation Analysis",
    "section": "2.1 Building a Basic Correlation Matrix",
    "text": "2.1 Building a Basic Correlation Matrix\n\npairs(wine[,1:11])\n\n\n\n\n\n\n\n\n\npairs(wine[,2:12])"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex052.html#drawing-the-lower-corner",
    "href": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex052.html#drawing-the-lower-corner",
    "title": "Hands-on Exercise 5.2: Visual Correlation Analysis",
    "section": "2.2 Drawing the Lower Corner",
    "text": "2.2 Drawing the Lower Corner\nTo show the lower half of the correlation matrix, the upper panel argument will be used as shown in the code chunk below:\n\npairs(wine[,2:12], upper.panel = NULL)\n\n\n\n\n\n\n\n\nSimilarly, we can use the lower.panel argument to show the upper half of the correlation matrix:\n\npairs(wine[,2:12], lower.panel = NULL)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex052.html#including-correlation-coefficients",
    "href": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex052.html#including-correlation-coefficients",
    "title": "Hands-on Exercise 5.2: Visual Correlation Analysis",
    "section": "2.3 Including Correlation Coefficients",
    "text": "2.3 Including Correlation Coefficients\npanel.cor function will be used to show the correlation coefficient of each pair of variables:\n\npanel.cor &lt;- function(x, y, digits=2, prefix=\"\", cex.cor, ...) {\nusr &lt;- par(\"usr\")\non.exit(par(usr))\npar(usr = c(0, 1, 0, 1))\nr &lt;- abs(cor(x, y, use=\"complete.obs\"))\ntxt &lt;- format(c(r, 0.123456789), digits=digits)[1]\ntxt &lt;- paste(prefix, txt, sep=\"\")\nif(missing(cex.cor)) cex.cor &lt;- 0.8/strwidth(txt)\ntext(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)\n}\n\npairs(wine[,2:12], \n      upper.panel = panel.cor)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex052.html#the-basic-plot",
    "href": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex052.html#the-basic-plot",
    "title": "Hands-on Exercise 5.2: Visual Correlation Analysis",
    "section": "3.1 The Basic Plot",
    "text": "3.1 The Basic Plot\n\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11)\n\n\n\n\n\n\n\n\n\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11,\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  title    = \"Correlogram for wine dataset\",\n  subtitle = \"Four pairs are no significant at p &lt; 0.05\"\n)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex052.html#getting-started-with-corrplot",
    "href": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex052.html#getting-started-with-corrplot",
    "title": "Hands-on Exercise 5.2: Visual Correlation Analysis",
    "section": "5.1 Getting Started with corrplot",
    "text": "5.1 Getting Started with corrplot\nThe code chunk below uses cor() to compute the correlation matrix of the wine data frame:\n\nwine.cor &lt;- cor(wine[, 1:11])\n\nThe code chunk below uses corrplot() to plot the corrgram based on default settings:\n\ncorrplot(wine.cor)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex052.html#working-with-visual-geometrics",
    "href": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex052.html#working-with-visual-geometrics",
    "title": "Hands-on Exercise 5.2: Visual Correlation Analysis",
    "section": "5.2 Working with Visual Geometrics",
    "text": "5.2 Working with Visual Geometrics\n\ncorrplot(wine.cor, \n         method = \"ellipse\") \n\n\n\n\n\n\n\n\n\n5.2.1 Trying Out Other Visual Geometrics\n\nSquareColorPieNumber\n\n\n\ncorrplot(wine.cor, \n         method = \"square\") \n\n\n\n\n\n\n\n\n\n\n\ncorrplot(wine.cor, \n         method = \"color\") \n\n\n\n\n\n\n\n\n\n\n\ncorrplot(wine.cor, \n         method = \"pie\") \n\n\n\n\n\n\n\n\n\n\n\ncorrplot(wine.cor, \n         method = \"number\")"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex052.html#working-with-mixed-layout",
    "href": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex052.html#working-with-mixed-layout",
    "title": "Hands-on Exercise 5.2: Visual Correlation Analysis",
    "section": "5.3 Working with Mixed Layout",
    "text": "5.3 Working with Mixed Layout\nThe code chunk below plots a corrgram with a mixed visual matrix with one half showing ellipses, and the other half showing numbers:\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex052.html#combining-corrgram-with-the-significant-test",
    "href": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex052.html#combining-corrgram-with-the-significant-test",
    "title": "Hands-on Exercise 5.2: Visual Correlation Analysis",
    "section": "5.4 Combining Corrgram with the Significant Test",
    "text": "5.4 Combining Corrgram with the Significant Test\nWe are interested to know which pair of variables and their correlation coefficients are statistically significant in statistical analysis:\n\nwine.sig = cor.mtest(wine.cor, conf.level= .95)\n\ncorrplot(wine.cor,\n         method = \"number\",\n         type = \"lower\",\n         diag = FALSE,\n         tl.col = \"black\",\n         tl.srt = 45,\n         p.mat = wine.sig$p,\n         sig.level = .05)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex052.html#reordering-a-corrgram",
    "href": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex052.html#reordering-a-corrgram",
    "title": "Hands-on Exercise 5.2: Visual Correlation Analysis",
    "section": "5.5 Reordering a Corrgram",
    "text": "5.5 Reordering a Corrgram\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               order=\"AOE\",\n               tl.col = \"black\")"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex052.html#reordering-a-correlation-matrix-using-hclust",
    "href": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex052.html#reordering-a-correlation-matrix-using-hclust",
    "title": "Hands-on Exercise 5.2: Visual Correlation Analysis",
    "section": "5.6 Reordering a Correlation Matrix using hclust",
    "text": "5.6 Reordering a Correlation Matrix using hclust\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         tl.pos = \"lt\",\n         tl.col = \"black\",\n         order=\"hclust\",\n         hclust.method = \"ward.D\",\n         addrect = 3)\n\n\n\n\n\n\n\n\n\n5.6.1 Trying Other Order Methods’\nAlphabet\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"square\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               order=\"alphabet\",\n               tl.col = \"black\")\n\n\n\n\n\n\n\n\nFPC\n\ncorrplot.mixed(wine.cor, \n               tl.pos = \"lt\",\n               diag = \"l\",\n               order=\"FPC\",\n               tl.col = \"black\")"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex053.html",
    "href": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex053.html",
    "title": "Hands-on Exercise 5.3: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "",
    "text": "Heatmaps are generally good at:\n\nShowing variances across multiple variables,\nRevealing patterns,\nDisplaying whether any variables are similar to each other, and\nDetecting if any correlations exist between them.\n\n\n\n\npacman::p_load(seriation, dendextend, heatmaply, tidyverse)\n\n\n\n\nThe code chunk below uses read_csv() of readr to import WHData-2018.csv into R:\n\nwh &lt;- read_csv(\"data/WHData-2018.csv\")\n\n\n\n\nThe code chunk below changes the rows by country name instead of row numbers:\n\nrow.names(wh) &lt;- wh$Country\n\n\n\n\nThe data needs to be transformed into a data matrix in order to create the heatmap:\n\nwh1 &lt;- dplyr::select(wh, c(3, 7:12))\nwh_matrix &lt;- data.matrix(wh)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex053.html#installing-and-launching-r-packages",
    "href": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex053.html#installing-and-launching-r-packages",
    "title": "Hands-on Exercise 5.3: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "",
    "text": "pacman::p_load(seriation, dendextend, heatmaply, tidyverse)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex053.html#importing-the-dataset",
    "href": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex053.html#importing-the-dataset",
    "title": "Hands-on Exercise 5.3: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "",
    "text": "The code chunk below uses read_csv() of readr to import WHData-2018.csv into R:\n\nwh &lt;- read_csv(\"data/WHData-2018.csv\")"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex053.html#preparing-the-data",
    "href": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex053.html#preparing-the-data",
    "title": "Hands-on Exercise 5.3: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "",
    "text": "The code chunk below changes the rows by country name instead of row numbers:\n\nrow.names(wh) &lt;- wh$Country"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex053.html#transforming-the-data-frame-into-a-matrix",
    "href": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex053.html#transforming-the-data-frame-into-a-matrix",
    "title": "Hands-on Exercise 5.3: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "",
    "text": "The data needs to be transformed into a data matrix in order to create the heatmap:\n\nwh1 &lt;- dplyr::select(wh, c(3, 7:12))\nwh_matrix &lt;- data.matrix(wh)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex053.html#heatmap-of-r-stats",
    "href": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex053.html#heatmap-of-r-stats",
    "title": "Hands-on Exercise 5.3: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "2.1 heatmap() of R Stats",
    "text": "2.1 heatmap() of R Stats\nThe code chunk below uses heatmap() of base stats to plot a heatmap:\n\nwh_heatmap &lt;- heatmap(wh_matrix,\n                      Rowv=NA, Colv=NA)\n\n\n\n\n\n\n\n\nIndicating NA in the Rowv and Colv switches off the plotting the row and column dendrograms. The code chunk below removes the argument to show how the heatmap looks like with the dendrograms plotted:\n\nwh_heatmap &lt;- heatmap(wh_matrix)\n\n\n\n\n\n\n\n\nThe Happiness Score variable has relatively higher values than the other variables (which are mostly below 1.0). Hence, there is a need to normalise the matrix via the scale argument. The margins argument is used to ensure that the x-axis labels are displayed completely while cexRow and cexCol are used to define the font size:\n\nwh_heatmap &lt;- heatmap(wh_matrix,\n                      scale=\"column\",\n                      cexRow = 0.6, \n                      cexCol = 0.8,\n                      margins = c(10, 4))"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex053.html#working-with-heatmaply",
    "href": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex053.html#working-with-heatmaply",
    "title": "Hands-on Exercise 5.3: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "3.1 Working with heatmaply",
    "text": "3.1 Working with heatmaply\n\nheatmaply(mtcars)\n\n\n\n\n\nThe code chunk uses -c(1, 2, 3, 4, 5) to create a vector that lists the columns to be excluded from the wh_matrix data frame when plotting the heatmap:\n\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)])"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex053.html#data-transformation",
    "href": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex053.html#data-transformation",
    "title": "Hands-on Exercise 5.3: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "3.2 Data Transformation",
    "text": "3.2 Data Transformation\nIn multivariate data sets, variables in the data sets include variables that reflect different types of measurements, which have their own individual ranges.\nTo ensure that all variables have comparable values, data transformation is often used before clustering.\n\n3.2.1 Scaling Method\nIf all variables are assumed to be normally distributed, then scaling would bring them closer to the standard normal distribution. The scale column supports column and row scaling.\n\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)],\n          scale = \"column\")\n\n\n\n\n\n\n\n3.2.2 Normalising Method\nWhen variables come from different (non-normal) distributions, use the normalise function to bring the data to 0 - 1 scale.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]))\n\n\n\n\n\n\n\n3.2.3 Percentising Method\nSimilar to ranking the variables. However, instead of keeping the rank variables, they are divided by the maximal rank. Interpretation is generally clearer as each value is a percent of observation that has its value or less:\n\nheatmaply(percentize(wh_matrix[, -c(1, 2, 4, 5)]))"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex053.html#manual-approach",
    "href": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex053.html#manual-approach",
    "title": "Hands-on Exercise 5.3: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "4.1 Manual Approach",
    "text": "4.1 Manual Approach\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\")"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex053.html#statistical-approach",
    "href": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex053.html#statistical-approach",
    "title": "Hands-on Exercise 5.3: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "4.2 Statistical Approach",
    "text": "4.2 Statistical Approach\nTo determine the best clustering method and number of clusters, the dend_expend() and find_k() functions would be used.\ndend_expend():\n\nwh_d &lt;- dist(normalize(wh_matrix[, -c(1, 2, 4, 5)]), method = \"euclidean\")\ndend_expend(wh_d)[[3]]\n\n  dist_methods hclust_methods     optim\n1      unknown         ward.D 0.6137851\n2      unknown        ward.D2 0.6289186\n3      unknown         single 0.4774362\n4      unknown       complete 0.6434009\n5      unknown        average 0.6701688\n6      unknown       mcquitty 0.5020102\n7      unknown         median 0.5901833\n8      unknown       centroid 0.6338734\n\n\nThe average method should be used since it has the highest optimum value of 0.67.\nfind_k():\n\nwh_clust &lt;- hclust(wh_d, method = \"average\")\nnum_k &lt;- find_k(wh_clust)\nplot(num_k)\n\n\n\n\n\n\n\n\nThe number of clusters = 3.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"average\",\n          k_row = 3)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex053.html#seriation",
    "href": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex053.html#seriation",
    "title": "Hands-on Exercise 5.3: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "4.3 Seriation",
    "text": "4.3 Seriation\nOptimal Leaf Ordering (OLO):\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"OLO\")\n\n\n\n\n\nGruvaeus and Wainer:\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"GW\")\n\n\n\n\n\nMean\n\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"mean\")\n\n\n\n\n\nNone:\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"none\")"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex053.html#working-with-colour-palettes",
    "href": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex053.html#working-with-colour-palettes",
    "title": "Hands-on Exercise 5.3: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "4.4 Working with Colour Palettes",
    "text": "4.4 Working with Colour Palettes\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"none\",\n          colors = Blues)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex053.html#the-finishing-touch",
    "href": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex053.html#the-finishing-touch",
    "title": "Hands-on Exercise 5.3: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "4.5 The Finishing Touch",
    "text": "4.5 The Finishing Touch\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          Colv=NA,\n          seriate = \"none\",\n          colors = Blues,\n          k_row = 5,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main=\"World Happiness Score and Variables by Country, 2018 \\nDataTransformation using Normalise Method\",\n          xlab = \"World Happiness Indicators\",\n          ylab = \"World Countries\"\n          )"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex054.html",
    "href": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex054.html",
    "title": "Hands-on Exercise 5.4: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "",
    "text": "Parallel coordinates plot compares multiple variables together and seeing the relationships between. This visualisation technique is more often found in academic and scientific studies rather than business / consumer data visualisations.\nParallel coordinates is used to bring meaningful multivariate patterns and comparisons to light.\n\n\n\npacman::p_load(GGally, parallelPlot, tidyverse)\n\n\n\n\nThe read_csv() function is used to import WHData-2018.csv into R:\n\nwh &lt;- read_csv(\"data/WHData-2018.csv\")"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex054.html#installing-and-launching-r-packages",
    "href": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex054.html#installing-and-launching-r-packages",
    "title": "Hands-on Exercise 5.4: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "",
    "text": "pacman::p_load(GGally, parallelPlot, tidyverse)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex054.html#importing-data",
    "href": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex054.html#importing-data",
    "title": "Hands-on Exercise 5.4: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "",
    "text": "The read_csv() function is used to import WHData-2018.csv into R:\n\nwh &lt;- read_csv(\"data/WHData-2018.csv\")"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex054.html#plotting-a-simple-parallel-coordinates-plot",
    "href": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex054.html#plotting-a-simple-parallel-coordinates-plot",
    "title": "Hands-on Exercise 5.4: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "2.1 Plotting a Simple Parallel Coordinates Plot",
    "text": "2.1 Plotting a Simple Parallel Coordinates Plot\nThe code chunk below uses ggparcoord() to plot a basic static parallel coordinates plot:\n\nggparcoord(data = wh, \n           columns = c(7:12))"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex054.html#plotting-a-parallel-coordinates-with-boxplot",
    "href": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex054.html#plotting-a-parallel-coordinates-with-boxplot",
    "title": "Hands-on Exercise 5.4: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "2.2 Plotting a Parallel Coordinates with Boxplot",
    "text": "2.2 Plotting a Parallel Coordinates with Boxplot\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Parallel Coordinates Plot of World Happines Variables\")"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex054.html#parallel-coordinates-with-facet",
    "href": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex054.html#parallel-coordinates-with-facet",
    "title": "Hands-on Exercise 5.4: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "2.3 Parallel Coordinates with Facet",
    "text": "2.3 Parallel Coordinates with Facet\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex054.html#rotating-x-axis-text-label",
    "href": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex054.html#rotating-x-axis-text-label",
    "title": "Hands-on Exercise 5.4: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "2.4 Rotating X-Axis Text Label",
    "text": "2.4 Rotating X-Axis Text Label\nThe theme() function in ggplot2 is used to rotate the text labels:\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region) + \n  theme(axis.text.x = element_text(angle = 30))"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex054.html#adjusting-the-rotated-x-axis-text-label",
    "href": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex054.html#adjusting-the-rotated-x-axis-text-label",
    "title": "Hands-on Exercise 5.4: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "2.5 Adjusting the Rotated X-Axis Text Label",
    "text": "2.5 Adjusting the Rotated X-Axis Text Label\nhjust is used to prevent label overlap with the plot:\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region) + \n  theme(axis.text.x = element_text(angle = 30, hjust=1))"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex054.html#the-basic-plot",
    "href": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex054.html#the-basic-plot",
    "title": "Hands-on Exercise 5.4: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "3.1 The Basic Plot",
    "text": "3.1 The Basic Plot\nThe code chunk uses parallelPlot() to plot an interactive parallel coordinates plot:\n\nwh &lt;- wh %&gt;%\n  select(\"Happiness score\", c(7:12))\nparallelPlot(wh,\n             width = 320,\n             height = 250)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex054.html#rotate-axis-label",
    "href": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex054.html#rotate-axis-label",
    "title": "Hands-on Exercise 5.4: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "3.2 Rotate Axis Label",
    "text": "3.2 Rotate Axis Label\nThe axis label is rotated using the rotateTitle argument:\n\nparallelPlot(wh,\n             rotateTitle = TRUE)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex054.html#changing-the-colour-scheme",
    "href": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex054.html#changing-the-colour-scheme",
    "title": "Hands-on Exercise 5.4: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "3.3 Changing the Colour Scheme",
    "text": "3.3 Changing the Colour Scheme\n\nparallelPlot(wh,\n             continuousCS = \"YlOrRd\",\n             rotateTitle = TRUE)\n\n\n\n\n\nThe code provided above did not change the colour scheme despite including the argument continuousCS. We would need to included the refColumnDim argument ensure that the continuousCS effect shows:\n(Ref: https://cran.r-project.org/web/packages/parallelPlot/vignettes/introduction-to-parallelplot.html)\n\nparallelPlot(wh,\n             refColumnDim = \"Happiness score\",\n             continuousCS = \"YlOrRd\",\n             rotateTitle = TRUE)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex054.html#parallel-coordinates-plot-with-histogram",
    "href": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex054.html#parallel-coordinates-plot-with-histogram",
    "title": "Hands-on Exercise 5.4: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "3.4 Parallel Coordinates Plot with Histogram",
    "text": "3.4 Parallel Coordinates Plot with Histogram\nThe histoVisibility argument is used to plot histogram along the axis of each variable:\n\nhistoVisibility &lt;- rep(TRUE, ncol(wh))\nparallelPlot(wh,\n             rotateTitle = TRUE,\n             histoVisibility = histoVisibility)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex055.html",
    "href": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex055.html",
    "title": "Hands-on Exercise 5.5: Treemap Visualisation with R",
    "section": "",
    "text": "pacman::p_load(treemap, treemapify, tidyverse) \n\n\n\n\nThe read_csv() is used to import realis2018.csv into R:\n\nrealis2018 &lt;- read_csv(\"data/realis2018.csv\")\n\n\n\n\nAs realis2018 is in transaction record form, which is highly disaggregated and not appropriate to be used to plot a treemap.\n\n\n\nrealis2018_grouped &lt;- group_by(realis2018, `Project Name`,\n                               `Planning Region`, `Planning Area`, \n                               `Property Type`, `Type of Sale`)\nrealis2018_summarised &lt;- summarise(realis2018_grouped, \n                          `Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE),\n                          `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),\n                          `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE), \n                          `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))\n\n\n\n\n\nrealis2018_summarised &lt;- realis2018 %&gt;% \n  group_by(`Project Name`,`Planning Region`, \n           `Planning Area`, `Property Type`, \n           `Type of Sale`) %&gt;%\n  summarise(`Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE), \n            `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),\n            `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE),\n            `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex055.html#installing-and-launching-r-packages",
    "href": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex055.html#installing-and-launching-r-packages",
    "title": "Hands-on Exercise 5.5: Treemap Visualisation with R",
    "section": "",
    "text": "pacman::p_load(treemap, treemapify, tidyverse)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex055.html#importing-the-data",
    "href": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex055.html#importing-the-data",
    "title": "Hands-on Exercise 5.5: Treemap Visualisation with R",
    "section": "",
    "text": "The read_csv() is used to import realis2018.csv into R:\n\nrealis2018 &lt;- read_csv(\"data/realis2018.csv\")"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex055.html#data-wrangling-and-manipulation",
    "href": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex055.html#data-wrangling-and-manipulation",
    "title": "Hands-on Exercise 5.5: Treemap Visualisation with R",
    "section": "",
    "text": "As realis2018 is in transaction record form, which is highly disaggregated and not appropriate to be used to plot a treemap.\n\n\n\nrealis2018_grouped &lt;- group_by(realis2018, `Project Name`,\n                               `Planning Region`, `Planning Area`, \n                               `Property Type`, `Type of Sale`)\nrealis2018_summarised &lt;- summarise(realis2018_grouped, \n                          `Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE),\n                          `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),\n                          `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE), \n                          `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))\n\n\n\n\n\nrealis2018_summarised &lt;- realis2018 %&gt;% \n  group_by(`Project Name`,`Planning Region`, \n           `Planning Area`, `Property Type`, \n           `Type of Sale`) %&gt;%\n  summarise(`Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE), \n            `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),\n            `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE),\n            `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex055.html#designing-a-static-treemap",
    "href": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex055.html#designing-a-static-treemap",
    "title": "Hands-on Exercise 5.5: Treemap Visualisation with R",
    "section": "2.1 Designing a Static Treemap",
    "text": "2.1 Designing a Static Treemap\nThe treemap() function of the Treemap package is used to plot a treemap showing the distribution of median unit prices and total unit sold of resole condominium by geographic hierarchy.\nThe following code selects records belonging to resale condominium:\n\nrealis2018_selected &lt;- realis2018_summarised %&gt;%\n  filter(`Property Type` == \"Condominium\", `Type of Sale` == \"Resale\")"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex055.html#using-basic-arguments",
    "href": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex055.html#using-basic-arguments",
    "title": "Hands-on Exercise 5.5: Treemap Visualisation with R",
    "section": "2.2 Using Basic Arguments",
    "text": "2.2 Using Basic Arguments\nThe code chunk below creates a treemap using the following argument: index, vSize and vColor.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\nNote:\n\nIndex: The index vector must consist of at least two column names or else no hierarchy treemap will be plotted.\nvSize: The column must not contain negative values."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex055.html#working-with-vcolor-and-type-arguments",
    "href": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex055.html#working-with-vcolor-and-type-arguments",
    "title": "Hands-on Exercise 5.5: Treemap Visualisation with R",
    "section": "2.3 Working with vColor and type Arguments",
    "text": "2.3 Working with vColor and type Arguments\nThe type argument is defined as value in the code chunk below:\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type = \"value\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex055.html#the-value-type-treemap",
    "href": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex055.html#the-value-type-treemap",
    "title": "Hands-on Exercise 5.5: Treemap Visualisation with R",
    "section": "2.4 The “Value” Type Treemap",
    "text": "2.4 The “Value” Type Treemap\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"value\",\n        palette=\"RdYlBu\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex055.html#the-manual-type-treemap",
    "href": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex055.html#the-manual-type-treemap",
    "title": "Hands-on Exercise 5.5: Treemap Visualisation with R",
    "section": "2.5 The “Manual” Type Treemap",
    "text": "2.5 The “Manual” Type Treemap\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"RdYlBu\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\nThe following code chunk uses a single colour palette instead of diverging colour palette. Single colour palette should be used in cases where the values are all positive or negative:\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex055.html#working-with-the-algorithm-argument",
    "href": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex055.html#working-with-the-algorithm-argument",
    "title": "Hands-on Exercise 5.5: Treemap Visualisation with R",
    "section": "2.6 Working with the algorithm Argument",
    "text": "2.6 Working with the algorithm Argument\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        algorithm = \"squarified\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex055.html#using-sortid",
    "href": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex055.html#using-sortid",
    "title": "Hands-on Exercise 5.5: Treemap Visualisation with R",
    "section": "2.7 Using sortID",
    "text": "2.7 Using sortID\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        algorithm = \"pivotSize\",\n        sortID = \"Median Transacted Price\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex055.html#designing-a-basic-treemap",
    "href": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex055.html#designing-a-basic-treemap",
    "title": "Hands-on Exercise 5.5: Treemap Visualisation with R",
    "section": "3.1 Designing a Basic Treemap",
    "text": "3.1 Designing a Basic Treemap\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`),\n       layout = \"scol\",\n       start = \"bottomleft\") + \n  geom_treemap() +\n  scale_fill_gradient(low = \"light blue\", high = \"blue\")"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex055.html#defining-hierarchy",
    "href": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex055.html#defining-hierarchy",
    "title": "Hands-on Exercise 5.5: Treemap Visualisation with R",
    "section": "3.2 Defining Hierarchy",
    "text": "3.2 Defining Hierarchy\nGroup by Planning Region\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`),\n       start = \"topleft\") + \n  geom_treemap()\n\n\n\n\n\n\n\n\nGroup by Planning R\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`,\n           subgroup2 = `Planning Area`)) + \n  geom_treemap()\n\n\n\n\n\n\n\n\nAdding Boundary Line\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`,\n           subgroup2 = `Planning Area`)) + \n  geom_treemap() +\n  geom_treemap_subgroup2_border(colour = \"gray40\",\n                                size = 2) +\n  geom_treemap_subgroup_border(colour = \"gray20\")"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex055.html#installing-the-d3treer-package",
    "href": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex055.html#installing-the-d3treer-package",
    "title": "Hands-on Exercise 5.5: Treemap Visualisation with R",
    "section": "4.1 Installing the d3treeR Package",
    "text": "4.1 Installing the d3treeR Package\n\nlibrary(d3treeR)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex055.html#designing-an-interactive-treemap",
    "href": "Hands-on Exercise/Hands-on_Ex05/Hands-on_Ex055.html#designing-an-interactive-treemap",
    "title": "Hands-on Exercise 5.5: Treemap Visualisation with R",
    "section": "4.2 Designing an Interactive Treemap",
    "text": "4.2 Designing an Interactive Treemap\nThe code uses treemap() to build a treemap by using selected variables in condominium data.frame.\n\ntm &lt;- treemap(realis2018_summarised,\n        index=c(\"Planning Region\", \"Planning Area\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"value\",\n        title=\"Private Residential Property Sold, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\nd3tree() is then used to build an interactive treemap:\n\nd3tree(tm,rootname = \"Singapore\" )"
  },
  {
    "objectID": "In-Class Exercise/In-Class_Ex04/In-Class_Ex04.html",
    "href": "In-Class Exercise/In-Class_Ex04/In-Class_Ex04.html",
    "title": "In-class Exercise 4.0",
    "section": "",
    "text": "pacman::p_load(haven, SmartEDA, tidyverse, tidymodels, ggplot2)\n\n\n\n\nThe code chunk below uses read_csv( ) to import exam_data.csv into R and save it into a tibble data frame:\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "In-Class Exercise/In-Class_Ex04/In-Class_Ex04.html#installing-and-launching-the-r-packages",
    "href": "In-Class Exercise/In-Class_Ex04/In-Class_Ex04.html#installing-and-launching-the-r-packages",
    "title": "In-class Exercise 4.0",
    "section": "",
    "text": "pacman::p_load(haven, SmartEDA, tidyverse, tidymodels, ggplot2)"
  },
  {
    "objectID": "In-Class Exercise/In-Class_Ex04/In-Class_Ex04.html#importing-data",
    "href": "In-Class Exercise/In-Class_Ex04/In-Class_Ex04.html#importing-data",
    "title": "In-class Exercise 4.0",
    "section": "",
    "text": "The code chunk below uses read_csv( ) to import exam_data.csv into R and save it into a tibble data frame:\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Take-Home Exercise/Take-Home_Ex01/Take-Home_Ex01b.html#financial",
    "href": "Take-Home Exercise/Take-Home_Ex01/Take-Home_Ex01b.html#financial",
    "title": "Take-Home Exercise 1.0: Creating Data Visualisation Beyond Default",
    "section": "3.1 Financial",
    "text": "3.1 Financial\n\nObservation X: Tankers have the lowest median profit amongst all ship types while Bulk Carriers have a bimodal distribution of profits.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Filtering out \"None\" values from the Ship_Type Column:\nfiltered_ship_data &lt;- ship_data %&gt;%   filter(Ship_Type != \"None\")\n\np1 &lt;- ggplot(data=filtered_ship_data,\n       aes(y=Profit_USD/1e6, x=Ship_Type, fill = Ship_Type)) +\n  geom_boxplot(notch=TRUE, show.legend = FALSE) +\n  scale_y_continuous(labels = scales::dollar_format(suffix = \"M\", prefix = \"\"), limits = c(-1.0,1.5)) + \n  labs(\n    x = \"Ship Type\", \n    y = \"Profit (in USD Million)\"  \n  ) +\n  coord_flip() +\n  theme_classic()\n\n\np2 &lt;- ggplot(data = filtered_ship_data, aes(x = Profit_USD / 1e6, y = Ship_Type)) +\n  geom_density_ridges(aes(group = Ship_Type, fill = Ship_Type), alpha = 0.8, show.legend = FALSE) +\n  scale_x_continuous(labels = scales::dollar_format(suffix = \"M\", prefix = \"\"), limits = c(-1.0,1.5)) +\n  labs(\n    x = \"Profit (in USD Million)\",  # Custom x-axis title\n    y = \"Ship Type\"\n  ) +\n  theme_classic() +\n  theme(axis.text.y = element_text(angle = 0))\n\n\ncombined_plot &lt;- (p1 / p2) +\n  plot_layout(guides = \"collect\") + \n  plot_annotation(\n    title = \"Profitability by Ship Types\",\n    theme = theme(\n      plot.title = element_text(hjust = 0.5, size = 16, face = \"bold\")\n    )\n  )\n\n\ncombined_plot\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInsights\n\n\n\n\nTankers have the lowest median profit amongst all ship types, as indicated by the boxplot and further supported by the peak of the ridgeline plot being closer to zero.\nAlthough the median profits for Fish Carriers, Container Ships and Bulk Carriers appear relatively similar (as indicated by the boxplot), the distribution of profits differ across all ship types.\na. Bulk Carriers display a bimodal profit distribution, strongly suggesting two distinct groups within this category. It implies that some Bulk Carriers are highly profitable while others struggle.\nb. Both Fish Carriers and Container Ships exhibit unimodal distributions. However, Container Ships appear to have a higher profit variability as indicated by the greater range and IQR in the boxplot."
  },
  {
    "objectID": "Take-Home Exercise/Take-Home_Ex01/Take-Home_Ex01b.html#profitability-by-ship-types",
    "href": "Take-Home Exercise/Take-Home_Ex01/Take-Home_Ex01b.html#profitability-by-ship-types",
    "title": "Take-Home Exercise 1.0: Creating Data Visualisation Beyond Default",
    "section": "3.2 Profitability by Ship Types",
    "text": "3.2 Profitability by Ship Types\nIn this section, we will analyze the profit distribution across different ship types to gain insights into their profitability trends and variability.\nThe code chunk below utilizes the patchwork package to combine both boxplots and ridgeline plots, allowing for a comprehensive visualization of profit distributions across ship types.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Filtering out \"None\" values from the Ship_Type Column:\nfiltered_ship_data1 &lt;- ship_data %&gt;%   filter(Ship_Type != \"None\")\n\nmedians &lt;- filtered_ship_data1 %&gt;%\n  group_by(Ship_Type) %&gt;%\n  summarize(Median_Profit = median(Profit_USD/1e6))\n\nfiltered_ship_data1 &lt;- filtered_ship_data1 %&gt;%\n  left_join(medians, by = \"Ship_Type\")\n\n\np1 &lt;- ggplot(data=filtered_ship_data1,\n       aes(y=Profit_USD/1e6, x=Ship_Type, fill = Ship_Type)) +\n  geom_boxplot(notch=TRUE, show.legend = FALSE) +\n  \n   geom_text(\n    data = medians,\n    aes(label = sprintf(\"%.2fM\", Median_Profit), y = Median_Profit),\n    nudge_y = 0.1,\n    size = 2.5\n  ) +\n  \n  scale_y_continuous(labels = scales::dollar_format(suffix = \"M\", prefix = \"\"), limits = c(-1.0,1.5)) + \n  labs(\n    x = \"Ship Type\", \n    y = \"Profit (in USD Million)\"  \n  ) +\n  coord_flip() +\n  theme_classic()\n\n\np2 &lt;- ggplot(data = filtered_ship_data1, aes(x = Profit_USD / 1e6, y = Ship_Type)) +\n  geom_density_ridges(aes(group = Ship_Type, fill = Ship_Type), alpha = 0.8, show.legend = FALSE) +\n  scale_x_continuous(labels = scales::dollar_format(suffix = \"M\", prefix = \"\"), limits = c(-1.0,1.5)) +\n  labs(\n    x = \"Profit (in USD Million)\",  # Custom x-axis title\n    y = \"Ship Type\"\n  ) +\n  theme_classic() +\n  theme(axis.text.y = element_text(angle = 0))\n\n\ncombined_plot &lt;- (p1 / p2) +\n  plot_layout(guides = \"collect\") + \n  plot_annotation(\n    title = \"Profitability by Ship Types\",\n    theme = theme(\n      plot.title = element_text(hjust = 0.5, size = 16, face = \"bold\")\n    )\n  )\n\n\n\n\n\n\n\n\n\n\nInsights\n\n\n\n\nTankers have the lowest median profit at US$0.23M amongst all ship types, as indicated by the boxplot and further supported by the peak of the ridgeline plot being closer to zero.\nAlthough the median profits for Fish Carriers, Container Ships and Bulk Carriers appear relatively similar (as indicated by the boxplot), the distribution of profits differ across all ship types.\n(a) Bulk Carriers display a bimodal profit distribution, strongly suggesting two distinct groups within this category. It implies that some Bulk Carriers are highly profitable while others struggle.\n(b) Both Fish Carriers and Container Ships exhibit unimodal distributions. However, Container Ships appear to have a higher profit variability as indicated by the greater range and IQR in the boxplot."
  },
  {
    "objectID": "Take-Home Exercise/Take-Home_Ex01/Take-Home_Ex01b.html#section",
    "href": "Take-Home Exercise/Take-Home_Ex01/Take-Home_Ex01b.html#section",
    "title": "Take-Home Exercise 1.0: Creating Data Visualisation Beyond Default",
    "section": "3.2",
    "text": "3.2\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Filter out Ship_Type = \"None\" and Maintenance_Status = \"None\"\nfiltered_ship_data2 &lt;- ship_data %&gt;%\n  filter(Ship_Type != \"None\", Maintenance_Status != \"None\")\n\n# Create stacked bar chart with Brewer Palette\nggplot(filtered_ship_data2, aes(x = Ship_Type, fill = Maintenance_Status)) +\n  geom_bar(position = \"fill\", color=\"black\") +  # Stacked proportionally\n  scale_y_continuous(labels = scales::percent_format()) +  # Convert to percentage\n  scale_fill_brewer(palette = \"Pastel1\") +  # Change color palette\n  labs(\n    title = \"Maintenance Condition by Ship Type\",\n    x = \"Ship Type\",\n    y = \"Percentage\",\n    fill = \"Maintenance Status\"\n  ) +\n  theme_minimal() + \n  theme(\n    plot.title = element_text(hjust = 0.5, size = 16, face = \"bold\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInsights\n\n\n\n\nTankers have the lowest median profit at US$0.23M amongst all ship types, as indicated by the boxplot and further supported by the peak of the ridgeline plot being closer to zero.\nAlthough the median profits for Fish Carriers, Container Ships and Bulk Carriers appear relatively similar (as indicated by the boxplot), the distribution of profits differ across all ship types.\n(a) Bulk Carriers display a bimodal profit distribution, strongly suggesting two distinct groups within this category. It implies that some Bulk Carriers are highly profitable while others struggle.\n(b) Both Fish Carriers and Container Ships exhibit unimodal distributions. However, Container Ships appear to have a higher profit variability as indicated by the greater range and IQR in the boxplot."
  },
  {
    "objectID": "Take-Home Exercise/Take-Home_Ex01/Take-Home_Ex01b.html#profitability-by-route-types",
    "href": "Take-Home Exercise/Take-Home_Ex01/Take-Home_Ex01b.html#profitability-by-route-types",
    "title": "Take-Home Exercise 1.0: Creating Data Visualisation Beyond Default",
    "section": "3.2 Profitability by Route Types",
    "text": "3.2 Profitability by Route Types\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Filter out Route_Type = \"None\"\nfiltered_ship_data6 &lt;- ship_data %&gt;%\n  filter(Route_Type != \"None\")\n\n# Plot\nggplot(filtered_ship_data6, \n       aes(x = Profit_USD / 1e6,\n           y = Route_Type)) +\n  stat_halfeye(adjust=0.5, scale=0.6, justification=-0.2, show.legend = FALSE) +\n  geom_boxplot(width = .2, outlier.shape = NA, show.legend = FALSE) + \n  stat_dots(side = \"left\", scale=0.5, justification=1.2, show.legend = FALSE) +\n  \n  labs(\n    x = \"Profit (in USD Millions)\",\n    y = \"Route Type\",\n    title = \"Profit Distribution by Route Type\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(hjust = 0.5, size = 14, face = \"bold\")\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInsights\n\n\n\n\nTankers have the lowest median profit at US$0.23M amongst all ship types, as indicated by the boxplot and further supported by the peak of the ridgeline plot being closer to zero.\nAlthough the median profits for Fish Carriers, Container Ships and Bulk Carriers appear relatively similar (as indicated by the boxplot), the distribution of profits differ across all ship types.\n(a) Bulk Carriers display a bimodal profit distribution, strongly suggesting two distinct groups within this category. It implies that some Bulk Carriers are highly profitable while others struggle.\n(b) Both Fish Carriers and Container Ships exhibit unimodal distributions. However, Container Ships appear to have a higher profit variability as indicated by the greater range and IQR in the boxplot."
  },
  {
    "objectID": "Take-Home Exercise/Take-Home_Ex01/Take-Home_Ex01b.html#maintenance-status-by-ship-types",
    "href": "Take-Home Exercise/Take-Home_Ex01/Take-Home_Ex01b.html#maintenance-status-by-ship-types",
    "title": "Take-Home Exercise 1.0: Creating Data Visualisation Beyond Default",
    "section": "3.4 Maintenance Status by Ship Types",
    "text": "3.4 Maintenance Status by Ship Types\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Filter out Ship_Type = \"None\" and Maintenance_Status = \"None\"\nfiltered_ship_data2 &lt;- ship_data %&gt;%\n  filter(Ship_Type != \"None\", Maintenance_Status != \"None\")\n\n# Create stacked bar chart with Brewer Palette\nggplot(filtered_ship_data2, aes(x = Ship_Type, fill = Maintenance_Status)) +\n  geom_bar(position = \"fill\", color=\"black\") +  # Stacked proportionally\n  scale_y_continuous(labels = scales::percent_format()) +  # Convert to percentage\n  scale_fill_brewer(palette = \"Pastel1\") +  # Change color palette\n  labs(\n    title = \"Maintenance Status by Ship Type\",\n    x = \"Ship Type\",\n    y = \"Percentage\",\n    fill = \"Maintenance Status\"\n  ) +\n  theme_minimal() + \n  theme(\n    plot.title = element_text(hjust = 0.5, size = 16, face = \"bold\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInsights\n\n\n\n[WRITE INSIGHTS HEREEEE]"
  },
  {
    "objectID": "Take-Home Exercise/Take-Home_Ex01/Take-Home_Ex01b.html#sales-and-profit-by-route-types",
    "href": "Take-Home Exercise/Take-Home_Ex01/Take-Home_Ex01b.html#sales-and-profit-by-route-types",
    "title": "Take-Home Exercise 1.0: Creating Data Visualisation Beyond Default",
    "section": "3.3 Sales and Profit by Route Types",
    "text": "3.3 Sales and Profit by Route Types\nIn this section, we will analyse the sales and profitability by route types based on quarterly trends. However, as June 2023 represents an incomplete quarter, we will exclude it from our analysis to ensure consistency in our quarterly comparisons.\nThe analysis assumes that the fiscal year starts in July. Hence, we will define the quarters as follows:\n\nQ1 = July 2023 - September 2023\nQ2 = October 2023 - December 2023\nQ3 = January 2024 - March 2024\nQ4 = April 2024 - June 2024\n\nEach chart is divided into four quadrants:\n\nHigh Profit, High Sales (Top Right)\nHigh Profit, Low Sales(Top Left): This could indicate potential issues with cost management or pricing.\nLow Profit, High Sales (Bottom Right)\nLow Profit, Low Sales (Bottom Left): Potentially requires attention.\n\nThe code chunk below generates a facet gird consisting of bubble charts, with each panel representing a quarterly breakdown of sales and profitability by route type. The bubble size reflects total weekly voyages to further aid in understanding how different route types perform over time.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nroute_summary &lt;- ship_data %&gt;%\n  filter(Route_Type != \"None\") %&gt;%  # Exclude Route_Type = \"None\"\n  filter(!(year(Month) == 2023 & month(Month) == 6)) %&gt;%  # Exclude June 2023\n  mutate(Quarter = case_when(\n    month(Month) %in% 7:9  ~ \"Q1\",  # July - September\n    month(Month) %in% 10:12 ~ \"Q2\", # October - December\n    month(Month) %in% 1:3  ~ \"Q3\",  # January - March\n    month(Month) %in% 4:6  ~ \"Q4\"   # April - June\n  )) %&gt;%\n  filter(!is.na(Quarter)) %&gt;% \n  group_by(Quarter, Route_Type) %&gt;%\n  summarise(\n    Total_Sales = sum(Revenue_per_Voyage_USD, na.rm = TRUE),\n    Total_Profit = sum(Profit_USD, na.rm = TRUE),\n    Total_Weekly_Voyages = sum(Weekly_Voyage_Count, na.rm = TRUE) \n  ) %&gt;%\n  mutate(\n    Sales_Percentile = percent_rank(Total_Sales), \n    Profit_Percentile = percent_rank(Total_Profit)\n  )\n\n\nggplot(route_summary, aes(x = Sales_Percentile, y = Profit_Percentile, \n                          size = Total_Weekly_Voyages, color = Route_Type)) +\n  geom_point(alpha = 0.7) + \n  geom_hline(yintercept = 0.5, linetype = \"dashed\", color = \"black\") +\n  geom_vline(xintercept = 0.5, linetype = \"dashed\", color = \"black\") +  \n  scale_size(range = c(3, 15), name = \"Total Weekly Voyages\") + \n  scale_x_continuous(labels = scales::percent_format()) +\n  scale_y_continuous(labels = scales::percent_format()) +\n  labs(\n    title = \"Sales and Profit by Route Types\",\n    x = \"Sales Percentile\",\n    y = \"Profit Percentile\",\n    color = \"Route Type\",\n    size = \"Total Weekly Voyages\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(hjust = 0.5, size = 14, face = \"bold\"),\n    legend.position = \"right\"\n  ) +\n  facet_wrap(~ Quarter, ncol = 2)\n\n\n\n\n\n\n\n\n\n\nInsights\n\n\n\n\nWith the exception of Q2, Long-Haul Routes predominantly occupy the top-right quadrant, indicating strong performance in both sales and profit across most quarters.\nCoastal Routes consistently rank above 50th percentile in profitability across all quarters, suggesting their high-margin nature. However, their sales performance fluctuates.\nTransoceanic Routes consistently rank below the 50th percentile in profitability across all quarters. In terms of sales, they exhibit the lowest sales in Q1 and Q2 but show improvements in Q3 and Q4. They ranked the lowest in terms of profitability and sales in Q1 and Q2.\nWith the exception of Q2, Short-Haul Routes exhibit both low profitability and sales in Q3 and Q4 (replacing Transoceanic Routes), thus positioning it as an under-performing route. In addition, they record the lowest number of voyages in Q3."
  },
  {
    "objectID": "Take-Home Exercise/Take-Home_Ex01/Take-Home_Ex01b.html#overall-revenue-cost-and-cargo-weight-trend-by-month",
    "href": "Take-Home Exercise/Take-Home_Ex01/Take-Home_Ex01b.html#overall-revenue-cost-and-cargo-weight-trend-by-month",
    "title": "Take-Home Exercise 1.0: Creating Data Visualisation Beyond Default",
    "section": "3.1 Overall Revenue, Cost and Cargo Weight Trend by Month",
    "text": "3.1 Overall Revenue, Cost and Cargo Weight Trend by Month\nThis section provides a time-series analysis of revenue, cost, and cargo weight trends across the observed period to identify key patterns and insights.\nThe code chunk below plots a combination of bar and line charts. Cargo weight is represented by a bar chart while revenue and operational costs are illustrated as line plots.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmonthly_summary &lt;- ship_data %&gt;%\n  group_by(Month) %&gt;%\n  summarise(\n    Total_Revenue = sum(Revenue_per_Voyage_USD, na.rm = TRUE),\n    Total_Cost = sum(Operational_Cost_USD, na.rm = TRUE),\n    Total_Cargo_Weight = sum(Cargo_Weight_tons, na.rm = TRUE)\n  )\n\nmonthly_summary$Month &lt;- as.Date(paste0(monthly_summary$Month, \"-01\"), format=\"%Y-%m-%d\")\n\nmax_revenue &lt;- max(monthly_summary$Total_Revenue/1e6, na.rm = TRUE)\nmax_cargo &lt;- max(monthly_summary$Total_Cargo_Weight/1e6, na.rm = TRUE)\nscaling_factor &lt;- max_revenue / max_cargo  \n\n\nggplot(monthly_summary, aes(x = Month)) +\n  geom_col(aes(y = Total_Cargo_Weight/1e6*scaling_factor, fill = \"Cargo Weight (Million Tons)\"), alpha = 0.6) + \n  geom_line(aes(y = Total_Revenue/1e6, color = \"Revenue (in USD Million)\"), size = 1.2) + \n  geom_line(aes(y = Total_Cost/1e6, color = \"Operational Cost (in USD Million)\"), size = 1.2, linetype = \"dashed\") +\n  scale_y_continuous(\n    name = \"Revenue & Cost (in USD Million)\", \n    labels = scales::dollar_format(suffix = \"M\", prefix = \"\"),\n    sec.axis = sec_axis(~ ./scaling_factor, name = \"Cargo Weight (Million Tons)\")  \n  ) +\n  scale_x_date(\n    date_labels = \"%b %Y\",\n    breaks = seq(min(monthly_summary$Month), max(monthly_summary$Month), by = \"1 month\")\n  ) +\n  labs(\n    title = \"Revenue, Cost, and Cargo Weight by Month\",\n    x = \"Month\",\n    fill = \"Metric\",\n    color = \"Metric\"\n  ) +\n  scale_fill_manual(values = c(\"Cargo Weight (Million Tons)\" = \"lightblue\")) +  \n  scale_color_manual(values = c(\n    \"Revenue (in USD Million)\" = \"black\",\n    \"Operational Cost (in USD Million)\" = \"darkred\"\n  )) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(hjust = 0.5, size = 14, face = \"bold\"),\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    legend.position = \"top\"\n  )\n\n\n\n\n\n\n\n\n\n\nInsights\n\n\n\n\nRevenue consistently exceeds operational costs across all months, indicating that operations remain profitable throughout the observed period.\nRevenue, operational costs and cargo weight exhibit similar trends. In months where cargo weight increases, both revenue and costs rise accordingly, and vice versa. This suggests a positive correlation between all three variables.\nThere is no clear growth trend over the observed period, as fluctuations in cargo weight, revenue, and costs occur at different points. Further research could be undertaken to understand if these variations could be attributed to seasonal demand shifts or external factors such as global economic conditions affecting shipping volumes."
  },
  {
    "objectID": "Take-Home Exercise/Take-Home_Ex01/Take-Home_Ex01b.html#shipping-volumes-by-route-types",
    "href": "Take-Home Exercise/Take-Home_Ex01/Take-Home_Ex01b.html#shipping-volumes-by-route-types",
    "title": "Take-Home Exercise 1.0: Creating Data Visualisation Beyond Default",
    "section": "3.5 Shipping Volumes by Route Types",
    "text": "3.5 Shipping Volumes by Route Types\n\nfiltered_data &lt;- ship_data %&gt;%\n  filter(Route_Type != \"None\") %&gt;%\n  filter(!(year(Month) == 2023 & month(Month) == 6)) %&gt;%  # Exclude June 2023\n  mutate(\n    Quarter = case_when(\n      month(Month) %in% 7:9  ~ \"Q1 (Jul-Sep)\",  # Q1: July - September\n      month(Month) %in% 10:12 ~ \"Q2 (Oct-Dec)\", # Q2: October - December\n      month(Month) %in% 1:3  ~ \"Q3 (Jan-Mar)\",  # Q3: January - March\n      month(Month) %in% 4:6  ~ \"Q4 (Apr-Jun)\"   # Q4: April - June\n    )\n  ) %&gt;%\n  filter(!is.na(Quarter))  # Ensure valid quarter data\n\n# Summarize Data: Total Weekly Voyages and Cargo Weight per Route Type per Quarter\nsummary_data &lt;- filtered_data %&gt;%\n  group_by(Quarter, Route_Type) %&gt;%\n  summarise(\n    Total_Voyages = sum(Weekly_Voyage_Count, na.rm = TRUE),\n    Total_Cargo_Weight = sum(Cargo_Weight_tons, na.rm = TRUE),\n    .groups = \"drop\"\n  )\n\n# Define Scaling Factor for Secondary Axis\nscaling_factor &lt;- max(summary_data$Total_Voyages, na.rm = TRUE) / \n                  max(summary_data$Total_Cargo_Weight, na.rm = TRUE)\n\n# Plot: Bar Chart (Voyages) + Line Chart (Cargo Weight) with 2x2 Facet by Quarter\nggplot(summary_data, aes(x = Route_Type)) +\n  geom_col(aes(y = Total_Voyages, fill = \"Total Voyages\"), alpha = 0.7) +  # Bar chart\n  geom_line(aes(y = Total_Cargo_Weight * scaling_factor, group = 1, color = \"Total Cargo Weight\"), size = 1.2) +  # Line chart\n  geom_point(aes(y = Total_Cargo_Weight * scaling_factor, color = \"Total Cargo Weight\"), size = 3) +  # Points for line chart\n  scale_y_continuous(\n    name = \"Total Voyages\",\n    labels = scales::comma_format(),\n    sec.axis = sec_axis(~ . / scaling_factor, name = \"Total Cargo Weight (tons)\")\n  ) +\n  scale_fill_manual(values = c(\"Total Voyages\" = \"lightblue\")) +  # Bar color\n  scale_color_manual(values = c(\"Total Cargo Weight\" = \"black\")) +  # Line color\n  labs(\n    title = \"Total Voyages and Cargo Weight by Route Type (Faceted by Quarter)\",\n    x = \"Route Type\",\n    fill = \"Metric\",\n    color = \"Metric\"\n  ) +\n  facet_wrap(~ Quarter, ncol = 2) +  # Flip for better readability\n  theme_minimal() +\n  theme(\n    plot.title = element_text(hjust = 0.5, size = 14, face = \"bold\"),\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    legend.position = \"top\"\n  )"
  },
  {
    "objectID": "Take-Home Exercise/Take-Home_Ex01/Take-Home_Ex01b.html#average-load-percentage-by-ship-type-and-route-types",
    "href": "Take-Home Exercise/Take-Home_Ex01/Take-Home_Ex01b.html#average-load-percentage-by-ship-type-and-route-types",
    "title": "Take-Home Exercise 1.0: Creating Data Visualisation Beyond Default",
    "section": "3.4 Average Load Percentage by Ship Type and Route Types",
    "text": "3.4 Average Load Percentage by Ship Type and Route Types\nThis section examines the distribution of average load percentage across different ship types and routes types. By visualising the density distribution of load percentage, this section aims to understand how efficiently different ship types utilise their cargo capacity on various routes.\nThe code chunk below plots the density distributions of average load percentage for different ship types across route types using geom_density. A reference line representing the median load percentage for each route type is added to provide a benchmark for further interpretation.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfiltered_data2 &lt;- ship_data %&gt;%\n  filter(Ship_Type != \"None\", Route_Type != \"None\")\n\nmedian_values &lt;- filtered_data2 %&gt;%\n  group_by(Route_Type) %&gt;%\n  summarise(Median_Load = median(Average_Load_Percentage, na.rm = TRUE), .groups = \"drop\")\n\n\nggplot(filtered_data2, aes(x = Average_Load_Percentage, color = Ship_Type)) +\n  geom_density(alpha = 0.7) +  \n  geom_vline(data = median_values, aes(xintercept = Median_Load), \n             linetype = \"dashed\", size = 0.5, color = \"black\") +\n  geom_text(data = median_values, \n            aes(x = Median_Load, y = 0, \n                label = sprintf(\"Median: %.1f%%\", Median_Load)), \n            hjust = 1.1, vjust = -1.5, size = 2.5, color = \"black\") + \n  labs(\n    title = \"Average Load Percentage by Ship Types Across Routes\",\n    x = \"Average Load Percentage (%)\",\n    y = \"Density\",\n    color = \"Ship Type\"\n  ) +\n  facet_wrap(~ Route_Type, ncol = 2) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(hjust = 0.5, size = 14, face = \"bold\")\n  )\n\n\n\n\n\n\n\n\n\n\nInsights\n\n\n\n\nCoastal Routes: Tankers exhibit a left-skewed distribution, with a distinct peak in the 90% - 95% range, indicating a higher frequency of tankers operating at high load capacities. In contrast, other ship types demonstrate a more uniform distribution.\nLong-Haul Routes: All ship types exhibit a relatively uniform distribution.\nShort-Haul Routes: Container Ships exhibit a right-skewed distribution, with a peak in the 60% - 65% range, indicating a higher frequency of container ships operating with lower load capacities. In contrast, both Bulk Carriers and Tankers exhibit a left-skew distribution, suggesting a tendency toward higher load capacities.\nTransoceanic Routes: Most ship types exhibit a relatively uniform distribution, except for Bulk Carriers, which display a distinct peak in the 80% - 85% range. This indicates a higher concentration of bulk carriers operating within this load percentage."
  },
  {
    "objectID": "Take-Home Exercise/Take-Home_Ex01/Take-Home_Ex01b.html#financial-metrics",
    "href": "Take-Home Exercise/Take-Home_Ex01/Take-Home_Ex01b.html#financial-metrics",
    "title": "Take-Home Exercise 1.0: Creating Data Visualisation Beyond Default",
    "section": "3.1 Financial Metrics",
    "text": "3.1 Financial Metrics\n\n3.1.1 Overview of Revenue, Cost and Cargo Weight Trending by Month\nThis section provides a time-series analysis of revenue, cost, and cargo weight trends across the observed period to identify key patterns and insights.\nThe code chunk below plots a combination of bar and line charts. Cargo weight is represented by a bar chart while revenue and operational costs are illustrated as line plots.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmonthly_summary &lt;- ship_data %&gt;%\n  group_by(Month) %&gt;%\n  summarise(\n    Total_Revenue = sum(Revenue_per_Voyage_USD, na.rm = TRUE),\n    Total_Cost = sum(Operational_Cost_USD, na.rm = TRUE),\n    Total_Cargo_Weight = sum(Cargo_Weight_tons, na.rm = TRUE)\n  )\n\nmonthly_summary$Month &lt;- as.Date(paste0(monthly_summary$Month, \"-01\"), format=\"%Y-%m-%d\")\n\nmax_revenue &lt;- max(monthly_summary$Total_Revenue/1e6, na.rm = TRUE)\nmax_cargo &lt;- max(monthly_summary$Total_Cargo_Weight/1e6, na.rm = TRUE)\nscaling_factor &lt;- max_revenue / max_cargo  \n\n\nggplot(monthly_summary, aes(x = Month)) +\n  geom_col(aes(y = Total_Cargo_Weight/1e6*scaling_factor, fill = \"Cargo Weight (Million Tons)\"), alpha = 0.6) + \n  geom_line(aes(y = Total_Revenue/1e6, color = \"Revenue (in USD Million)\"), size = 1.2) + \n  geom_line(aes(y = Total_Cost/1e6, color = \"Operational Cost (in USD Million)\"), size = 1.2, linetype = \"dashed\") +\n  scale_y_continuous(\n    name = \"Revenue & Cost (in USD Million)\", \n    labels = scales::dollar_format(suffix = \"M\", prefix = \"\"),\n    sec.axis = sec_axis(~ ./scaling_factor, name = \"Cargo Weight (Million Tons)\")  \n  ) +\n  scale_x_date(\n    date_labels = \"%b %Y\",\n    breaks = seq(min(monthly_summary$Month), max(monthly_summary$Month), by = \"1 month\")\n  ) +\n  labs(\n    title = \"Revenue, Cost, and Cargo Weight by Month\",\n    x = \"Month\",\n    fill = \"Metric\",\n    color = \"Metric\"\n  ) +\n  scale_fill_manual(values = c(\"Cargo Weight (Million Tons)\" = \"lightblue\")) +  \n  scale_color_manual(values = c(\n    \"Revenue (in USD Million)\" = \"black\",\n    \"Operational Cost (in USD Million)\" = \"darkred\"\n  )) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(hjust = 0.5, size = 14, face = \"bold\"),\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    legend.position = \"top\"\n  )\n\n\n\n\n\n\n\n\n\n\nInsights\n\n\n\n\nRevenue consistently exceeds operational costs across all months, indicating that operations remain profitable throughout the observed period.\nRevenue, operational costs and cargo weight exhibit similar trends. In months where cargo weight increases, both revenue and costs rise accordingly, and vice versa. This suggests a positive correlation between all three variables.\nThere is no clear growth trend over the observed period, as fluctuations in cargo weight, revenue, and costs occur over time. Further research could be undertaken to understand if these variations could be attributed to seasonal demand shifts or external factors such as global economic conditions affecting shipping volumes.\n\n\n\n\n\n3.1.2 Understanding Profitability by Ship Types\nIn this section, we will analyze the profitability across different ship types to gain insights into their profitability trends and variability.\nThe code chunk below generates three plots to explore the profitability of different ship types. Firstly, the bar chart presents the total profit across ship types, ranking them from highest to lowest profit. Next, the boxplot provides insight into the distribution of profit, highlighting the variability and median values across ship types. Lastly, the ridgeline plot illustrates the profit distribution across ship types. The patchwork function is then used to combine these plots together.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfiltered_ship_data1 &lt;- ship_data %&gt;% filter(Ship_Type != \"None\")\n\n\n\nmedians &lt;- filtered_ship_data1 %&gt;%\n  group_by(Ship_Type) %&gt;%\n  summarize(Median_Profit = median(Profit_USD/1e6, na.rm = TRUE))\n\nfiltered_ship_data1 &lt;- filtered_ship_data1 %&gt;%\n  left_join(medians, by = \"Ship_Type\")\n\n\n\np1 &lt;- ggplot(data=filtered_ship_data1, aes(y=Profit_USD/1e6, x=reorder(Ship_Type, Median_Profit), fill = Ship_Type)) +\n  geom_boxplot(notch=TRUE, show.legend = FALSE) +\n  geom_text(data = medians,\n            aes(label = sprintf(\"%.2fM\", Median_Profit), y = Median_Profit),\n            nudge_y = 0.1, size = 3.5) +\n  scale_y_continuous(labels = scales::dollar_format(suffix = \"M\", prefix = \"$\"), limits = c(-1.0,1.5)) + \n  labs(\n    title = \"Profit Distribution by Ship Type\",\n    x = NULL,  \n    y = \"Profit (in USD Million)\"\n  ) +\n  coord_flip() +\n  theme_classic() +\n  theme(\n    plot.title = element_text(hjust = 0.5, size = 14, face = \"bold\"),\n    axis.title.x = element_blank(),\n    axis.text.y = element_text(size = 12)\n  )\n\n\n\np2 &lt;- ggplot(data = filtered_ship_data1, aes(x = Profit_USD / 1e6, y = reorder(Ship_Type, Median_Profit), fill = Ship_Type)) +\n  geom_density_ridges(aes(group = Ship_Type, fill = Ship_Type), alpha = 0.8, show.legend = FALSE) +\n  scale_x_continuous(labels = scales::dollar_format(suffix = \"M\", prefix = \"$\"), limits = c(-1.0,1.5)) +\n  labs(\n    x = \"Profit (in USD Million)\",\n    y = NULL\n  ) +\n  theme_classic() + \n  theme(\n    axis.text.y = element_text(size = 12)\n  )\n\n\n\nprofit_summary &lt;- ship_data %&gt;%\n  filter(Ship_Type != \"None\") %&gt;%\n  group_by(Ship_Type) %&gt;%\n  summarise(Total_Profit = sum(Profit_USD, na.rm = TRUE)) %&gt;%\n  arrange(desc(Total_Profit)) \n\n\n\np3 &lt;- ggplot(profit_summary, aes(x = reorder(Ship_Type, Total_Profit), y = Total_Profit, fill = Ship_Type)) +\n  geom_col(show.legend = FALSE) + \n  geom_text(aes(label = sprintf(\"%.2fM\", Total_Profit / 1e6)), \n            hjust = 1.5, size = 3.5) +\n  coord_flip() + \n  scale_y_continuous(labels = scales::dollar_format(prefix = \"$\", suffix = \"M\", scale = 1e-6)) +\n  labs(\n    title = \"Total Profit by Ship Type\",\n    x = NULL, \n    y = \"Profit (in USD Million)\"\n  ) +\n  theme_classic() +\n  theme(\n    plot.title = element_text(hjust = 0.5, size = 14, face = \"bold\"),\n    plot.margin = margin(10, 40, 10, 10),\n    axis.text.y = element_text(size = 12))\n\n\ncombined_plot &lt;- (p3 | (p1 / p2)) + \n  plot_layout(widths = c(1, 2.5)) +\n  plot_annotation(\n    title = \"Understanding Profitability by Ship Types\",\n    theme = theme(\n      plot.title = element_text(hjust = 0.5, size = 18, face = \"bold\")\n    )\n  )\n\ncombined_plot\n\n\n\n\n\n\n\n\n\n\nInsights\n\n\n\n\nFish Carriers generated the highest total profit while Tankers generated the lowest. This pattern is also reflected in median profits, with Tankers having the lowest median profit at US$0.23M (supported by the peak of the ridgeline plot being closer to zero). Furthermore, the notch of the boxplot for Tankers does not overlap with the notches of the other ship types, suggesting that the median profit for Tankers is significantly lower.\nAlthough the median profits for Fish Carriers, Container Ships and Bulk Carriers are similar (indicated by their overlapping boxplot notches), their profit distributions differ:\n(a) Bulk Carriers display a bimodal distribution, indicating two distinct groups - some Bulk Carriers are highly profitable while others operate at lower margins.\n(b) Fish Carriers and Container Ships exhibit unimodal distributions. However, Container Ships appear to have a higher profit variability as indicated by the greater range and IQR in the boxplot.\n\n\n\n\n\n3.1.3 Understanding Sales and Profitability by Route Types\nIn this section, we will analyse the sales and profitability by route types based on quarterly trends. However, as June 2023 represents an incomplete quarter, we will exclude it from our analysis to ensure consistency in our quarterly comparisons.\nThe analysis assumes that the fiscal year starts in July. Hence, we will define the quarters as follows:\n\nQ1 = July 2023 - September 2023\nQ2 = October 2023 - December 2023\nQ3 = January 2024 - March 2024\nQ4 = April 2024 - June 2024\n\nEach chart is divided into four quadrants:\n\nHigh Profit, High Sales (Top Right)\nHigh Profit, Low Sales(Top Left): This could indicate potential issues with cost management or pricing.\nLow Profit, High Sales (Bottom Right)\nLow Profit, Low Sales (Bottom Left): Potentially requires attention.\n\nThe code chunk below generates a facet gird consisting of bubble charts, with each panel representing a quarterly breakdown of sales and profitability by route type. The bubble size reflects total weekly voyages to further aid in understanding how different route types perform over time.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nroute_summary &lt;- ship_data %&gt;%\n  filter(Route_Type != \"None\") %&gt;%  # Exclude Route_Type = \"None\"\n  filter(!(year(Month) == 2023 & month(Month) == 6)) %&gt;%  # Exclude June 2023\n  mutate(Quarter = case_when(\n    month(Month) %in% 7:9  ~ \"Q1\",  # July - September\n    month(Month) %in% 10:12 ~ \"Q2\", # October - December\n    month(Month) %in% 1:3  ~ \"Q3\",  # January - March\n    month(Month) %in% 4:6  ~ \"Q4\"   # April - June\n  )) %&gt;%\n  filter(!is.na(Quarter)) %&gt;% \n  group_by(Quarter, Route_Type) %&gt;%\n  summarise(\n    Total_Sales = sum(Revenue_per_Voyage_USD, na.rm = TRUE),\n    Total_Profit = sum(Profit_USD, na.rm = TRUE),\n    Total_Weekly_Voyages = sum(Weekly_Voyage_Count, na.rm = TRUE) \n  ) %&gt;%\n  mutate(\n    Sales_Percentile = percent_rank(Total_Sales), \n    Profit_Percentile = percent_rank(Total_Profit)\n  )\n\n\nggplot(route_summary, aes(x = Sales_Percentile, y = Profit_Percentile, \n                          size = Total_Weekly_Voyages, color = Route_Type)) +\n  geom_point(alpha = 0.7) + \n  geom_hline(yintercept = 0.5, linetype = \"dashed\", color = \"black\") +\n  geom_vline(xintercept = 0.5, linetype = \"dashed\", color = \"black\") +  \n  scale_size(range = c(3, 15), name = \"Total Weekly Voyages\") + \n  scale_x_continuous(labels = scales::percent_format()) +\n  scale_y_continuous(labels = scales::percent_format()) +\n  labs(\n    title = \"Sales and Profit by Route Types\",\n    x = \"Sales Percentile\",\n    y = \"Profit Percentile\",\n    color = \"Route Type\",\n    size = \"Total Weekly Voyages\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(hjust = 0.5, size = 14, face = \"bold\"),\n    legend.position = \"right\"\n  ) +\n  facet_wrap(~ Quarter, ncol = 2)\n\n\n\n\n\n\n\n\n\n\nInsights\n\n\n\n\nWith the exception of Q2, Long-Haul Routes predominantly occupy the top-right quadrant, indicating strong performance in both sales and profit across most quarters.\nCoastal Routes consistently rank above 50th percentile in profitability across all quarters, suggesting their high-margin nature. However, their sales performance fluctuates.\nTransoceanic Routes consistently rank below the 50th percentile in profitability across all quarters. In terms of sales, they exhibit the lowest sales in Q1 and Q2 but show improvements in Q3 and Q4. They ranked the lowest in terms of profitability and sales in Q1 and Q2.\nWith the exception of Q2, Short-Haul Routes exhibit both low profitability and sales in Q3 and Q4 (replacing Transoceanic Routes), thus positioning it as an under-performing route. In addition, they record the lowest number of voyages in Q3."
  },
  {
    "objectID": "Take-Home Exercise/Take-Home_Ex01/Take-Home_Ex01b.html#operational-metrics",
    "href": "Take-Home Exercise/Take-Home_Ex01/Take-Home_Ex01b.html#operational-metrics",
    "title": "Take-Home Exercise 1.0: Creating Data Visualisation Beyond Default",
    "section": "3.2 Operational Metrics",
    "text": "3.2 Operational Metrics\n\n3.2.1 Understanding Average Load Percentage by Ship Types Across Route Types\nThis section examines the distribution of average load percentage across different ship types and routes types. By visualising the density distribution of load percentage, this section aims to understand how efficiently different ship types utilise their cargo capacity on various routes.\nThe code chunk below plots the density distributions of average load percentage for different ship types across route types using geom_density. A reference line representing the median load percentage for each route type is added to provide a benchmark for further interpretation.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfiltered_data2 &lt;- ship_data %&gt;%\n  filter(Ship_Type != \"None\", Route_Type != \"None\")\n\nmedian_values &lt;- filtered_data2 %&gt;%\n  group_by(Route_Type) %&gt;%\n  summarise(Median_Load = median(Average_Load_Percentage, na.rm = TRUE), .groups = \"drop\")\n\n\nggplot(filtered_data2, aes(x = Average_Load_Percentage, color = Ship_Type)) +\n  geom_density(alpha = 0.7) +  \n  geom_vline(data = median_values, aes(xintercept = Median_Load), \n             linetype = \"dashed\", size = 0.5, color = \"black\") +\n  geom_text(data = median_values, \n            aes(x = Median_Load, y = 0, \n                label = sprintf(\"Median: %.1f%%\", Median_Load)), \n            hjust = 1.1, vjust = -1.5, size = 2.5, color = \"black\") + \n  labs(\n    title = \"Average Load Percentage by Ship Types Across Routes\",\n    x = \"Average Load Percentage (%)\",\n    y = \"Density\",\n    color = \"Ship Type\"\n  ) +\n  facet_wrap(~ Route_Type, ncol = 2) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(hjust = 0.5, size = 14, face = \"bold\")\n  )\n\n\n\n\n\n\n\n\n\n\nInsights\n\n\n\n\nCoastal Routes: Tankers exhibit a left-skewed distribution, with a distinct peak in the 90% - 95% range, indicating a higher frequency of tankers operating at high load capacities. In contrast, other ship types demonstrate a more uniform distribution.\nLong-Haul Routes: All ship types exhibit a relatively uniform distribution.\nShort-Haul Routes: Container Ships exhibit a right-skewed distribution, with a peak in the 60% - 65% range, indicating a higher frequency of container ships operating with lower load capacities. In contrast, both Bulk Carriers and Tankers exhibit a left-skew distribution, suggesting a tendency toward higher load capacities.\nTransoceanic Routes: Most ship types exhibit a relatively uniform distribution, except for Bulk Carriers, which display a distinct peak in the 80% - 85% range. This indicates a higher concentration of bulk carriers operating within this load percentage."
  },
  {
    "objectID": "In-Class Exercise/In-Class_Ex05/In-Class_Ex05.html",
    "href": "In-Class Exercise/In-Class_Ex05/In-Class_Ex05.html",
    "title": "In-class Exercise 5.0",
    "section": "",
    "text": "pacman::p_load(tidyverse, readxl, SmartEDA, easystats, gtsummary, ggstatsplot)\n\n\n\n\n\ncar_resale &lt;-\n  read_xls(\"data/ToyotaCorolla - Copy.xls\", \"data\")"
  },
  {
    "objectID": "In-Class Exercise/In-Class_Ex05/In-Class_Ex05.html#installing-and-launching-the-r-packages",
    "href": "In-Class Exercise/In-Class_Ex05/In-Class_Ex05.html#installing-and-launching-the-r-packages",
    "title": "In-class Exercise 5.0",
    "section": "",
    "text": "pacman::p_load(tidyverse, readxl, SmartEDA, easystats, gtsummary, ggstatsplot)"
  },
  {
    "objectID": "In-Class Exercise/In-Class_Ex05/In-Class_Ex05.html#importing-data",
    "href": "In-Class Exercise/In-Class_Ex05/In-Class_Ex05.html#importing-data",
    "title": "In-class Exercise 5.0",
    "section": "",
    "text": "car_resale &lt;-\n  read_xls(\"data/ToyotaCorolla - Copy.xls\", \"data\")"
  }
]